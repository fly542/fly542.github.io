<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>openssl生成pem格式公钥私钥文件并实现RSA加解密</title>
    <link href="/2022/05/24/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/14pem%E6%A0%BC%E5%BC%8F%E5%85%AC%E9%92%A5%E7%A7%81%E9%92%A5%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0RSA%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <url>/2022/05/24/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/14pem%E6%A0%BC%E5%BC%8F%E5%85%AC%E9%92%A5%E7%A7%81%E9%92%A5%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0RSA%E5%8A%A0%E8%A7%A3%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="使用openssl生成pem格式私钥和公钥"><a href="#使用openssl生成pem格式私钥和公钥" class="headerlink" title="使用openssl生成pem格式私钥和公钥"></a>使用openssl生成pem格式私钥和公钥</h1><ul><li><p>生成公钥和私钥</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs autohotkey">openssl生成私钥命令： openssl genrsa -out rs<span class="hljs-built_in">a_private</span>_key.pem <span class="hljs-number">1024</span><br>openssl生成公钥命令： openssl rsa -in rs<span class="hljs-built_in">a_private</span>_key.pem -pubout -out rs<span class="hljs-built_in">a_public</span>_key.pem<br></code></pre></td></tr></table></figure><p>此时可以看到 rsa_private_key.pem 和 rsa_public_key.pem 两个文件。这时候的私钥是不能直接使用的，需要进行 pkcs8 编码。</p></li><li><p>对私钥进行pkcs8编码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">openssl</span>的pkcs<span class="hljs-number">8</span>编码命令：openssl pkcs<span class="hljs-number">8</span> -topk<span class="hljs-number">8</span> -in rsa_private_key.pem -out  pkcs<span class="hljs-number">8</span>_rsa_private_key.pem -nocrypt<br></code></pre></td></tr></table></figure></li></ul><p>此时可以看到 pkcs8_rsa_private_key.pem 文件 ,可用的密钥对已经生成好了，私钥使用pkcs8_rsa_private_key.pem，公钥采用rsa_public_key.pem。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/u014644574/article/details/122628383">https://blog.csdn.net/u014644574/article/details/122628383</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stl严格弱序(stick weak ordering)</title>
    <link href="/2022/04/22/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/13stl%E4%B8%A5%E6%A0%BC%E5%BC%B1%E5%BA%8F(stick%20weak%20ordering)/"/>
    <url>/2022/04/22/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/13stl%E4%B8%A5%E6%A0%BC%E5%BC%B1%E5%BA%8F(stick%20weak%20ordering)/</url>
    
    <content type="html"><![CDATA[<p>STL有序容器对元素关键字的类型有要求，元素关键字的类型必须定义了严格弱序（stick weak ordering）</p><h1 id="什么是严格弱序"><a href="#什么是严格弱序" class="headerlink" title="什么是严格弱序"></a>什么是严格弱序</h1><h1 id="STL严格弱序实现方式"><a href="#STL严格弱序实现方式" class="headerlink" title="STL严格弱序实现方式"></a>STL严格弱序实现方式</h1><p>对于STL中的容器实现<code>&lt;</code>操作符，这就是一个严格弱序;而<code>&lt;=</code>不是一个严格弱序</p><p>在自定义比较函数(self_compare )的时候需要注意在相等时要返回false， 不能返回true.</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>zh.cppreference.com<span class="hljs-regexp">/w/</span>cpp<span class="hljs-regexp">/named_req/</span>Compare<br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/River_Lethe/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">78618788</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenResty(nginx+lua)基础 (转载)</title>
    <link href="/2022/04/06/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/05others/00OpenResty(nginx+lua)%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/04/06/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/05others/00OpenResty(nginx+lua)%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>本文转载自《<a href="https://www.cnblogs.com/digdeep/p/4859575.html%E3%80%8B">https://www.cnblogs.com/digdeep/p/4859575.html》</a></p><h1 id="OpenResty-介绍"><a href="#OpenResty-介绍" class="headerlink" title="OpenResty 介绍"></a>OpenResty 介绍</h1><p>OpenResty 官网：<a href="http://openresty.org/">http://openresty.org/</a></p><p>OpenResty 是一个nginx和它的各种三方模块的一个打包而成的软件平台。最重要的一点是它将lua/luajit打包了进来，使得我们可以使用lua脚本来进行web的开发。有了lua，我们可以借助于nginx的异步非阻塞的功能，达到使用 lua 异步并发访问后端的 MySQL, PostgreSQL, Memcached, Redis等等服务。特别是特有的 ngx.location.capture_multi 功能让人印象深刻，其可以达到极大的减少浏览器的http连接数量，并且可以异步并发的访问后台 Java/PHP/Python 等等接口。OpenResty 架构的web可以轻松超越Node.js的性能，并且对后端语言没有限制，你可以使用Java/PHP/Python等等各种语言。OpenResty(nginx+lua)可以替代node.js的前端渲染的功能。</p><h1 id="安装OpenResty"><a href="#安装OpenResty" class="headerlink" title="安装OpenResty"></a>安装OpenResty</h1><p>先安装依赖：yum install readline-devel pcre-devel openssl-devel gcc</p><p>解压： tar zxvf ngx_openresty-1.9.3.1.tar.gz</p><p>建立一个软连接：ln -s ngx_openresty-1.9.3.1 openresty</p><p>进入目录：cd openresty</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><pre><code class="hljs livecodeserver">./configure \<br>             <span class="hljs-comment">--with-cc-opt=&quot;-I/usr/local/include&quot; \</span><br>             <span class="hljs-comment">--with-ld-opt=&quot;-L/usr/local/lib&quot; \</span><br>             <span class="hljs-comment">--prefix=/opt/openresty </span><br><br>... ...<br>Configuration summary<br>  + <span class="hljs-keyword">using</span> <span class="hljs-keyword">system</span> PCRE library<br>  + <span class="hljs-keyword">using</span> <span class="hljs-keyword">system</span> OpenSSL library<br>  + md5: <span class="hljs-keyword">using</span> OpenSSL library<br>  + sha1: <span class="hljs-keyword">using</span> OpenSSL library<br>  + <span class="hljs-keyword">using</span> <span class="hljs-keyword">system</span> zlib library<br><br>  nginx path prefix: <span class="hljs-string">&quot;/opt/openresty/nginx&quot;</span><br>  nginx binary <span class="hljs-built_in">file</span>: <span class="hljs-string">&quot;/opt/openresty/nginx/sbin/nginx&quot;</span><br>  nginx configuration prefix: <span class="hljs-string">&quot;/opt/openresty/nginx/conf&quot;</span><br>  nginx configuration <span class="hljs-built_in">file</span>: <span class="hljs-string">&quot;/opt/openresty/nginx/conf/nginx.conf&quot;</span><br>  nginx pid <span class="hljs-built_in">file</span>: <span class="hljs-string">&quot;/opt/openresty/nginx/logs/nginx.pid&quot;</span><br>  nginx error <span class="hljs-built_in">log</span> <span class="hljs-built_in">file</span>: <span class="hljs-string">&quot;/opt/openresty/nginx/logs/error.log&quot;</span><br>  nginx <span class="hljs-keyword">http</span> access <span class="hljs-built_in">log</span> <span class="hljs-built_in">file</span>: <span class="hljs-string">&quot;/opt/openresty/nginx/logs/access.log&quot;</span><br>  nginx <span class="hljs-keyword">http</span> client request body temporary <span class="hljs-built_in">files</span>: <span class="hljs-string">&quot;client_body_temp&quot;</span><br>  nginx <span class="hljs-keyword">http</span> proxy temporary <span class="hljs-built_in">files</span>: <span class="hljs-string">&quot;proxy_temp&quot;</span><br>  nginx <span class="hljs-keyword">http</span> fastcgi temporary <span class="hljs-built_in">files</span>: <span class="hljs-string">&quot;fastcgi_temp&quot;</span><br>  nginx <span class="hljs-keyword">http</span> uwsgi temporary <span class="hljs-built_in">files</span>: <span class="hljs-string">&quot;uwsgi_temp&quot;</span><br>  nginx <span class="hljs-keyword">http</span> scgi temporary <span class="hljs-built_in">files</span>: <span class="hljs-string">&quot;scgi_temp&quot;</span><br></code></pre></td></tr></table></figure><p>其中 –prefix=/opt/openresty 指定了安装目录，不指定的话默认会安装到 /usr/local/openresty 目录下。</p><h2 id="编译安装：-make-amp-amp-make-install"><a href="#编译安装：-make-amp-amp-make-install" class="headerlink" title="编译安装： make &amp;&amp; make install"></a>编译安装： make &amp;&amp; make install</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> src]<span class="hljs-meta"># cd /opt/openresty/</span><br>[root<span class="hljs-symbol">@localhost</span> openresty]<span class="hljs-meta"># ls</span><br>bin  luajit  lualib  nginx<br></code></pre></td></tr></table></figure><p>可以看到 /opt/openresty 目录下四个文件夹，其中包括了 luajit，nginx。</p><p>启动openresty: /opt/openresty/nginx/sbin/nginx -c /opt/openresty/nginx/conf/nginx.conf -p /opt/openresty/nginx/</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@localhost src]<span class="hljs-comment"># ps -elf|grep nginx</span><br>1 S root     <span class="hljs-number"> 2076 </span>   <span class="hljs-number"> 1 </span><span class="hljs-number"> 0 </span><span class="hljs-number"> 80 </span> <span class="hljs-number"> 0 </span>-<span class="hljs-number"> 34999 </span>-      21:24 ?        00:00:00 nginx: master process /opt/openresty/nginx/sbin/nginx -c /opt/openresty/nginx/conf/nginx.conf -p /opt/openresty/nginx/<br>5 S nobody   <span class="hljs-number"> 2077 </span><span class="hljs-number"> 2076 </span><span class="hljs-number"> 0 </span><span class="hljs-number"> 80 </span> <span class="hljs-number"> 0 </span>-<span class="hljs-number"> 35045 </span>-      21:24 ?        00:00:00 nginx: worker process                                    <br>0 S root     <span class="hljs-number"> 2079 </span><span class="hljs-number"> 1678 </span><span class="hljs-number"> 0 </span><span class="hljs-number"> 80 </span> <span class="hljs-number"> 0 </span>- <span class="hljs-number"> 1088 </span>-      21:24 pts/1    00:00:00 grep nginx<br></code></pre></td></tr></table></figure><p>验证可以访问： curl 127.0.0.1</p><h1 id="content-by-lua-和-content-by-lua-file"><a href="#content-by-lua-和-content-by-lua-file" class="headerlink" title="content_by_lua 和 content_by_lua_file"></a>content_by_lua 和 content_by_lua_file</h1><p>nginx 如何嵌入 lua 脚本。方法就是在nginx的配置文件nginx.conf 中使用 content_by_lua 或者 cotent_by_lua_file 指令：</p><h2 id="content-by-lua-一般在很简单的lua脚本时使用："><a href="#content-by-lua-一般在很简单的lua脚本时使用：" class="headerlink" title="content_by_lua 一般在很简单的lua脚本时使用："></a>content_by_lua 一般在很简单的lua脚本时使用：</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata">location /lua &#123;<br>        <span class="hljs-keyword">set</span> <span class="hljs-variable">$test</span> <span class="hljs-string">&quot;hello, world.&quot;</span>;<br>        content_by_lua &#x27;<br>                ngx.header.content_type = <span class="hljs-string">&quot;text/plain&quot;</span>;<br>                ngx.say(ngx.<span class="hljs-keyword">var</span>.<span class="hljs-keyword">test</span>);<br>        &#x27;;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问 <a href="http://localhost/lua">http://localhost/lua</a> 可以看到输出到页面的  hello, world.</p><h2 id="cotent-by-lua-file-适应于复杂的-lua-脚本，专门放入一个文件中："><a href="#cotent-by-lua-file-适应于复杂的-lua-脚本，专门放入一个文件中：" class="headerlink" title="cotent_by_lua_file 适应于复杂的 lua 脚本，专门放入一个文件中："></a>cotent_by_lua_file 适应于复杂的 lua 脚本，专门放入一个文件中：</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/lua2</span> &#123;<br>    <span class="hljs-comment">#lua_code_cache off;</span><br>    content_by_lua_file lua/hello.lua;<br>&#125;<br></code></pre></td></tr></table></figure><p>路径相对于 /opt/openresty/nginx</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@localhost lua]<span class="hljs-comment"># pwd</span><br><span class="hljs-regexp">/opt/</span>openresty<span class="hljs-regexp">/nginx/</span>lua<br>[root@localhost lua]<span class="hljs-comment"># cat hello.lua</span><br>ngx.say(<span class="hljs-string">&#x27;hello ngx_lua!!!!&#x27;</span>);<br></code></pre></td></tr></table></figure><p>本例子中 hello.lua 只包含一句： ngx.say(‘hello ngx_lua!!!!’);</p><p>访问 /lua2 :</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">[root@localhost lua]# curl localhost/lua<br>hello ngx_lua!!!!<br></code></pre></td></tr></table></figure><p>可以看到访问成功。</p><p>在 nginx.conf 文件的 server {.. …} 中加入 lua_code_cache off; 可以方便调试lua脚本，修改lua脚本之后，不需要 reload nginx.</p><p>openresty 中的 nginx 嵌入 luajit 的原理：</p><img src="/2022/04/06/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/05others/00OpenResty(nginx+lua)%E5%9F%BA%E7%A1%80/1.png" class="" title="ngx_lua工作原理"><p>每一个nginx的进程中都嵌入了一个 luajit的虚拟机，来执行lua脚本。nginx将lua脚本的执行交给了luajit vm.</p><h1 id="ngx-lua-的指令-和-API"><a href="#ngx-lua-的指令-和-API" class="headerlink" title="ngx_lua 的指令 和 API"></a>ngx_lua 的指令 和 API</h1><h2 id="ngx访问lua指令"><a href="#ngx访问lua指令" class="headerlink" title="ngx访问lua指令"></a>ngx访问lua指令</h2><p>上面我们说到 nginx 嵌入 lua 脚本可以使用 content_by_lua 和 content_by_lua_file，它们其实是<code>指令(Directives)</code>，类似的<code>指令</code>还有很多，</p><p>具体参见：<a href="https://www.nginx.com/resources/wiki/modules/lua/#directives">https://www.nginx.com/resources/wiki/modules/lua/#directives</a></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">lu<span class="hljs-built_in">a_use</span>_default_type<br>lu<span class="hljs-built_in">a_code</span>_cache<br>lu<span class="hljs-built_in">a_regex</span>_cache_max_entries<br>lu<span class="hljs-built_in">a_regex</span>_match_limit<br>lu<span class="hljs-built_in">a_package</span>_path<br>lu<span class="hljs-built_in">a_package</span>_cpath<br>init_by_lua<br>init_by_lu<span class="hljs-built_in">a_file</span><br>init_worker_by_lua<br>init_worker_by_lu<span class="hljs-built_in">a_file</span><br>set_by_lua<br>set_by_lu<span class="hljs-built_in">a_file</span><br>content_by_lua<br>content_by_lu<span class="hljs-built_in">a_file</span><br>rewrite_by_lua<br>rewrite_by_lu<span class="hljs-built_in">a_file</span><br>access_by_lua<br>access_by_lu<span class="hljs-built_in">a_file</span><br>header_filter_by_lua<br>header_filter_by_lu<span class="hljs-built_in">a_file</span><br>body_filter_by_lua<br>body_filter_by_lu<span class="hljs-built_in">a_file</span><br>log_by_lua<br>log_by_lu<span class="hljs-built_in">a_file</span><br>lu<span class="hljs-built_in">a_need</span>_request_body<br>lu<span class="hljs-built_in">a_shared</span>_dict<br>lu<span class="hljs-built_in">a_socket</span>_connect_timeout<br>lu<span class="hljs-built_in">a_socket</span>_send_timeout<br>lu<span class="hljs-built_in">a_socket</span>_send_lowat<br>lu<span class="hljs-built_in">a_socket</span>_read_timeout<br>lu<span class="hljs-built_in">a_socket</span>_buffer_size<br>lu<span class="hljs-built_in">a_socket</span>_pool_size<br>lu<span class="hljs-built_in">a_socket</span>_keepalive_timeout<br>lu<span class="hljs-built_in">a_socket</span>_log_errors<br>lu<span class="hljs-built_in">a_ssl</span>_ciphers<br>lu<span class="hljs-built_in">a_ssl</span>_crl<br>lu<span class="hljs-built_in">a_ssl</span>_protocols<br>lu<span class="hljs-built_in">a_ssl</span>_trusted_certificate<br>lu<span class="hljs-built_in">a_ssl</span>_verify_depth<br>lu<span class="hljs-built_in">a_http10</span>_buffering<br>rewrite_by_lu<span class="hljs-built_in">a_no</span>_postpone<br>lu<span class="hljs-built_in">a_transform</span>_underscores_in_response_headers<br>lu<span class="hljs-built_in">a_check</span>_client_abort<br>lu<span class="hljs-built_in">a_max</span>_pending_timers<br>lu<span class="hljs-built_in">a_max</span>_running_timers<br></code></pre></td></tr></table></figure><p>这些指令都是 nginx 访问 lua 脚本的入口。</p><h2 id="lua-访问nginx-API"><a href="#lua-访问nginx-API" class="headerlink" title="lua 访问nginx API"></a>lua 访问nginx API</h2><p>lua脚本如何调用nginx中的函数呢？就是通过 ngx_lua 的API 。</p><p>具体介绍参见：<a href="https://www.nginx.com/resources/wiki/modules/lua/#nginx-api-for-lua">https://www.nginx.com/resources/wiki/modules/lua/#nginx-api-for-lua</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Introduction<br>ngx<span class="hljs-selector-class">.arg</span><br>ngx<span class="hljs-selector-class">.var</span><span class="hljs-selector-class">.VARIABLE</span><br>Core constants<br>HTTP method constants<br>HTTP status constants<br>NGINX log level constants<br>print<br>ngx<span class="hljs-selector-class">.ctx</span><br>ngx<span class="hljs-selector-class">.location</span><span class="hljs-selector-class">.capture</span><br>ngx<span class="hljs-selector-class">.location</span><span class="hljs-selector-class">.capture_multi</span><br>ngx<span class="hljs-selector-class">.status</span><br>ngx<span class="hljs-selector-class">.header</span><span class="hljs-selector-class">.HEADER</span><br>ngx<span class="hljs-selector-class">.resp</span><span class="hljs-selector-class">.get_headers</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.start_time</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.http_version</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.raw_header</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.get_method</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.set_method</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.set_uri</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.set_uri_args</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.get_uri_args</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.get_post_args</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.get_headers</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.set_header</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.clear_header</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.read_body</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.discard_body</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.get_body_data</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.get_body_file</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.set_body_data</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.set_body_file</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.init_body</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.append_body</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.finish_body</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.socket</span><br>ngx<span class="hljs-selector-class">.req</span><span class="hljs-selector-class">.is_internal</span><br>ngx<span class="hljs-selector-class">.exec</span><br>ngx<span class="hljs-selector-class">.redirect</span><br>ngx<span class="hljs-selector-class">.send_headers</span><br>ngx<span class="hljs-selector-class">.headers_sent</span><br>ngx<span class="hljs-selector-class">.print</span><br>ngx<span class="hljs-selector-class">.say</span><br>ngx<span class="hljs-selector-class">.log</span><br>ngx<span class="hljs-selector-class">.flush</span><br>ngx<span class="hljs-selector-class">.exit</span><br>ngx<span class="hljs-selector-class">.eof</span><br>ngx<span class="hljs-selector-class">.sleep</span><br>ngx<span class="hljs-selector-class">.escape_uri</span><br>ngx<span class="hljs-selector-class">.unescape_uri</span><br>ngx<span class="hljs-selector-class">.encode_args</span><br>ngx<span class="hljs-selector-class">.decode_args</span><br>ngx<span class="hljs-selector-class">.encode_base64</span><br>ngx<span class="hljs-selector-class">.decode_base64</span><br>ngx<span class="hljs-selector-class">.crc32_short</span><br>ngx<span class="hljs-selector-class">.crc32_long</span><br>ngx<span class="hljs-selector-class">.hmac_sha1</span><br>ngx<span class="hljs-selector-class">.md5</span><br>ngx<span class="hljs-selector-class">.md5_bin</span><br>ngx<span class="hljs-selector-class">.sha1_bin</span><br>ngx<span class="hljs-selector-class">.quote_sql_str</span><br>ngx<span class="hljs-selector-class">.today</span><br>ngx<span class="hljs-selector-class">.time</span><br>ngx<span class="hljs-selector-class">.now</span><br>ngx<span class="hljs-selector-class">.update_time</span><br>ngx<span class="hljs-selector-class">.localtime</span><br>ngx<span class="hljs-selector-class">.utctime</span><br>ngx<span class="hljs-selector-class">.cookie_time</span><br>ngx<span class="hljs-selector-class">.http_time</span><br>ngx<span class="hljs-selector-class">.parse_http_time</span><br>ngx<span class="hljs-selector-class">.is_subrequest</span><br>ngx<span class="hljs-selector-class">.re</span><span class="hljs-selector-class">.match</span><br>ngx<span class="hljs-selector-class">.re</span><span class="hljs-selector-class">.find</span><br>ngx<span class="hljs-selector-class">.re</span><span class="hljs-selector-class">.gmatch</span><br>ngx<span class="hljs-selector-class">.re</span><span class="hljs-selector-class">.sub</span><br>ngx<span class="hljs-selector-class">.re</span><span class="hljs-selector-class">.gsub</span><br>ngx<span class="hljs-selector-class">.shared</span><span class="hljs-selector-class">.DICT</span><br>ngx<span class="hljs-selector-class">.shared</span><span class="hljs-selector-class">.DICT</span><span class="hljs-selector-class">.get</span><br>ngx<span class="hljs-selector-class">.shared</span><span class="hljs-selector-class">.DICT</span><span class="hljs-selector-class">.get_stale</span><br>ngx<span class="hljs-selector-class">.shared</span><span class="hljs-selector-class">.DICT</span><span class="hljs-selector-class">.set</span><br>ngx<span class="hljs-selector-class">.shared</span><span class="hljs-selector-class">.DICT</span><span class="hljs-selector-class">.safe_set</span><br>ngx<span class="hljs-selector-class">.shared</span><span class="hljs-selector-class">.DICT</span><span class="hljs-selector-class">.add</span><br>ngx<span class="hljs-selector-class">.shared</span><span class="hljs-selector-class">.DICT</span><span class="hljs-selector-class">.safe_add</span><br>ngx<span class="hljs-selector-class">.shared</span><span class="hljs-selector-class">.DICT</span><span class="hljs-selector-class">.replace</span><br>ngx<span class="hljs-selector-class">.shared</span><span class="hljs-selector-class">.DICT</span><span class="hljs-selector-class">.delete</span><br>ngx<span class="hljs-selector-class">.shared</span><span class="hljs-selector-class">.DICT</span><span class="hljs-selector-class">.incr</span><br>ngx<span class="hljs-selector-class">.shared</span><span class="hljs-selector-class">.DICT</span><span class="hljs-selector-class">.flush_all</span><br>ngx<span class="hljs-selector-class">.shared</span><span class="hljs-selector-class">.DICT</span><span class="hljs-selector-class">.flush_expired</span><br>ngx<span class="hljs-selector-class">.shared</span><span class="hljs-selector-class">.DICT</span><span class="hljs-selector-class">.get_keys</span><br>ngx<span class="hljs-selector-class">.socket</span><span class="hljs-selector-class">.udp</span><br>udpsock:setpeername<br>udpsock:send<br>udpsock:receive<br>udpsock:close<br>udpsock:settimeout<br>ngx<span class="hljs-selector-class">.socket</span><span class="hljs-selector-class">.tcp</span><br>tcpsock:connect<br>tcpsock:sslhandshake<br>tcpsock:send<br>tcpsock:receive<br>tcpsock:receiveuntil<br>tcpsock:close<br>tcpsock:settimeout<br>tcpsock:setoption<br>tcpsock:setkeepalive<br>tcpsock:getreusedtimes<br>ngx<span class="hljs-selector-class">.socket</span><span class="hljs-selector-class">.connect</span><br>ngx<span class="hljs-selector-class">.get_phase</span><br>ngx<span class="hljs-selector-class">.thread</span><span class="hljs-selector-class">.spawn</span><br>ngx<span class="hljs-selector-class">.thread</span><span class="hljs-selector-class">.wait</span><br>ngx<span class="hljs-selector-class">.thread</span><span class="hljs-selector-class">.kill</span><br>ngx<span class="hljs-selector-class">.on_abort</span><br>ngx<span class="hljs-selector-class">.timer</span><span class="hljs-selector-class">.at</span><br>ngx<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.debug</span><br>ngx<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.prefix</span><br>ngx<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.nginx_version</span><br>ngx<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.nginx_configure</span><br>ngx<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.ngx_lua_version</span><br>ngx<span class="hljs-selector-class">.worker</span><span class="hljs-selector-class">.exiting</span><br>ngx<span class="hljs-selector-class">.worker</span><span class="hljs-selector-class">.pid</span><br>ndk<span class="hljs-selector-class">.set_var</span><span class="hljs-selector-class">.DIRECTIVE</span><br>coroutine<span class="hljs-selector-class">.create</span><br>coroutine<span class="hljs-selector-class">.resume</span><br>coroutine<span class="hljs-selector-class">.yield</span><br>coroutine<span class="hljs-selector-class">.wrap</span><br>coroutine<span class="hljs-selector-class">.running</span><br>coroutine.status<br></code></pre></td></tr></table></figure><p>其实nginx和Lua的交互开发主要就是指令和API，当然还有lua脚本的语法。<code>指令</code>是nginx访问lua的入口，<code>API</code>是lua调用nginx的函数，lua是脚本编程语言。</p><p><code>指令</code>其实很简单，所以主要就是熟悉ngx_lua的 API 和Lua语法。</p><h1 id="lua-访问-redis"><a href="#lua-访问-redis" class="headerlink" title="lua 访问 redis"></a>lua 访问 redis</h1><p>lua-resty-redis 模块：<a href="https://github.com/openresty/lua-resty-redis">https://github.com/openresty/lua-resty-redis</a> （有文档可以参考）</p><p>在nginx.conf中加入：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/redis_test</span>&#123;<br>    content_by_lua_file lua/redis_test.lua;<br>&#125;<br></code></pre></td></tr></table></figure><p>redis_test.lua 内容:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@localhost lua]<span class="hljs-comment"># cat redis_test.lua</span><br><span class="hljs-keyword">local</span> redis = require <span class="hljs-string">&quot;resty.redis&quot;</span><br><span class="hljs-keyword">local</span> red = redis:new()<br><br>red:set_timeout(<span class="hljs-number">1000</span>)<br><br><span class="hljs-keyword">local</span> ok, err = red:connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>        ngx.<span class="hljs-built_in">say</span>(<span class="hljs-string">&quot;failed to connect: &quot;</span>, err)<br><span class="hljs-built_in">        return</span><br><span class="hljs-keyword">end</span><br><br>ngx.<span class="hljs-built_in">say</span>(<span class="hljs-string">&quot;set result: &quot;</span>, ok)<br><br><span class="hljs-keyword">local</span> res, err = red:<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;dog&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> res <span class="hljs-keyword">then</span><br>        ngx.<span class="hljs-built_in">say</span>(<span class="hljs-string">&quot;failed to get doy: &quot;</span>, err)<br><span class="hljs-built_in">        return</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">if</span> res == ngx.null <span class="hljs-keyword">then</span><br>        ngx.<span class="hljs-built_in">say</span>(<span class="hljs-string">&quot;dog not found.&quot;</span>)<br><span class="hljs-built_in">        return</span><br><span class="hljs-keyword">end</span><br><br>ngx.<span class="hljs-built_in">say</span>(<span class="hljs-string">&quot;dog: &quot;</span>, res)<br><br>[root@localhost lua]<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>访问：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@localhost <span class="hljs-keyword">lua</span>]# curl localhost/redis_test<br><span class="hljs-keyword">set</span> resul<span class="hljs-variable">t:</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">do</span><span class="hljs-variable">g:</span> <span class="hljs-keyword">an</span> animal<br>[root@localhost <span class="hljs-keyword">lua</span>]#<br></code></pre></td></tr></table></figure><p>我们看到访问成功。</p><h1 id="lua-访问mysql"><a href="#lua-访问mysql" class="headerlink" title="lua 访问mysql"></a>lua 访问mysql</h1><p>openresty的mysql模块：lua-resty-mysql :<a href="https://github.com/openresty/lua-resty-mysql%EF%BC%88%E6%9C%89%E6%96%87%E6%A1%A3%E5%8F%AF%E4%BB%A5%E5%8F%82%E8%80%83%EF%BC%89">https://github.com/openresty/lua-resty-mysql（有文档可以参考）</a></p><p>在nginx.conf加入如下配置：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/mysql_test</span> &#123;<br>    content_by_lua_file lua/mysql_test.lua;<br>&#125;<br></code></pre></td></tr></table></figure><p>mysql_test.lua脚本内容：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@localhost lua]# <span class="hljs-keyword">pwd</span><br>/opt/openresty/nginx/lua<br>[root@localhost lua]# <span class="hljs-keyword">cat</span> mysql_test.lua<br><span class="hljs-keyword">local</span> mysql = require <span class="hljs-string">&quot;resty.mysql&quot;</span><br><span class="hljs-keyword">local</span> <span class="hljs-keyword">db</span>, <span class="hljs-keyword">err</span> = mysql:new()<br><br><span class="hljs-keyword">if</span> not <span class="hljs-keyword">db</span> then<br>        ngx.say(<span class="hljs-string">&quot;failed to instantiate mysql: &quot;</span>, <span class="hljs-keyword">err</span>)<br>        <span class="hljs-keyword">return</span><br>end<br><br><span class="hljs-keyword">db</span>:set_timeout(1000)<br><br><span class="hljs-keyword">local</span> ok, <span class="hljs-keyword">err</span>, errno, sqlstate = <span class="hljs-keyword">db</span>:connect&#123;<br>        host = <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>        port = 3306,<br>        database = <span class="hljs-string">&quot;ngx_lua&quot;</span>,<br>        user = <span class="hljs-string">&quot;root&quot;</span>,<br>        password=<span class="hljs-string">&quot;digdeep&quot;</span>,<br>        max_packet_size = 1024 * 1024<br>&#125;<br><br><span class="hljs-keyword">if</span> not ok then<br>        ngx.say(<span class="hljs-string">&quot;failed to connect: &quot;</span>, <span class="hljs-keyword">err</span>, <span class="hljs-string">&quot;: &quot;</span>, errno, <span class="hljs-string">&quot; &quot;</span>, sqlstate)<br>        <span class="hljs-keyword">return</span><br>end<br><br>ngx.say(<span class="hljs-string">&quot;connected to mysql.&quot;</span>)<br><br><span class="hljs-keyword">local</span> res, <span class="hljs-keyword">err</span>, errno, sqlstate = <span class="hljs-keyword">db</span>:<span class="hljs-keyword">query</span>(<span class="hljs-string">&quot;drop table if exists cats&quot;</span>)<br><span class="hljs-keyword">if</span> not res then<br>        ngx.say(<span class="hljs-string">&quot;bad result: &quot;</span>, <span class="hljs-keyword">err</span>, <span class="hljs-string">&quot;: &quot;</span>, errno, <span class="hljs-string">&quot;: &quot;</span>, sqlstate, <span class="hljs-string">&quot;.&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>end<br><br>res, <span class="hljs-keyword">err</span>, errno, sqlstate = <span class="hljs-keyword">db</span>:<span class="hljs-keyword">query</span>(<span class="hljs-string">&quot;create table cats &quot;</span> .. <span class="hljs-string">&quot;(id int not null primary key auto_increment, &quot;</span><br>                                        .. <span class="hljs-string">&quot;name varchar(30))&quot;</span>)<br><span class="hljs-keyword">if</span> not res then<br>        ngx.say(<span class="hljs-string">&quot;bad result: &quot;</span>, <span class="hljs-keyword">err</span>, <span class="hljs-string">&quot;: &quot;</span>, errno, <span class="hljs-string">&quot;: &quot;</span>, sqlstate, <span class="hljs-string">&quot;.&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>end<br><br>ngx.say(<span class="hljs-string">&quot;table cats created.&quot;</span>)<br><br>res, <span class="hljs-keyword">err</span>, errno, sqlstate = <span class="hljs-keyword">db</span>:<span class="hljs-keyword">query</span>(<span class="hljs-string">&quot;insert into cats(name) &quot;</span> .. <span class="hljs-string">&quot;values (\&#x27;Bob\&#x27;),(\&#x27;\&#x27;),(null)&quot;</span>)<br><span class="hljs-keyword">if</span> not res then<br>        ngx.say(<span class="hljs-string">&quot;bad request: &quot;</span>, <span class="hljs-keyword">err</span>, <span class="hljs-string">&quot;: &quot;</span>, errno, <span class="hljs-string">&quot;: &quot;</span>, sqlstate, <span class="hljs-string">&quot;.&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>end<br><br>ngx.say(res.affected_rows, <span class="hljs-string">&quot; rows inserted into table cats &quot;</span>, <span class="hljs-string">&quot;(last insert id: &quot;</span>, res.insert_id, <span class="hljs-string">&quot;)&quot;</span>)<br><br>res, <span class="hljs-keyword">err</span>, errno, sqlstate = <span class="hljs-keyword">db</span>:<span class="hljs-keyword">query</span>(<span class="hljs-string">&quot;select * from cats order by id asc&quot;</span>, 10)<br><span class="hljs-keyword">if</span> not res then<br>        ngx.say(<span class="hljs-string">&quot;bad result &quot;</span>, <span class="hljs-keyword">err</span>, <span class="hljs-string">&quot;: &quot;</span>, errno, <span class="hljs-string">&quot;: &quot;</span>, sqlstate, <span class="hljs-string">&quot;.&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>end<br><br><span class="hljs-keyword">local</span> cjson = require <span class="hljs-string">&quot;cjson&quot;</span><br>ngx.say(<span class="hljs-string">&quot;result: &quot;</span>, cjson.<span class="hljs-keyword">encode</span>(res))<br><br><span class="hljs-keyword">local</span> ok, <span class="hljs-keyword">err</span> = <span class="hljs-keyword">db</span>:set_keepalive(1000, 100)<br><span class="hljs-keyword">if</span> not ok then<br>        ngx.say(<span class="hljs-string">&quot;failed to set keepalive: &quot;</span>, <span class="hljs-keyword">err</span>)<br>        <span class="hljs-keyword">return</span><br>end<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@localhost lua]# curl localhost/mysql_test<br>connected <span class="hljs-keyword">to</span> mysql.<br><span class="hljs-keyword">table</span> cats created.<br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> inserted <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> cats (last <span class="hljs-keyword">insert</span> id: <span class="hljs-number">1</span>)<br>result: [&#123;&quot;name&quot;:&quot;Bob&quot;,&quot;id&quot;:<span class="hljs-number">1</span>&#125;,&#123;&quot;name&quot;:&quot;&quot;,&quot;id&quot;:<span class="hljs-number">2</span>&#125;,&#123;&quot;name&quot;:<span class="hljs-keyword">null</span>,&quot;id&quot;:<span class="hljs-number">3</span>&#125;]<br><br></code></pre></td></tr></table></figure><p>测试通过。</p><h1 id="lua-的-capture-和-capture-multi-子查询"><a href="#lua-的-capture-和-capture-multi-子查询" class="headerlink" title="lua 的 capture 和 capture_multi(子查询)"></a>lua 的 capture 和 capture_multi(子查询)</h1><p>capture_multi 是 openresty 一个十分强大的功能。它能极大的减少前端浏览器发送的http请求的数量，突破了浏览器对于同一个服务器并发请求数量的限制，因为他可以将前端的多个http请求减少为只要一个http请求到nginx，然后nginx使用capture_multi特性，对后端发起多个异步并发请求，然后统一将结果返回给前端。下面看一个例子：</p><p>首先在nginx.conf中加入下面的 location 配置，并且配置好 nginx 访问 php 的配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> /capture &#123;<br>    <span class="hljs-attribute">content_by_lua_file</span> lua/capture.lua;<br>    <span class="hljs-comment">#access_by_lua_file lua/capture.lua;</span><br>&#125;<br><br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;<br>    <span class="hljs-attribute">root</span>           html;<br>    <span class="hljs-attribute">fastcgi_pass</span>   <span class="hljs-number">127.0.0.1:9000</span>;<br>    <span class="hljs-attribute">fastcgi_index</span>  index.php;<br>    <span class="hljs-attribute">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;<br>    <span class="hljs-attribute">include</span>        fastcgi_params;<br>&#125;<br></code></pre></td></tr></table></figure><p>capture.lua 的代码如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@localhost <span class="hljs-keyword">lua</span>]# <span class="hljs-keyword">pwd</span><br>/<span class="hljs-keyword">opt</span>/openresty/nginx/<span class="hljs-keyword">lua</span><br>[root@localhost <span class="hljs-keyword">lua</span>]# <span class="hljs-keyword">cat</span> capture.<span class="hljs-keyword">lua</span><br>local res1,res2,res3,res4 = ngx.location.capture_multi&#123;<br>        &#123;<span class="hljs-string">&quot;/mysql_test&quot;</span>, &#123;<span class="hljs-keyword">args</span>=<span class="hljs-string">&quot;t=1&amp;id=1&quot;</span>&#125;&#125;,<br>        &#123;<span class="hljs-string">&quot;/redis_test&quot;</span>, &#123;<span class="hljs-keyword">args</span>=<span class="hljs-string">&quot;t=2&amp;id=2&quot;</span>&#125;&#125;,<br>        &#123;<span class="hljs-string">&quot;/lua&quot;</span>, &#123;<span class="hljs-keyword">args</span>=<span class="hljs-string">&quot;t=3&amp;id=3&quot;</span>&#125;&#125;,<br>        &#123;<span class="hljs-string">&quot;/index.php&quot;</span>, &#123;<span class="hljs-keyword">args</span>=<span class="hljs-string">&quot;t=3&amp;id=3&quot;</span>&#125;&#125;,<br>&#125;<br><br>ngx.header.content_type=<span class="hljs-string">&quot;text/plain&quot;</span><br>ngx.say(res1.body)<br>ngx.say(res2.body)<br>ngx.say(res3.body)<br>ngx.say(res4.truncated)<br>ngx.say(res4.status)<br>ngx.say(res4.header[<span class="hljs-string">&quot;Set-Cookie&quot;</span>])<br><br>--ngx.say(res4.body)<br></code></pre></td></tr></table></figure><p>index.php 代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">[root@localhost html]<span class="hljs-comment"># pwd</span><br>/opt/openresty/nginx/html<br>[root@localhost html]<span class="hljs-comment"># cat index.php</span><br><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-keyword">echo</span> phpinfo();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>访问：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@localhost html]<span class="hljs-comment"># curl localhost/capture</span><br>connected <span class="hljs-keyword">to</span> mysql.<br>table cats created.<br><span class="hljs-number">3</span> rows inserted <span class="hljs-keyword">into</span> table cats (<span class="hljs-keyword">last</span> insert <span class="hljs-built_in">id</span>: <span class="hljs-number">1</span>)<br><span class="hljs-literal">result</span>: [&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-string">&quot;name&quot;</span>:null,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">3</span>&#125;]<br><br><span class="hljs-keyword">set</span> <span class="hljs-literal">result</span>: <span class="hljs-number">1</span><br>dog: an animal<br><br>hello ngx_lua!!!!<br><br><span class="hljs-literal">false</span><br><span class="hljs-number">200</span><br>nil<br></code></pre></td></tr></table></figure><p>可以看到访问成功了。/mysql_test，/redis_test, /lua, /index.php 四个请求的结果都输出了。</p><blockquote><p>注意： ngx.location.capture_multi{… …} 中的多个异步并发请求可以是 nginx.conf 中配置的 location(比如 /mysql_test, /redis_test, /lua)，也可以不是 location配置的路径，比如 index.php 就不是。index.php 就是一个简单的后台php 脚本。当然也可以是一个 java 实现的后台接口。</p></blockquote><h1 id="openresty的缓存-lua-shared-dict"><a href="#openresty的缓存-lua-shared-dict" class="headerlink" title="openresty的缓存 lua_shared_dict"></a>openresty的缓存 lua_shared_dict</h1><p>定义一个缓存：</p><p>在nginx的配置文件 nginx.conf 的 http 端下面加入指令：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">lua_shared_dict ngx_cache <span class="hljs-number">128</span>m<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>就定义了一个 名称为 ngx_cache 大小为128m的内存用于缓存，注意该缓存是所有nginx work process所共享的。</p><p>在lua脚本中访问缓存：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">local</span> ngx_cache = ngx.shared.ngx_cache<br><span class="hljs-built_in">local</span> value = ngx_cache:<span class="hljs-built_in">get</span>(<span class="hljs-built_in">key</span>)<br><br><span class="hljs-built_in">local</span> succ, err, forcible = ngx_cache:set(<span class="hljs-built_in">key</span>, value, exptime)<br></code></pre></td></tr></table></figure><p>下面测试一下，首先在 nginx.conf的server端中加入：</p><div class="code-wrapper"><pre><code class="hljs">location /cache &#123;    content_by_lua_file lua/cache.lua;&#125;</code></pre></div><p>然后编写 cache.lua 脚本：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@localhost lua]# cat cache.lua<br><span class="hljs-keyword">local</span> redis = require &quot;resty.redis&quot;<br><span class="hljs-keyword">local</span> red = redis:<span class="hljs-built_in">new</span>()<br><br><span class="hljs-keyword">function</span> set_to_cache(key, <span class="hljs-keyword">value</span>, exptime)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exptime <span class="hljs-keyword">then</span><br>                exptime = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">local</span> ngx_cache = ngx.shared.ngx_cache<br>        <span class="hljs-keyword">local</span> succ, err, forcible = ngx_cache:<span class="hljs-keyword">set</span>(key, <span class="hljs-keyword">value</span>, exptime)<br>        <span class="hljs-keyword">return</span> succ<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">function</span> get_from_cache(key)<br>        <span class="hljs-keyword">local</span> ngx_cache = ngx.shared.ngx_cache;<br>        <span class="hljs-keyword">local</span> <span class="hljs-keyword">value</span> = ngx_cache:<span class="hljs-keyword">get</span>(key)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">then</span><br>                <span class="hljs-keyword">value</span> = get_from_redis(key)<br>                set_to_cache(key, <span class="hljs-keyword">value</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span><br>        <span class="hljs-keyword">end</span><br><br>        ngx.say(&quot;get from cache.&quot;)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">function</span> get_from_redis(key)<br>        red:set_timeout(<span class="hljs-number">1000</span>)<br><br>        <span class="hljs-keyword">local</span> ok, err = red:<span class="hljs-keyword">connect</span>(&quot;127.0.0.1&quot;, <span class="hljs-number">6379</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>                ngx.say(&quot;failed to connect: &quot;, err)<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">end</span><br><br>        <span class="hljs-keyword">local</span> res, err = red:<span class="hljs-keyword">get</span>(key)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> res <span class="hljs-keyword">then</span><br>                ngx.say(&quot;failed to get doy: &quot;, err)<br>                <span class="hljs-keyword">return</span> ngx.<span class="hljs-keyword">null</span><br>        <span class="hljs-keyword">end</span><br><br>        ngx.say(&quot;get from redis.&quot;)<br>        <span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">function</span> set_to_redis(key, <span class="hljs-keyword">value</span>)<br>        red:set_timeout(<span class="hljs-number">1000</span>)<br>        <span class="hljs-keyword">local</span> ok, err = red:<span class="hljs-keyword">connect</span>(&quot;127.0.0.1&quot;, <span class="hljs-number">6379</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>                ngx.say(&quot;failed to connect: &quot;, err)<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">end</span><br><br>        <span class="hljs-keyword">local</span> ok, err = red:<span class="hljs-keyword">set</span>(key, <span class="hljs-keyword">value</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>                ngx.say(&quot;failed to set to redis: &quot;, err)<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">return</span> ok<br><span class="hljs-keyword">end</span><br><br>set_to_redis(<span class="hljs-string">&#x27;dog&#x27;</span>, &quot;Bob&quot;)<br><span class="hljs-keyword">local</span> rs = get_from_cache(<span class="hljs-string">&#x27;dog&#x27;</span>)<br>ngx.say(rs)<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@localhost ~</span>]<span class="hljs-meta"># curl localhost/cache</span><br><span class="hljs-keyword">get</span> <span class="hljs-keyword">from</span> redis.<br>Bob<br>[<span class="hljs-meta">root@localhost ~</span>]<span class="hljs-meta"># curl localhost/cache</span><br><span class="hljs-keyword">get</span> <span class="hljs-keyword">from</span> cache.<br>Bob<br>[<span class="hljs-meta">root@localhost ~</span>]<span class="hljs-meta"># curl localhost/cache</span><br><span class="hljs-keyword">get</span> <span class="hljs-keyword">from</span> cache.<br>Bob<br></code></pre></td></tr></table></figure><p>第一次从 redis中获取，以后每次都从cache中获取。</p><p>可以使用 ab 测试一下rps(Requests per second):</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ab</span> -n <span class="hljs-number">1000</span> -c <span class="hljs-number">100</span> -k http://<span class="hljs-number">127.0.0.1</span>/cache<br></code></pre></td></tr></table></figure><h1 id="解决缓存失效风暴-lua-resty-lock"><a href="#解决缓存失效风暴-lua-resty-lock" class="headerlink" title="解决缓存失效风暴 lua-resty-lock"></a>解决缓存失效风暴 lua-resty-lock</h1><p>缓存失效风暴是指缓存因为时间过期而失效时，会导致所有的请求都去访问 后台的redis或者mysql，而导致CPU性能即刻增长的现象。所以关键是当缓存失效时，用lock保证只有一个线程去访问后台的redis或者mysql，然后更新缓存。需要使用到 lua-resty-lock 模块的加锁、解锁功能。</p><p>lua-resty-lock 文档：<a href="https://github.com/openresty/lua-resty-lock">https://github.com/openresty/lua-resty-lock</a></p><p>首先在nginx.conf 的 http 端下面加入指令：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">lua_shared_dict</span> ngx_cache <span class="hljs-number">128m</span>;     <span class="hljs-comment"># cache</span><br><span class="hljs-attribute">lua_shared_dict</span> cache_lock <span class="hljs-number">100k</span>;    <span class="hljs-comment"># lock for cache</span><br></code></pre></td></tr></table></figure><p>然后在nginx.conf的server端中加入：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/cache_lock</span> &#123;<br>    content_by_lua_file lua/cache_lock.lua;<br>&#125;<br></code></pre></td></tr></table></figure><p>cache_lock.lua代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@localhost lua]# cat cache_lock.lua<br><span class="hljs-keyword">local</span> redis = require &quot;resty.redis&quot;<br><span class="hljs-keyword">local</span> red = redis:<span class="hljs-built_in">new</span>()<br><span class="hljs-keyword">local</span> resty_lock = require &quot;resty.lock&quot;<br><span class="hljs-keyword">local</span> ngx_cache = ngx.shared.ngx_cache<br><br><span class="hljs-keyword">function</span> set_to_cache(key, <span class="hljs-keyword">value</span>, exptime)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exptime <span class="hljs-keyword">then</span><br>                exptime = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">local</span> succ, err, forcible = ngx_cache:<span class="hljs-keyword">set</span>(key, <span class="hljs-keyword">value</span>, exptime)<br>        <span class="hljs-keyword">return</span> succ<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">function</span> get_from_cache(key)<br>        <span class="hljs-keyword">local</span> ngx_cache = ngx.shared.ngx_cache;<br>        <span class="hljs-keyword">local</span> <span class="hljs-keyword">value</span> = ngx_cache:<span class="hljs-keyword">get</span>(key)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">then</span>       <span class="hljs-comment">-- cache miss</span><br>                <span class="hljs-keyword">local</span> <span class="hljs-keyword">lock</span> = resty_lock:<span class="hljs-built_in">new</span>(&quot;cache_lock&quot;)<br>                <span class="hljs-keyword">local</span> elapsed, err = <span class="hljs-keyword">lock</span>:<span class="hljs-keyword">lock</span>(key)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> elapsed <span class="hljs-keyword">then</span><br>                        <span class="hljs-keyword">return</span> fail(&quot;failed to acquire the lock: &quot;, err)<br>                <span class="hljs-keyword">end</span><br><br>                <span class="hljs-keyword">value</span> = get_from_redis(key)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">then</span><br>                        <span class="hljs-keyword">local</span> ok, err = <span class="hljs-keyword">lock</span>:unlock()<br>                        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>                                <span class="hljs-keyword">return</span> fail(&quot;failed to unlock: &quot;, err)<br>                        <span class="hljs-keyword">end</span><br>                        ngx.say(&quot;no value found&quot;)<br>                        <span class="hljs-keyword">return</span><br>                <span class="hljs-keyword">end</span><br><br>                <span class="hljs-keyword">local</span> ok, err = ngx_cache:<span class="hljs-keyword">set</span>(key, <span class="hljs-keyword">value</span>, <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>                        <span class="hljs-keyword">local</span> ok, err = <span class="hljs-keyword">lock</span>:unlock()<br>                        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>                                <span class="hljs-keyword">return</span> fail(&quot;failed to unlock: &quot;, err)<br>                        <span class="hljs-keyword">end</span><br>                        <span class="hljs-keyword">return</span> faile(&quot;failed to update ngx_cache: &quot;, err)<br>                <span class="hljs-keyword">end</span><br><br>                <span class="hljs-keyword">local</span> ok, err = <span class="hljs-keyword">lock</span>:unlock()<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>                        <span class="hljs-keyword">return</span> faile(&quot;failed to unlock: &quot;, err)<br>                <span class="hljs-keyword">end</span><br><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span><br>        <span class="hljs-keyword">end</span><br><br>        ngx.say(&quot;get from cache.&quot;)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">function</span> get_from_redis(key)<br>        red:set_timeout(<span class="hljs-number">1000</span>)<br><br>        <span class="hljs-keyword">local</span> ok, err = red:<span class="hljs-keyword">connect</span>(&quot;127.0.0.1&quot;, <span class="hljs-number">6379</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>                ngx.say(&quot;failed to connect: &quot;, err)<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">end</span><br><br>        <span class="hljs-keyword">local</span> res, err = red:<span class="hljs-keyword">get</span>(key)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> res <span class="hljs-keyword">then</span><br>                ngx.say(&quot;failed to get doy: &quot;, err)<br>                <span class="hljs-keyword">return</span> ngx.<span class="hljs-keyword">null</span><br>        <span class="hljs-keyword">end</span><br><br>        ngx.say(&quot;get from redis.&quot;)<br>        <span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">function</span> set_to_redis(key, <span class="hljs-keyword">value</span>)<br>        red:set_timeout(<span class="hljs-number">1000</span>)<br>        <span class="hljs-keyword">local</span> ok, err = red:<span class="hljs-keyword">connect</span>(&quot;127.0.0.1&quot;, <span class="hljs-number">6379</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>                ngx.say(&quot;failed to connect: &quot;, err)<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">end</span><br><br>        <span class="hljs-keyword">local</span> ok, err = red:<span class="hljs-keyword">set</span>(key, <span class="hljs-keyword">value</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>                ngx.say(&quot;failed to set to redis: &quot;, err)<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">return</span> ok<br><span class="hljs-keyword">end</span><br><br>set_to_redis(<span class="hljs-string">&#x27;dog&#x27;</span>, &quot;Bob&quot;)<br><span class="hljs-keyword">local</span> rs = get_from_cache(<span class="hljs-string">&#x27;dog&#x27;</span>)<br>ngx.say(rs)<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@localhost lua</span>]<span class="hljs-meta"># curl localhost/cache_lock</span><br><span class="hljs-keyword">get</span> <span class="hljs-keyword">from</span> cache.<br>Bob<br>[<span class="hljs-meta">root@localhost lua</span>]<span class="hljs-meta"># curl localhost/cache_lock</span><br><span class="hljs-keyword">get</span> <span class="hljs-keyword">from</span> cache.<br>Bob<br></code></pre></td></tr></table></figure><h1 id="openresty-执行阶段"><a href="#openresty-执行阶段" class="headerlink" title="openresty 执行阶段"></a>openresty 执行阶段</h1><p>nginx的执行阶段分成了很多个阶段,所以第三方模块就可以在某个适当的阶段加入一些处理。openresty进行了简化成了7个阶段：</p><p>7个阶段的执行顺序如下：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">set<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>lua: 流程分支判断，判断变量初始哈<br><br>rewrite<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>lua: 用lua脚本实现nginx rewrite<br><br>access<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>lua: ip准入，是否能合法性访问，防火墙<br><br>content<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>lua: 内存生成<br><br>header<span class="hljs-number">_f</span>ilter<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>lua：过滤http头信息，增加头信息<br><br>body<span class="hljs-number">_f</span>ilter<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>lua: 内容大小写，内容加密<br><br>log<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>lua: 本地/远程记录日志<br></code></pre></td></tr></table></figure><p>但是其实我们可以只用 content_by_lua，所有功能都在该阶段完成，也是可以的。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/digdeep/p/4859575.html">https://www.cnblogs.com/digdeep/p/4859575.html</a></p>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>nginx</tag>
      
      <tag>lua</tag>
      
      <tag>openresty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>systemd配置文件及管理方法</title>
    <link href="/2022/04/01/04DevOps/16systemd%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%8A%E7%AE%A1%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <url>/2022/04/01/04DevOps/16systemd%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%8A%E7%AE%A1%E7%90%86%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="systemd-配置路径"><a href="#systemd-配置路径" class="headerlink" title="systemd 配置路径"></a>systemd 配置路径</h1><p>systemd 配置文件存在于以下三个文件夹中：          </p><ul><li>/etc/systemd/system  存放系统启动的默认级别及启动的unit的软连接，优先级最高。</li><li>/run/systemd/system 系统执行过程中产生的服务脚本，优先级次之。</li><li>/usr/lib/systemd/system 存放系统上所有的启动文件。优先级最低</li></ul><h1 id="systemd文件分类"><a href="#systemd文件分类" class="headerlink" title=" systemd文件分类"></a><span id="unit"> systemd文件分类</span></h1><p>systemd的定义文件可以根据其后缀名称识别其定义的类型，可以使用systemctl -t help 查看。</p><table><thead><tr><th>文件后缀名</th><th align="center">说明</th></tr></thead><tbody><tr><td>.service</td><td align="center">定义了系统服务的启动</td></tr><tr><td>.target</td><td align="center">定义了系统启动的级别标签，systemd 没有运行级别的概念，创建标签只是为了兼容老版本。</td></tr><tr><td>.socket</td><td align="center">定义了进程通信用到的套接字，套接字与进程是分离的</td></tr><tr><td>.device</td><td align="center">定义了系统启动时内核识别的文件，systemd提供了设备的管理功能，/dev 下的设备由/etc/udev/下的配置文件与.device共同定制</td></tr><tr><td>.mount</td><td align="center">定义了系统的文件系统的挂载点</td></tr><tr><td>.snapshop</td><td align="center">系统快照</td></tr><tr><td>.swap</td><td align="center">用于标识swap设备</td></tr><tr><td>.automount</td><td align="center">文件系统的自动挂载点</td></tr><tr><td>.path</td><td align="center">用于定义文件系统中的一个文件或目录使用。常用于文件系统发生变化时，延迟激活服务。</td></tr><tr><td>.busname</td><td align="center"></td></tr><tr><td>.snapshot</td><td align="center"></td></tr><tr><td>.timer</td><td align="center"></td></tr><tr><td>.slice</td><td align="center"></td></tr><tr><td>.scope</td><td align="center"></td></tr></tbody></table><h1 id="systemd-文件内容格式"><a href="#systemd-文件内容格式" class="headerlink" title="systemd 文件内容格式"></a>systemd 文件内容格式</h1><p>通常由3段组成：分别是unit段，类型段，install段</p><figure class="highlight csharp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># Unit段</span><br>[<span class="hljs-meta">Unit</span>]<br>xxx=<br><br><span class="hljs-meta"># 类型段</span><br>[<span class="hljs-meta">类型</span>] 如Service、Path等，和unit分类中的后缀名对应<br><br><span class="hljs-meta"># Install 段</span><br>[<span class="hljs-meta">Install</span>]<br></code></pre></td></tr></table></figure><h2 id="Unit-段"><a href="#Unit-段" class="headerlink" title="Unit 段"></a>Unit 段</h2><p>[Unit] :不属于第二个标签的定义都放在这里，或存放不属于unit类型的定义，描述信息，依赖的unit</p><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>Description</td><td>描述信息</td></tr><tr><td>After</td><td>表明需要依赖的服务，作用决定启动顺序</td></tr><tr><td>Before</td><td>表明被依赖的服务</td></tr><tr><td>Requles</td><td>依赖到的其他unit ，强依赖，即依赖的unit启动失败。该unit不启动。</td></tr><tr><td>Wants</td><td>依赖到的其他unit，弱依赖，即依赖的unit 启动失败。该unit继续启动</td></tr><tr><td>Conflicts</td><td>定义冲突关系</td></tr></tbody></table><h2 id="类型-段："><a href="#类型-段：" class="headerlink" title="[类型] 段："></a>[类型] 段：</h2><p>类型段根据<a href="#unit">systemd文件分类</a>中定义的服务类型来确定具体的关键字，如.service文件则此段为[Service], .timer文件此段为[Timer] 等</p><h3 id="Service段-关键字说明如下"><a href="#Service段-关键字说明如下" class="headerlink" title="Service段 关键字说明如下"></a>Service段 关键字说明如下</h3><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>Type</td><td>启动时关系的定义</td></tr><tr><td>RemainAfterExit</td><td>可设为”yes”或”no”(默认值)，表示当该服务的所有进程全部退出之后，是否依然将此服务视为活动(active)状态</td></tr><tr><td>PIDFile</td><td>守护进程的PID文件，必须是绝对路径。强烈建议在 Type=forking 的情况下明确设置此选项。 systemd 将会在此服务启动后从此文件中读取主守护进程的PID 。systemd 不会写入此文件，但会在此服务停止后删除它(若存在)。</td></tr><tr><td>GuessMainPID</td><td>可设为”yes”(默认值)或”no”，表示在无法明确定位该服务的主进程的情况下，systemd 是否应该猜测主进程的PID(可能不正确)。 该选项仅在设置了 Type=forking 但未设置 PIDFile= 的情况下有意义。如果PID猜测错误，那么该服务的失败检测与自动重启功能将失效。</td></tr><tr><td>EnvironmentFile</td><td>需要使用到的变量的定义文件</td></tr><tr><td>ExecStart</td><td>在启动该服务时需要执行的命令行(命令+参数)。有关命令行的更多细节可参见后文的”命令行”小节。 仅在设置了 Type=oneshot 的情况下，才可以设置任意个命令行(包括零个)，否则必须且只能设置一个命令行。 多个命令行既可以在同一个 ExecStart= 中设置，也可以通过设置多个 ExecStart= 来达到相同的效果。 如果设为一个空字符串，那么先前设置的所有命令行都将被清空。 如果不设置任何 ExecStart= 指令，那么必须确保设置了 RemainAfterExit=yes 指令。 命令行必须以一个绝对路径表示的可执行文件开始，并且其后的那些参数将依次作为”argv[1] argv[2] …”传递给被执行的进程。 如果在绝对路径前加上可选的”@”前缀，那么其后的那些参数将依次作为”argv[0] argv[1] argv[2] …”传递给被执行的进程。 如果在绝对路径前加上可选的”-“前缀，那么即使该进程以失败状态(例如非零的返回值或者出现异常)退出，也会被视为成功退出。 可以同时使用”-“与”@”前缀，且顺序任意。 如果设置了多个命令行，那么这些命令行将以其在单元文件中出现的顺序依次执行。 如果某个无”-“前缀的命令行执行失败，那么剩余的命令行将不会被执行，同时该单元将变为失败(failed)状态。 当未设置 Type=forking 时，这里设置的命令行所启动的进程将被视为该服务的主守护进程。</td></tr><tr><td>ExecReload</td><td>这是一个可选的指令，用于设置当该服务被要求重新载入配置时所执行的命令行。语法规则与 ExecStart= 完全相同。 另外，还有一个特殊的环境变量 $MAINPID 可以用于表示主进程的PID，例如可以这样使用： /bin/kill -HUP $MAINPID 注意，像上例那样，通过向守护进程发送复位信号，强制其重新加载配置文件，并不是一个好习惯。 因为这是一个异步操作，所以不适用于需要按照特定顺序重新加载配置文件的服务。 我们强烈建议将 ExecReload= 设置为一个能够确保重新加载配置文件的操作同步完成的命令行。</td></tr><tr><td>ExecStop</td><td>这是一个可选的指令，用于设置当该服务被要求停止时所执行的命令行。语法规则与 ExecStart= 完全相同。 执行完此处设置的命令行之后，该服务所有剩余的进程将会根据 KillMode= 的设置被杀死(参见 systemd.kill(5) 手册)。 如果未设置此选项，那么当此服务被停止时，该服务的所有进程都将会根据 KillMode= 的设置被立即全部杀死。 与 ExecReload= 一样，也有一个特殊的环境变量 $MAINPID 可以用于表示主进程的PID 一般来说，仅仅设置一个结束服务的命令，而不等待其完成，是不够的。 因为当此处设置的命令执行完之后，剩余的进程会被 SIGKILL 信号立即杀死，这可能会导致数据丢失。 因此，这里设置的命令必须是同步操作，而不能是异步操作。</td></tr><tr><td>ExecStopPost</td><td>这是一个可选的指令，用于设置该服务停止之后所执行的命令行。语法规则与 ExecStart= 完全相同。 无论此服务是正常停止，还是异常退出，此处的设置都适用。 RestartSec= 设定在重启服务(Restart=)前暂停多长时间。默认值是100毫秒(100ms)。 如果未指定时间单位，那么将视为以秒为单位。例如设为”20”等价于设为”20s”。</td></tr><tr><td>ExecStartPre、ExecStartPost</td><td>设置在执行 ExecStart= 之前/后执行的命令行。语法规则与 ExecStart= 完全相同。 如果设置了多个命令行，那么这些命令行将以其在单元文件中出现的顺序依次执行。 如果某个无”-“前缀的命令行执行失败，那么剩余的命令行将不会被执行，同时该单元将变为失败(failed)状态。 仅在所有无”-“前缀的 ExecStartPre= 命令全部执行成功的前提下，才会继续执行 ExecStart= 命令。 ExecStartPost= 命令仅在服务已经被成功启动之后才会运行，判断的标准基于 Type= 选项。 具体说来，对于 Type=simple 或 Type=idle 就是主进程已经成功启动；对于 Type=oneshot 来说就是主进程已经成功退出； 对于 Type=forking 来说就是初始进程已经成功退出；对于 Type=notify 来说就是已经发送了”READY=1”； 对于 Type=dbus 来说就是已经取得了 BusName= 中设置的总线名称。 注意，不可将 ExecStartPre= 用于需要长时间执行的进程。 因为所有由 ExecStartPre= 派生的子进程都会在启动 ExecStart= 服务进程之前被杀死。</td></tr><tr><td>TimeoutStartSec</td><td>设定该服务允许的最大启动时长。如果守护进程未能在限定的时长内发出”启动完毕”的信号，那么该服务将被视为启动失败，并会被关闭。 如果未指定时间单位，那么将视为以秒为单位。例如设为”20”等价于设为”20s”。设为”0”则表示永不超时。 当 Type=oneshot 时，默认值为”0”，否则默认值等于 DefaultTimeoutStartSec= 的值(参见 systemd-system.conf(5) 手册)。</td></tr><tr><td>TimeoutStopSec</td><td>设定该服务允许的最大停止时长。如果该服务未能在限定的时长内成功停止，那么将会被强制使用 SIGTERM 信号关闭， 如果依然未能在相同的时长内成功停止，那么将会被强制使用 SIGKILL 信号关闭(参见 systemd.kill(5) 手册中的 KillMode= 选项)。 如果未指定时间单位，那么将视为以秒为单位。例如设为”20”等价于设为”20s”。设为”0”则表示永不超时。 默认值等于 DefaultTimeoutStartSec= 的值(参见 systemd-system.conf(5) 手册)。</td></tr><tr><td>TimeoutSec</td><td>一个同时设置 TimeoutStartSec= 与 TimeoutStopSec= 的快捷方式。</td></tr><tr><td>Restart</td><td>当服务进程正常退出、异常退出、被杀死、超时的时候，是否重新启动该服务。 “服务进程”是指 ExecStart=, ExecStartPre=, ExecStartPost=, ExecStop=, ExecStopPost=, ExecReload= 中设置的进程。 当进程是由于 systemd 的正常操作(例如 systemctl stop restart)而被停止时，该服务不会被重新启动。 “超时”可以是看门狗的”keep-alive ping”超时，也可以是 systemct  start /reload/stop 操作超时。<br>该选项可以取下列值之一：no, on-success, on-failure, on-abnormal, on-watchdog, on-abort, always “no”(默认值)表示不会被重启。”always”表示会被无条件的重启。 “on-success”表示仅在服务进程正常退出时重启，所谓”正常退出”是指： 退出码为”0”，或者进程收到 SIGHUP, SIGINT, SIGTERM, SIGPIPE 信号并且退出码符合 SuccessExitStatus= 的设置。 “on-failure”表示仅在服务进程异常退出时重启，所谓”异常退出”是指： 退出码不为”0”，或者进程被强制杀死(包括”core dump”以及收到 SIGHUP, SIGINT, SIGTERM, SIGPIPE 之外的其他信号)， 或者进程由于看门狗或者 systemd 的操作超时而被杀死。 对于 on-failure, on-abnormal, on-abort, on-watchdog 的分别适用于哪种异常退出，见下表：<br>注意如下两个例外情况： (1) RestartPreventExitStatus= 中列出的退出码或者信号永远不会导致该服务被重启。 (2) RestartForceExitStatus= 中列出的退出码或者信号将会无条件的导致该服务被重启。 对于需要长期持续运行的守护进程，推荐设为”on-failure”以增强可用性。 对于自身可以自主选择何时退出的服务，推荐设为”on-abnormal”。</td></tr><tr><td>RestartSec</td><td></td></tr><tr><td>BusName</td><td>设置与此服务通信所使用的 D-Bus 名称。在 Type=dbus 的情况下必须明确设置此选项。</td></tr><tr><td>BusPolicy</td><td>如果设置了此项，那么 systemd 将会创建一个自定义的kdbus端点(endpoint)，并将其安装为该服务默认的总线节点(bus node)。 这个自定义的端点可以拥有它自己的策略规则。端点的名称就是其所服务的单元的名称。 端点的节点(node)将被绑定挂载到默认的总线节点的位置，这样该服务就只能通过它自己的端点访问总线。 注意，自定义端点的默认策略是’拒绝所有’，因此，你必须在 BusPolicy= 中明确的添加必要的允许策略。 这个选项的值由两部分组成：总线名+访问级别，中间以空格分隔。 访问级别必须是 see, talk, own 之一，并且 talk 隐含了 see ，而 own 隐含了 talk 与 see 。 如果对同一个总线名称多次指定了访问级别，那么将以拥有最大权限的那个为准。 例如： BusPolicy=org.freedesktop.systemd1 talk BusPolicy=org.foo.bar see 该选项仅在内核开启了kdbus(即将并入官方内核)支持的情况下有意义。</td></tr></tbody></table><p>Restart设置及对应的退出原因</p><table><thead><tr><th>Restart</th><th>no</th><th>always</th><th>on-success</th><th>on-failure</th><th>on-abnormal</th><th>on-abort</th><th>on-watchdog</th></tr></thead><tbody><tr><td>正常退出</td><td></td><td>×</td><td>×</td><td></td><td></td><td></td><td></td></tr><tr><td>退出码不为0</td><td></td><td>×</td><td></td><td>×</td><td></td><td></td><td></td></tr><tr><td>进程被强制杀死</td><td></td><td>×</td><td></td><td>×</td><td>×</td><td>×</td><td></td></tr><tr><td>systemd操作超时</td><td></td><td>×</td><td></td><td>×</td><td>×</td><td></td><td></td></tr><tr><td>看门狗超时</td><td></td><td>×</td><td></td><td>×</td><td>×</td><td></td><td>×</td></tr></tbody></table><h4 id="Type-关键字说明"><a href="#Type-关键字说明" class="headerlink" title="Type 关键字说明"></a>Type 关键字说明</h4><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>simple</td><td>表示 ExecStart= 所设定的进程就是该服务的主进程。 如果此进程需要为其他进程提供服务，那么必须在该进程启动之前先建立好通信渠道(例如套接字)，以加快后继单元的启动速度</td></tr><tr><td>forking</td><td>如果设为”forking”，那么表示 ExecStart= 所设定的进程将会在启动过程中使用 fork() 系统调用。这是传统UNIX守护进程的经典做法。 也就是当所有的通信渠道都已建好、启动亦已成功之后，父进程将会退出，而子进程将作为该服务的主进程继续运行。 对于此种进程，建议同时设置 PIDFile= 选项，以帮助 systemd 准确定位该服务的主进程，进而加快后继单元的启动速度。</td></tr><tr><td>ontshot</td><td>“oneshot”(未设置 ExecStart= 时的默认值)与”simple”类似，不同之处在于该进程必须在 systemd 启动后继单元之前退出。 此种类型通常需要设置 RemainAfterExit= 选项</td></tr><tr><td>dbus</td><td>“dbus”(设置了 ExecStart= 与 BusName= 时的默认值)与”simple”类似，不同之处在于该进程需要在 D-Bus 上获得一个由 BusName= 指定的名称。 systemd 将会在启动后继单元之前，首先确保该进程已经成功的获取了指定的 D-Bus 名称。设置为此类型相当于隐含的依赖于 dbus.socket 单元</td></tr><tr><td>notify</td><td>“notify”与”simple”类似，不同之处在于该进程将会在启动完成之后通过 sd_notify(3) 之类的接口发送一个通知消息。 systemd 将会在启动后继单元之前，首先确保该进程已经成功的发送了这个消息。 如果设置为此类型，那么 NotifyAccess= 将只能设置为”all”或者”main”(默认)。 注意，目前 Type=notify 尚不能在 PrivateNetwork=yes 的情况下正常工作。</td></tr><tr><td>ldle</td><td>“idle”与”simple”类似，不同之处在于该进程将会被延迟到所有的操作都完成之后再执行。 这样可以避免控制台上的状态信息与 shell 脚本的输出混杂在一起。</td></tr></tbody></table><h3 id="Timer-段关键字说明如下"><a href="#Timer-段关键字说明如下" class="headerlink" title="Timer 段关键字说明如下"></a>Timer 段关键字说明如下</h3><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>aa</td><td>aa</td></tr></tbody></table><h3 id="Mount-段关键字说明如下"><a href="#Mount-段关键字说明如下" class="headerlink" title="Mount 段关键字说明如下"></a>Mount 段关键字说明如下</h3><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>aa</td><td>aa</td></tr></tbody></table><h2 id="Install-段："><a href="#Install-段：" class="headerlink" title="[Install] 段："></a>[Install] 段：</h2><p>服务启动或禁用时的一些选项，有以下配置选项</p><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>Alias</td><td></td></tr><tr><td>RequlredBy</td><td>被那些unit所依赖，</td></tr><tr><td>WanteBy</td><td>被那些unit所依赖</td></tr></tbody></table><blockquote><p>注意：修改了的unit文件 需要重载。systemctl daemon-reload</p></blockquote><h1 id="管理工具systemctl"><a href="#管理工具systemctl" class="headerlink" title="管理工具systemctl"></a>管理工具systemctl</h1><p>centos7 的程序管理基本上都是由工具systemctl完成，systemctl的控制命令是固定不变的。systemd 兼容init文件夹下的启动脚本。</p><p>systemctl的管理服务通过的service的unit文件实现的。</p><p>.service 的配置文件对应的服务提供一下服务命令</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>systemctl start name.service</td><td>启动服务：</td></tr><tr><td>systemctl stop name.service</td><td>停止服务</td></tr><tr><td>systemctl restart name.service</td><td>重启服务</td></tr><tr><td>systemctl status name.service</td><td>查看状态</td></tr><tr><td>ystemctl try-restart name.service</td><td>条件式重启，即服务之前是启动的则进行重启，如果服务没有启动则不进行操作</td></tr><tr><td>systemctl reload-or-restart name.service</td><td>重载或重启，首先进行重载，如果重载不成功则进行重启</td></tr><tr><td>systemctl reload-or-try-restart name.service</td><td>重载或条件式重启:</td></tr><tr><td>systemctl unmask name.service</td><td>设置服务可以被用户设置开机启动状态</td></tr><tr><td>systemctl mask name.service</td><td>禁止服务可以被用户设置开机启动状态</td></tr><tr><td>systemctl is-active name.service</td><td>查看服务的当前激活状态<br>0 服务已经启动 <br> 非0 命令未启动</td></tr><tr><td>systemctl disable 服务名称unit</td><td>设置服务开机不启动</td></tr><tr><td>systemctl is-enabled name.service</td><td>查看服务是否开机自启</td></tr><tr><td>systemctl list-dependencies name.service</td><td>察看服务的依赖关系</td></tr><tr><td>systemctl list-depebdencies</td><td>察看服务的依赖关系</td></tr><tr><td>systemctl daemon-reload</td><td>重载服务：</td></tr><tr><td>systemctl kill 进程名</td><td>杀掉进程：</td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.51cto.com/arm2012/1963238">https://blog.51cto.com/arm2012/1963238</a></li><li><a href="https://man7.org/linux/man-pages/man5/systemd.service.5.html">https://man7.org/linux/man-pages/man5/systemd.service.5.html</a></li><li><a href="https://man7.org/linux/man-pages/man1/systemd.1.html">https://man7.org/linux/man-pages/man1/systemd.1.html</a></li><li><a href="https://blog.csdn.net/yuesichiu/article/details/51485147">https://blog.csdn.net/yuesichiu/article/details/51485147</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yacc与lex</title>
    <link href="/2022/03/16/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E5%BE%85%E5%AE%8C%E5%96%84/yacc%E4%B8%8Elex/"/>
    <url>/2022/03/16/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E5%BE%85%E5%AE%8C%E5%96%84/yacc%E4%B8%8Elex/</url>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://zhuanlan.zhihu.com/p/<span class="hljs-number">143867739</span><br><span class="hljs-attribute">https</span>://blog.csdn.net/fly_yr/article/details/<span class="hljs-number">43019601</span>?utm_medium=distribute.pc_relevant.none-task-blog-<span class="hljs-number">2</span>~default~baidujs_title~default-<span class="hljs-number">4</span>.pc_relevant_paycolumn_v<span class="hljs-number">3</span>&amp;spm=<span class="hljs-number">1001</span>.<span class="hljs-number">2101</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">4242</span>.<span class="hljs-number">3</span>&amp;utm_relevant_index=<span class="hljs-number">7</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>控制coredump</title>
    <link href="/2022/03/11/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E5%BE%85%E5%AE%8C%E5%96%84/13%E6%8E%A7%E5%88%B6coredump/"/>
    <url>/2022/03/11/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E5%BE%85%E5%AE%8C%E5%96%84/13%E6%8E%A7%E5%88%B6coredump/</url>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//m</span>log.club<span class="hljs-regexp">/article/</span><span class="hljs-number">230241</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rpm 常用命令参数</title>
    <link href="/2022/02/11/04DevOps/15rpm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E6%95%B0/"/>
    <url>/2022/02/11/04DevOps/15rpm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<ul><li><p>rpm –qf 的命令全称是 <code>rpm --queryformat</code> ,格式为<code>rpm --queryformat [QUERYFMT]</code> , 其中QUERYFMT是一系列rpm查询标志，可以通过<code>rpm --querytags</code>命令查询有哪些标志可以使用.</p></li><li><p>rpm -qa 的默认格式为<code> rpm -qa --qf &#39;%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;\n&#39;</code> 不带版本信息，可以使用<code>rpm -qa --qf &#39;%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;.%&#123;arch&#125;\n&#39;</code> 输出带版本信息的数据格式</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>定位进程被kill或创建的父进程</title>
    <link href="/2022/01/27/04DevOps/14%E5%AE%9A%E4%BD%8D%E8%BF%9B%E7%A8%8B%E8%A2%ABkill%E6%88%96%E5%88%9B%E5%BB%BA%E7%9A%84%E7%88%B6%E8%BF%9B%E7%A8%8B/"/>
    <url>/2022/01/27/04DevOps/14%E5%AE%9A%E4%BD%8D%E8%BF%9B%E7%A8%8B%E8%A2%ABkill%E6%88%96%E5%88%9B%E5%BB%BA%E7%9A%84%E7%88%B6%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>有时进程会被其他服务或监控脚本莫名其妙的kill，为了找到真正发出kill或pkill信号的进程，我们可以使用linux下的<code>audit</code>工具来捕获发出创建或kill进程的父进程信息。</p><p>审核系统(audit)包含两个主要部分：用户空间的应用程序、实用程序，以及 kernel-side 系统调用处理。Kernel 的组件从用户空间的应用程序接受系统调用，并且通过三个过滤器中的一个过滤器来进行筛选： <em>user</em>、<em>task</em> 或者 <em>exit</em>。一旦系统调用通过其中的一个过滤器，就将通过 <em>exclude</em> 过滤器进行传送，这是基于审核规则的配置，并把它传送给审核的守护程序做进一步的处理。架构图如下:</p><img src="/2022/01/27/04DevOps/14%E5%AE%9A%E4%BD%8D%E8%BF%9B%E7%A8%8B%E8%A2%ABkill%E6%88%96%E5%88%9B%E5%BB%BA%E7%9A%84%E7%88%B6%E8%BF%9B%E7%A8%8B/architecture.png" class=""><p><em>注意：审核所收集的信息量可能影响系统性能， 一般信息收集完毕后需清理规则并停止审核服务</em></p><h1 id="audit-安装部署"><a href="#audit-安装部署" class="headerlink" title="audit 安装部署"></a>audit 安装部署</h1><figure class="highlight vala"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 安装audit</span><br>yum install -y audit<br><span class="hljs-meta"># 启动audit</span><br>service auditd start<br><span class="hljs-meta"># 停止</span><br>service auditd stop<br></code></pre></td></tr></table></figure><h1 id="audit-常用命令"><a href="#audit-常用命令" class="headerlink" title="audit 常用命令"></a>audit 常用命令</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 列出当前设置的规则</span><br>auditctl -l<br><span class="hljs-comment"># 清理已经设置的规则</span><br>auditctl -D<br><span class="hljs-comment"># 添加一条规则，捕获发出kill或pkill命令或创建进程的进程信息, </span><br>auditctl -a <span class="hljs-keyword">exit</span>,always -S kill,execve<br><br></code></pre></td></tr></table></figure><h1 id="audit-日志分析示例"><a href="#audit-日志分析示例" class="headerlink" title="audit 日志分析示例"></a>audit 日志分析示例</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros">**************************<br><span class="hljs-attribute">type</span>=SYSCALL <span class="hljs-attribute">msg</span>=audit(1643192492.720:23218): <span class="hljs-attribute">arch</span>=c000003e <span class="hljs-attribute">syscall</span>=59 <span class="hljs-attribute">success</span>=<span class="hljs-literal">yes</span> <span class="hljs-attribute">exit</span>=0 <span class="hljs-attribute">a0</span>=2347970 <span class="hljs-attribute">a1</span>=2346ce0 <span class="hljs-attribute">a2</span>=23467b0 <span class="hljs-attribute">a3</span>=7ffdda2a3780 <span class="hljs-attribute">items</span>=3 <span class="hljs-attribute">ppid</span>=29639 <span class="hljs-attribute">pid</span>=5554 <span class="hljs-attribute">auid</span>=4294967295 <span class="hljs-attribute">uid</span>=0 <span class="hljs-attribute">gid</span>=0 <span class="hljs-attribute">euid</span>=0 <span class="hljs-attribute">suid</span>=0 <span class="hljs-attribute">fsuid</span>=0 <span class="hljs-attribute">egid</span>=0 <span class="hljs-attribute">sgid</span>=0 <span class="hljs-attribute">fsgid</span>=0 tty=(none) <span class="hljs-attribute">ses</span>=4294967295 <span class="hljs-attribute">comm</span>=<span class="hljs-string">&quot;600_cdn_mmoonni&quot;</span> <span class="hljs-attribute">exe</span>=<span class="hljs-string">&quot;/usr/bin/bash&quot;</span> key=(<span class="hljs-literal">null</span>)<br>****************************<br><span class="hljs-attribute">type</span>=SYSCALL <span class="hljs-attribute">msg</span>=audit(1643192492.751:23269): <span class="hljs-attribute">arch</span>=c000003e <span class="hljs-attribute">syscall</span>=59 <span class="hljs-attribute">success</span>=<span class="hljs-literal">yes</span> <span class="hljs-attribute">exit</span>=0 <span class="hljs-attribute">a0</span>=883430 <span class="hljs-attribute">a1</span>=87be20 <span class="hljs-attribute">a2</span>=883650 <span class="hljs-attribute">a3</span>=7ffd21c2f330 <span class="hljs-attribute">items</span>=2 <span class="hljs-attribute">ppid</span>=5554 <span class="hljs-attribute">pid</span>=5606 <span class="hljs-attribute">auid</span>=4294967295 <span class="hljs-attribute">uid</span>=0 <span class="hljs-attribute">gid</span>=0 <span class="hljs-attribute">euid</span>=0 <span class="hljs-attribute">suid</span>=0 <span class="hljs-attribute">fsuid</span>=0 <span class="hljs-attribute">egid</span>=0 <span class="hljs-attribute">sgid</span>=0 <span class="hljs-attribute">fsgid</span>=0 tty=(none) <span class="hljs-attribute">ses</span>=4294967295 <span class="hljs-attribute">comm</span>=<span class="hljs-string">&quot;pkill&quot;</span> <span class="hljs-attribute">exe</span>=<span class="hljs-string">&quot;/usr/bin/pkill&quot;</span> key=(<span class="hljs-literal">null</span>)<br><span class="hljs-attribute">type</span>=EXECVE <span class="hljs-attribute">msg</span>=audit(1643192492.751:23269): <span class="hljs-attribute">argc</span>=2 <span class="hljs-attribute">a0</span>=<span class="hljs-string">&quot;pkill&quot;</span> <span class="hljs-attribute">a1</span>=<span class="hljs-string">&quot;monit&quot;</span><br>************************<br><span class="hljs-attribute">type</span>=PATH <span class="hljs-attribute">msg</span>=audit(1643192492.752:23274): <span class="hljs-attribute">item</span>=0 <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;/usr/bin/rpm&quot;</span> <span class="hljs-attribute">inode</span>=50391106 <span class="hljs-attribute">dev</span>=08:02 <span class="hljs-attribute">mode</span>=0100755 <span class="hljs-attribute">ouid</span>=0 <span class="hljs-attribute">ogid</span>=0 <span class="hljs-attribute">rdev</span>=00:00 <span class="hljs-attribute">objtype</span>=NORMAL<br><span class="hljs-attribute">type</span>=PATH <span class="hljs-attribute">msg</span>=audit(1643192492.752:23274): <span class="hljs-attribute">item</span>=1 <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;/lib64/ld-linux-x86-64.so.2&quot;</span> <span class="hljs-attribute">inode</span>=20973072 <span class="hljs-attribute">dev</span>=08:02 <span class="hljs-attribute">mode</span>=0100755 <span class="hljs-attribute">ouid</span>=0 <span class="hljs-attribute">ogid</span>=0 <span class="hljs-attribute">rdev</span>=00:00 <span class="hljs-attribute">objtype</span>=NORMAL<br><span class="hljs-attribute">type</span>=SYSCALL <span class="hljs-attribute">msg</span>=audit(1643192492.764:23275): <span class="hljs-attribute">arch</span>=c000003e <span class="hljs-attribute">syscall</span>=62 <span class="hljs-attribute">success</span>=<span class="hljs-literal">yes</span> <span class="hljs-attribute">exit</span>=0 <span class="hljs-attribute">a0</span>=2c27 <span class="hljs-attribute">a1</span>=f <span class="hljs-attribute">a2</span>=7f776e62f7b8 <span class="hljs-attribute">a3</span>=7fffd20c62c0 <span class="hljs-attribute">items</span>=0 <span class="hljs-attribute">ppid</span>=5554 <span class="hljs-attribute">pid</span>=5606 <span class="hljs-attribute">auid</span>=4294967295 <span class="hljs-attribute">uid</span>=0 <span class="hljs-attribute">gid</span>=0 <span class="hljs-attribute">euid</span>=0 <span class="hljs-attribute">suid</span>=0 <span class="hljs-attribute">fsuid</span>=0 <span class="hljs-attribute">egid</span>=0 <span class="hljs-attribute">sgid</span>=0 <span class="hljs-attribute">fsgid</span>=0 tty=(none) <span class="hljs-attribute">ses</span>=4294967295 <span class="hljs-attribute">comm</span>=<span class="hljs-string">&quot;pkill&quot;</span> <span class="hljs-attribute">exe</span>=<span class="hljs-string">&quot;/usr/bin/pkill&quot;</span> key=(<span class="hljs-literal">null</span>)<br><span class="hljs-attribute">type</span>=OBJ_PID <span class="hljs-attribute">msg</span>=audit(1643192492.764:23275): <span class="hljs-attribute">opid</span>=11303 <span class="hljs-attribute">oauid</span>=-1 <span class="hljs-attribute">ouid</span>=0 <span class="hljs-attribute">oses</span>=-1 <span class="hljs-attribute">ocomm</span>=<span class="hljs-string">&quot;monit&quot;</span><br><span class="hljs-attribute">type</span>=SYSCALL <span class="hljs-attribute">msg</span>=audit(1643192492.764:23276): <span class="hljs-attribute">arch</span>=c000003e <span class="hljs-attribute">syscall</span>=62 <span class="hljs-attribute">success</span>=<span class="hljs-literal">yes</span> <span class="hljs-attribute">exit</span>=0 <span class="hljs-attribute">a0</span>=2c7e <span class="hljs-attribute">a1</span>=f <span class="hljs-attribute">a2</span>=7f776e62f7b8 <span class="hljs-attribute">a3</span>=7fffd20c62c0 <span class="hljs-attribute">items</span>=0 <span class="hljs-attribute">ppid</span>=5554 <span class="hljs-attribute">pid</span>=5606 <span class="hljs-attribute">auid</span>=4294967295 <span class="hljs-attribute">uid</span>=0 <span class="hljs-attribute">gid</span>=0 <span class="hljs-attribute">euid</span>=0 <span class="hljs-attribute">suid</span>=0 <span class="hljs-attribute">fsuid</span>=0 <span class="hljs-attribute">egid</span>=0 <span class="hljs-attribute">sgid</span>=0 <span class="hljs-attribute">fsgid</span>=0 tty=(none) <span class="hljs-attribute">ses</span>=4294967295 <span class="hljs-attribute">comm</span>=<span class="hljs-string">&quot;pkill&quot;</span> <span class="hljs-attribute">exe</span>=<span class="hljs-string">&quot;/usr/bin/pkill&quot;</span> key=(<span class="hljs-literal">null</span>)<br><span class="hljs-attribute">type</span>=OBJ_PID <span class="hljs-attribute">msg</span>=audit(1643192492.764:23276): <span class="hljs-attribute">opid</span>=11390 <span class="hljs-attribute">oauid</span>=0 <span class="hljs-attribute">ouid</span>=0 <span class="hljs-attribute">oses</span>=52555 <span class="hljs-attribute">ocomm</span>=<span class="hljs-string">&quot;jumper-monitor&quot;</span><br><span class="hljs-attribute">type</span>=SYSCALL <span class="hljs-attribute">msg</span>=audit(1643192492.764:23277): <span class="hljs-attribute">arch</span>=c000003e <span class="hljs-attribute">syscall</span>=62 <span class="hljs-attribute">success</span>=<span class="hljs-literal">yes</span> <span class="hljs-attribute">exit</span>=0 <span class="hljs-attribute">a0</span>=2c7f <span class="hljs-attribute">a1</span>=f <span class="hljs-attribute">a2</span>=7f776e62f7b8 <span class="hljs-attribute">a3</span>=7fffd20c62c0 <span class="hljs-attribute">items</span>=0 <span class="hljs-attribute">ppid</span>=5554 <span class="hljs-attribute">pid</span>=5606 <span class="hljs-attribute">auid</span>=4294967295 <span class="hljs-attribute">uid</span>=0 <span class="hljs-attribute">gid</span>=0 <span class="hljs-attribute">euid</span>=0 <span class="hljs-attribute">suid</span>=0 <span class="hljs-attribute">fsuid</span>=0 <span class="hljs-attribute">egid</span>=0 <span class="hljs-attribute">sgid</span>=0 <span class="hljs-attribute">fsgid</span>=0 tty=(none) <span class="hljs-attribute">ses</span>=4294967295 <span class="hljs-attribute">comm</span>=<span class="hljs-string">&quot;pkill&quot;</span> <span class="hljs-attribute">exe</span>=<span class="hljs-string">&quot;/usr/bin/pkill&quot;</span> key=(<span class="hljs-literal">null</span>)<br><span class="hljs-attribute">type</span>=OBJ_PID <span class="hljs-attribute">msg</span>=audit(1643192492.764:23277): <span class="hljs-attribute">opid</span>=11391 <span class="hljs-attribute">oauid</span>=0 <span class="hljs-attribute">ouid</span>=0 <span class="hljs-attribute">oses</span>=52628 <span class="hljs-attribute">ocomm</span>=<span class="hljs-string">&quot;zmq-proxy-monit&quot;</span><br><span class="hljs-attribute">type</span>=SYSCALL <span class="hljs-attribute">msg</span>=audit(1643192492.764:23278): <span class="hljs-attribute">arch</span>=c000003e <span class="hljs-attribute">syscall</span>=62 <span class="hljs-attribute">success</span>=<span class="hljs-literal">yes</span> <span class="hljs-attribute">exit</span>=0 <span class="hljs-attribute">a0</span>=2c8b <span class="hljs-attribute">a1</span>=f <span class="hljs-attribute">a2</span>=7f776e62f7b8 <span class="hljs-attribute">a3</span>=7fffd20c62c0 <span class="hljs-attribute">items</span>=0 <span class="hljs-attribute">ppid</span>=5554 <span class="hljs-attribute">pid</span>=5606 <span class="hljs-attribute">auid</span>=4294967295 <span class="hljs-attribute">uid</span>=0 <span class="hljs-attribute">gid</span>=0 <span class="hljs-attribute">euid</span>=0 <span class="hljs-attribute">suid</span>=0 <span class="hljs-attribute">fsuid</span>=0 <span class="hljs-attribute">egid</span>=0 <span class="hljs-attribute">sgid</span>=0 <span class="hljs-attribute">fsgid</span>=0 tty=(none) <span class="hljs-attribute">ses</span>=4294967295 <span class="hljs-attribute">comm</span>=<span class="hljs-string">&quot;pkill&quot;</span> <span class="hljs-attribute">exe</span>=<span class="hljs-string">&quot;/usr/bin/pkill&quot;</span> key=(<span class="hljs-literal">null</span>)<br><span class="hljs-attribute">type</span>=OBJ_PID <span class="hljs-attribute">msg</span>=audit(1643192492.764:23278): <span class="hljs-attribute">opid</span>=11403 <span class="hljs-attribute">oauid</span>=0 <span class="hljs-attribute">ouid</span>=0 <span class="hljs-attribute">oses</span>=52628 <span class="hljs-attribute">ocomm</span>=<span class="hljs-string">&quot;zcho-monitor&quot;</span><br><span class="hljs-attribute">type</span>=SYSCALL <span class="hljs-attribute">msg</span>=audit(1643192492.764:23279): <span class="hljs-attribute">arch</span>=c000003e <span class="hljs-attribute">syscall</span>=62 <span class="hljs-attribute">success</span>=<span class="hljs-literal">yes</span> <span class="hljs-attribute">exit</span>=0 <span class="hljs-attribute">a0</span>=2c8c <span class="hljs-attribute">a1</span>=f <span class="hljs-attribute">a2</span>=7f776e62f7b8 <span class="hljs-attribute">a3</span>=7fffd20c62c0 <span class="hljs-attribute">items</span>=0 <span class="hljs-attribute">ppid</span>=5554 <span class="hljs-attribute">pid</span>=5606 <span class="hljs-attribute">auid</span>=4294967295 <span class="hljs-attribute">uid</span>=0 <span class="hljs-attribute">gid</span>=0 <span class="hljs-attribute">euid</span>=0 <span class="hljs-attribute">suid</span>=0 <span class="hljs-attribute">fsuid</span>=0 <span class="hljs-attribute">egid</span>=0 <span class="hljs-attribute">sgid</span>=0 <span class="hljs-attribute">fsgid</span>=0 tty=(none) <span class="hljs-attribute">ses</span>=4294967295 <span class="hljs-attribute">comm</span>=<span class="hljs-string">&quot;pkill&quot;</span> <span class="hljs-attribute">exe</span>=<span class="hljs-string">&quot;/usr/bin/pkill&quot;</span> key=(<span class="hljs-literal">null</span>)<br><span class="hljs-attribute">type</span>=OBJ_PID <span class="hljs-attribute">msg</span>=audit(1643192492.764:23279): <span class="hljs-attribute">opid</span>=11404 <span class="hljs-attribute">oauid</span>=0 <span class="hljs-attribute">ouid</span>=0 <span class="hljs-attribute">oses</span>=888 <span class="hljs-attribute">ocomm</span>=<span class="hljs-string">&quot;promised-monito&quot;</span><br><span class="hljs-attribute">type</span>=SYSCALL <span class="hljs-attribute">msg</span>=audit(1643192492.765:23280): <span class="hljs-attribute">arch</span>=c000003e <span class="hljs-attribute">syscall</span>=59 <span class="hljs-attribute">success</span>=<span class="hljs-literal">yes</span> <span class="hljs-attribute">exit</span>=0 <span class="hljs-attribute">a0</span>=8830d0 <span class="hljs-attribute">a1</span>=87be60 <span class="hljs-attribute">a2</span>=883650 <span class="hljs-attribute">a3</span>=7ffd21c2f350 <span class="hljs-attribute">items</span>=3 <span class="hljs-attribute">ppid</span>=5554 <span class="hljs-attribute">pid</span>=5609 <span class="hljs-attribute">auid</span>=4294967295 <span class="hljs-attribute">uid</span>=0 <span class="hljs-attribute">gid</span>=0 <span class="hljs-attribute">euid</span>=0 <span class="hljs-attribute">suid</span>=0 <span class="hljs-attribute">fsuid</span>=0 <span class="hljs-attribute">egid</span>=0 <span class="hljs-attribute">sgid</span>=0 <span class="hljs-attribute">fsgid</span>=0 tty=(none) <span class="hljs-attribute">ses</span>=4294967295 <span class="hljs-attribute">comm</span>=<span class="hljs-string">&quot;service&quot;</span> <span class="hljs-attribute">exe</span>=<span class="hljs-string">&quot;/usr/bin/bash&quot;</span> key=(<span class="hljs-literal">null</span>)<br><span class="hljs-attribute">type</span>=EXECVE <span class="hljs-attribute">msg</span>=audit(1643192492.765:23280): <span class="hljs-attribute">argc</span>=4 <span class="hljs-attribute">a0</span>=<span class="hljs-string">&quot;/bin/sh&quot;</span> <span class="hljs-attribute">a1</span>=<span class="hljs-string">&quot;/usr/sbin/service&quot;</span> <span class="hljs-attribute">a2</span>=<span class="hljs-string">&quot;monit&quot;</span> <span class="hljs-attribute">a3</span>=<span class="hljs-string">&quot;restart&quot;</span><br><span class="hljs-attribute">type</span>=CWD <span class="hljs-attribute">msg</span>=audit(1643192492.765:23280):  <span class="hljs-attribute">cwd</span>=<span class="hljs-string">&quot;/opt/soft/fast/agent/v0.0.25.e326b11&quot;</span><br></code></pre></td></tr></table></figure><p>如上例中的日志中发现promised-monito 被kill掉，从上述倒数第4行日志发现promised-monito 有收到消息, 那是谁发出的消息那，从倒数第5行日志看到<code>ppid=5554 pid=5606</code> 和<code>exe=&quot;/usr/bin/pkill&quot;</code> 可以看出是通过父进程(5554) 接收到pkill系统调用发生的。</p><p>那么5554又是哪个进程？通过执行<code>ps -ef |grep 5554</code> 发现找不到任何5554的信息，从而怀疑5554执行完相关pkill动作后就退出了，所以在日志中继续向上查找有谁创建了5554进程。通过日志发现了<code>items=3 ppid=29639 pid=5554 </code>和行尾的<code>comm=&quot;600_cdn_mmoonni&quot; exe=&quot;/usr/bin/bash&quot;</code> 说明5554是一个脚本进程，脚本的名字包含<code>600_cdn_mmoonni</code> 这个名字可能被截断了。再次通过执行<code>ps -ef |grep 29639</code> 我们发现了进程信息如下的进程信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>      <span class="hljs-number">7915</span> <span class="hljs-number">12188</span>  <span class="hljs-number">0</span> <span class="hljs-number">14</span>:<span class="hljs-number">23</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> grep --color=auto fast<br><span class="hljs-attribute">root</span>     <span class="hljs-number">12957</span>     <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">2021</span> ?        <span class="hljs-number">02</span>:<span class="hljs-number">26</span>:<span class="hljs-number">12</span> ./fast-updater -c cfg.json<br><span class="hljs-attribute">root</span>     <span class="hljs-number">29639</span>     <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">2021</span> ?        <span class="hljs-number">08</span>:<span class="hljs-number">00</span>:<span class="hljs-number">13</span> ./fast-agent -c cfg.json<br><br></code></pre></td></tr></table></figure><p>通过<code>29639</code> 这个信息我们在fast-agent 服务的脚本中找到了<code>600_cdn_mmoonniitt_check.sh</code> 这个脚本，并在脚本中发现了<code>pkill monit </code>这样的杀死进程的命令。由于pkill是按照模糊匹配规则对所有运行进程中包含monit的进程发送pkill 命名，从而导致了我们的promised-monito 被意外杀死从而影响了线上服务的稳定性。</p><p>审核守护程序可以在 <code>/etc/audit/auditd.conf</code> 配置文件中进行配置。这个文件包括修改审核守护进程特性的配置参数。紧跟 # 字符（<code>#</code>）的任何空行或者文本都被忽略。所有配置参数的列表以及它们的解释都可以在 audit.conf(5) 手册页中找到。</p><h1 id="配置-auditd"><a href="#配置-auditd" class="headerlink" title="配置 auditd"></a>配置 <code>auditd</code></h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">audit的默认配置文件路径为 <span class="hljs-regexp">/etc/</span>audit/auditd.conf<br>audit的默认日志路径为 <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/audit/</span>audit.log<br></code></pre></td></tr></table></figure><p>默认 <code>auditd</code> 配置应该对大多数环境都适合。但是如果您的环境符合由 <em>可控制存取保护档案</em>（CAPP）所建立的标准，这将是公共标准认证的一部分，审核守护程序必须用以下设定配置：</p><ul><li>保存审核日志文件的目录（<code>/var/log/audit/</code>）经常应该在另一个分区。这将防止其他过程耗费此目录中的空间，并且为剩余的审核守护程序提供准确的检测。</li><li><em><code>max_log_file</code></em> 参数详细说明了每个审核日志文件最少的占用空间，参数必须设定为充分利用保存审核日志文件分区所在的可用空间。</li><li><em><code>max_log_file_action</code></em> 参数决定采取何种行动，一旦到达在 *<code>max_log_file</code>*中所设定的极限，则应该设定为 <code>keep_logs</code> 防止审核日志文件被重写。</li><li><em><code>space_left</code></em> 参数明确说明磁盘中可用空间的数量，这样的话在*<code>space_left_action</code>* 参数中所设定的行动会被触发。此参数必须被设定为一个数字它会给予管理者足够的时间来回应和刷新磁盘空间。 <em><code>space_left</code></em> 价值取决于审核日志文件生成的速度。</li><li>我们推荐您采用合适的通知方法把 <em><code>space_left_action</code></em> 参数设定为<code>email</code> 或者 <code>exec</code>。</li><li><em><code>admin_space_left</code></em> 参数明确说明自由空间的绝对最小数量，为了在 <em><code>admin_space_left_action</code></em> 参数中所设定的行动会被触发，必须设定一个会给予管理者的日志行动总够空间的值。</li><li><em><code>admin_space_left_action</code></em> 参数必须设定 <code>single</code> 使系统属于单一用户模式，并且允许管理者开放一些磁盘空间。</li><li><em><code>disk_full_action</code></em> 参数明确说明当保存审核日志文件的分区没有可用空间时，应该触发行动，并且必须设定为 <code>halt</code> 或者 <code>single</code>。这保障了当审核不再记录事件时，系统也能在单一用户模式下关闭或者运行。</li><li>*<code>disk_error_action</code>*，明确说明如果保存在审核日志文件的分区检测到错误时，应该采取行动，必须设定 <code>syslog</code>、<code>single</code> 或者 <code>halt</code>，这取决于当地的安全政策有关硬件故障的处理。</li><li><em><code>flush</code></em> 配置参数必须设定为 <code>sync</code> 或者 <code>data</code>。这些参数保证所有的审核事件数据能与磁盘中的日志文件同步。</li></ul><h1 id="定义审核规则"><a href="#定义审核规则" class="headerlink" title="定义审核规则"></a>定义审核规则</h1><p>审核系统根据一组规则运行，这组规则定义了日志文件中所获取的内容。有三种类型的审核规则可以详细说明：</p><ul><li>控制规则 — 允许审核系统的行为和它的一些被修改的配置。</li><li>文件系统规则 — 也被称为文件监视，允许审核进入特定文件或者目录。</li><li>系统调用规则 — 允许记录任何指定程序所做的系统调用。</li></ul><p>审核规则可以在命令行上使用 <strong>auditctl</strong> 实用程序进行详细说明（请注意这些规则并不是在重新启动时一直有效），或者写在 <code>/etc/audit/audit.rules</code> 文件中。以下两个部分总结了定义审核规则的两个方法。</p><p><strong>使用 <code>auditctl</code>  实用程序来定义审核规则</strong></p><p><strong>注意</strong></p><p>所有与审核服务交互的命令以及审核日志文件都需要 <code>root</code> 特权。作为 <code>root </code>用户确保您执行这些命令。</p><p><code>auditctl</code> 命令允许您控制审核系统的基本功能并且限定规则来决定哪些审核项目要记录。</p><h2 id="定义控制规则"><a href="#定义控制规则" class="headerlink" title="定义控制规则"></a>定义控制规则</h2><p>以下是一些控制规则允许您修改审核系统的行为：</p><ul><li><p><code>-b</code></p><p>在 Kernel 中设定最大数量的已存在的审核缓冲区，例如：<code>~]# auditctl -b 8192</code></p></li><li><p><code>-f</code></p><p>当追踪重要错误时设定所要完成的行动，例如：<code>~]# auditctl -f 2</code>以上配置触发 kernel 恐慌以防重要错误。</p></li><li><p><code>-e</code></p><p>启动或者禁用审核系统或者锁定它的配置，例如：<code>~]# auditctl -e 2</code>以上命令锁定审核配置。</p></li><li><p><code>-r</code></p><p>设定每秒生成信息的速率，例如：<code>~]# auditctl -r 0</code>以上配置在生成信息方面不设定限制速率。</p></li><li><p><code>-s</code></p><p>报告审核系统状态，例如：<code>~]# auditctl -s AUDIT_STATUS: enabled=1 flag=2 pid=0 rate_limit=0 backlog_limit=8192 lost=259 backlog=0 </code></p></li><li><p><code>-l</code></p><p>列出所有当前装载的审核规则，例如：<code>~]# auditctl -l LIST_RULES: exit,always watch=/etc/localtime perm=wa key=time-change LIST_RULES: exit,always watch=/etc/group perm=wa key=identity LIST_RULES: exit,always watch=/etc/passwd perm=wa key=identity LIST_RULES: exit,always watch=/etc/gshadow perm=wa key=identity ⋮ </code></p></li><li><p><code>-D</code></p><p>删除所有当前装载的审核规则，例如：<code>~]# auditctl -D No rules </code></p></li></ul><h2 id="定义文件系统规则"><a href="#定义文件系统规则" class="headerlink" title="定义文件系统规则"></a>定义文件系统规则</h2><p>定义文件系统规则，使用以下语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">auditctl -w path_to_file -p permissions -k key_name<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><em>path_to_file</em> 是审核过的文件或者目录：</li><li><em>permissions</em> 是被记录的权限：<ul><li><code>r</code> — 读取文件或者目录。</li><li><code>w</code> — 写入文件或者目录。</li><li><code>x</code> — 运行文件或者目录。</li><li><code>a</code> — 改变在文件或者目录中的属性。</li></ul></li><li><em>key_name</em> 是可选字符串，可帮助您判定哪个规则或者哪组规则生成特定的日志项。</li></ul><p><strong>例 5.1. 文件系统规则</strong></p><p>为了定义所有的输写访问权限以及在 <code>/etc/passwd</code> 文件中每个属性更改的规则，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">~]# auditctl -w /etc/passwd -p wa -k passwd_changes<br></code></pre></td></tr></table></figure><p>请注意以下字符串 <code>-k</code> 选项是任意的。</p><p>为了定义记录所有输写访问权限，以及在 <code>/etc/selinux/</code> 目录中所有文件属性更改的规则，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">~]# auditctl -w /etc/selinux/ -p wa -k selinux_changes<br></code></pre></td></tr></table></figure><p>为了定义可以记录执行 <code>/sbin/insmod</code> 命令的规则，在 Linux Kernel 中插入模块，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">~]# auditctl -w /sbin/insmod -p x -k module_insertion<br></code></pre></td></tr></table></figure><h2 id="定义系统调用规则"><a href="#定义系统调用规则" class="headerlink" title="定义系统调用规则"></a>定义系统调用规则</h2><p>为了定义系统调用规则，使用以下语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">auditctl -a action,filter -S system_call -F 输入栏=value -k key_name<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><em>action</em> 以及 <em>filter</em> 详细说明某个事件何时被记录。 <em>action</em> 可能是 <code>always</code>（经常是）或者<code>never</code>（从不是）其中之一。 <em>filter</em> 详细说明哪个 Kernel 规则匹配过滤器应用在事件中。以下是其中之一的与规则匹配的过滤器： <code>task</code>、<code>exit</code>、<code>user</code> 以及 <code>exclude</code>。如果想要更多有关这些过滤器的信息，请参考〈<a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/security_guide/chap-system_auditing#sec-audit_system_architecture">第 5.1 节 “审核系统架构”</a>〉的开始部分。</li><li><em>system_call</em> 通过它的名字详细说明系统调用。所有的系统调用都可以在<code>/usr/include/asm/unistd_64.h</code> 文件中找到。许多系统调用都能形成一个规则，每个都在 <code>-S</code> 选项之后详细说明。</li><li><em>field</em>=<em>value</em> 详细说明其他选项，进一步修改规则来与以特定架构、组 ID、进程 ID和其他内容为基础的事件相匹配。为了列出完整可用的输入栏类型和它们的数值，请参考 auditctl(8) 手册页。</li><li><em>key_name</em> 是可选字符串，可帮助您判定哪个规则或者哪组规则生成特定的日志项。</li></ul><p><strong>例 系统调用规则</strong></p><p>为了定义创造日志项 的规则，每次通过程序使用系统调用 <code>adjtimex</code> 或者 <code>settimeofday</code>。当系统使用 64 位架构，请执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">~]# auditctl -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time_change<br></code></pre></td></tr></table></figure><p>为了定义创造日志项的规则，每次由 ID 是 500 或更大的系统用户删除或者重命名文件时，使用（<code>-F auid!=4294967295</code> 选项排除没有设定登录 UID的用户），执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">~]# auditctl -a always,exit -S unlink -S unlinkat -S rename -S renameat -F auid&gt;=500 -F auid!=4294967295 -k delete<br></code></pre></td></tr></table></figure><p>使用系统调用语法来定义文件系统也是有可能的。对于 <code>-w /etc/shadow -p wa</code> 文件系统规则来说，以下命令为模拟的系统调用创造了规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">~]# auditctl -a always,exit -F path=/etc/shadow -F perm=wa<br></code></pre></td></tr></table></figure><h2 id="在-etc-audit-audit-rules-文件中定义持久的审核规则和控制"><a href="#在-etc-audit-audit-rules-文件中定义持久的审核规则和控制" class="headerlink" title="在 /etc/audit/audit.rules 文件中定义持久的审核规则和控制"></a>在 <code>/etc/audit/audit.rules</code> 文件中定义持久的审核规则和控制</h2><p>为了定义在重新启动时可以一直有效的审核规则，您必须把它们包含在 <code>/etc/audit/audit.rules</code> 文件中。这个文件使用相同的 <code>auditctl</code> 命令行语法来详细说明规则。任何在 # 之后的空行或者文本（<code>#</code>）可以忽略。</p><p><code>auditctl</code> 指令可以被用来读取来自指定文件的规则，使用 <code>-R</code> 选项，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">~]# auditctl -R /usr/share/doc/audit-version/stig.rules<br></code></pre></td></tr></table></figure><h3 id="定义控制规则-1"><a href="#定义控制规则-1" class="headerlink" title="定义控制规则"></a>定义控制规则</h3><p>文件可以只包括以下的控制规则，修改审核系统的行为： <code>-b</code>、<code>-D</code>、<code>-e</code>、<code>-f</code>、或者 <code>-r</code>。如果想获取更多信息，请参考 <a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/security_guide/sec-Defining_Audit_Rules_and_Controls#bh-defining_controls_with_auditctl">“定义控制规则”一节</a>。</p><p><strong>例 5.3. 在 <code>audit.rules</code>中控制规则。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs none"># Delete all previous rules<br>-D<br><br># Set buffer size<br>-b 8192<br><br># Make the configuration immutable -- reboot is required to change audit rules<br>-e 2<br><br># Panic when a failure occurs<br>-f 2<br><br># Generate at most 100 audit messages per second<br>-r 100<br></code></pre></td></tr></table></figure><h3 id="定义文件系统和系统调用规则"><a href="#定义文件系统和系统调用规则" class="headerlink" title="定义文件系统和系统调用规则"></a>定义文件系统和系统调用规则</h3><p>使用 <code>auditctl</code> 语法定义文件系统和系统调用原则。在〈<a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/security_guide/sec-Defining_Audit_Rules_and_Controls#sec-Defining_Audit_Rules_with_the_auditctl_utility">第 5.5.1 节 “使用 <strong>auditctl</strong> 实用程序来定义审核规则”</a>〉中的例子可以用以下规则文件来表示：</p><p><strong>例 5.4. 在 <code>audit.rules</code> 中的文件系统和系统调用规则</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs none">-w /etc/passwd -p wa -k passwd_changes<br>-w /etc/selinux/ -p wa -k selinux_changes<br>-w /sbin/insmod -p x -k module_insertion<br><br>-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time_change<br>-a always,exit -S unlink -S unlinkat -S rename -S renameat -F auid&gt;=500 -F auid!=4294967295 -k delete<br></code></pre></td></tr></table></figure><h3 id="预配置规则文件"><a href="#预配置规则文件" class="headerlink" title="预配置规则文件"></a>预配置规则文件</h3><p>在 <code>/usr/share/doc/audit-*version*/</code> 目录中, 根据不同的认证标准 audit 软件包提供一组预配置规则文件：</p><ul><li><code>nispom.rules</code> — 审核规则配置符合《国家行业安全程序操作运行指南》的第八章中详细说明的要求。</li><li><code>capp.rules</code> — 审核规则配置满足由 <a href="http://www.niap-ccevs.org/pp/pp_os_ca_v1.d.pdf">CAPP</a> 设定的要求，是公共标准认定的一部分。</li><li><code>lspp.rules</code> —审核规则配置满足由 <a href="http://www.commoncriteriaportal.org/files/ppfiles/lspp.pdf">LSPP</a> 设定的要求是公共标准认定的一部分。</li><li><code>stig.rules</code> — 审核规则配置满足由 STIG 所设定的要求。</li></ul><p>为了使用这些配置文件，需要创造您原始文件的备份 <code>/etc/audit/audit.rules</code> 并且复制您所选择的有关 <code>/etc/audit/audit.rules</code> 文件的配置文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs none">~]# cp /etc/audit/audit.rules /etc/audit/audit.rules_backup<br>~]# cp /usr/share/doc/audit-version/stig.rules /etc/audit/audit.rules<br></code></pre></td></tr></table></figure><h1 id="理解审核日志文件"><a href="#理解审核日志文件" class="headerlink" title="理解审核日志文件"></a>理解审核日志文件</h1><p>默认情况下，在 <code>/var/log/audit/audit.log</code> 文件中的审核系统储存日志项；如果启用日志旋转，就可以旋转储存在同一目录中的 <code>audit.log</code> 文件。</p><p>以下的审核规则记录了每次读取或者修改 <code>/etc/ssh/sshd_config</code> 文件的尝试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">-w /etc/ssh/sshd_config -p warx -k sshd_config<br></code></pre></td></tr></table></figure><p>如果 <code>auditd</code> 守护程序在运行，就需在审核日志文件中运行以下命令创造新事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">~]# cat /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>在 <code>audit.log</code> 文件中的事件如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs none">type=SYSCALL msg=audit(1364481363.243:24287): arch=c000003e syscall=2 success=no exit=-13 a0=7fffd19c5592 a1=0 a2=7fffd19c4b50 a3=a items=1 ppid=2686 pid=3538 auid=500 uid=500 gid=500 euid=500 suid=500 fsuid=500 egid=500 sgid=500 fsgid=500 tty=pts0 ses=1 comm=&quot;cat&quot; exe=&quot;/bin/cat&quot; subj=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 key=&quot;sshd_config&quot;<br>type=CWD msg=audit(1364481363.243:24287):  cwd=&quot;/home/shadowman&quot;<br>type=PATH msg=audit(1364481363.243:24287): item=0 name=&quot;/etc/ssh/sshd_config&quot; inode=409248 dev=fd:00 mode=0100600 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:etc_t:s0<br></code></pre></td></tr></table></figure><p>以上事件由三个记录组成（每个以 <code>type=</code> 密码作为开始），共享相同的时间戳和编号。每个记录包含好几对 <code>*name*=*value*</code> ，由空格或者逗号分开。以下是关于以上事件的详细分析：</p><h3 id="第一个记录"><a href="#第一个记录" class="headerlink" title="第一个记录"></a>第一个记录</h3><ul><li><p><code>type=SYSCALL</code></p><p><code>type</code> 输入栏包含这类记录。在这个例子中， <code>SYSCALL</code> 数值详细说明连接到 Kernel 的系统调用触发了这个记录。为了列出所有可能的类型值和它们的解释，请参考〈<a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/security_guide/sec-Audit_Record_Types">第 B.2 节 “审核记录类型”</a>〉。</p></li><li><p><code>msg=audit(1364481363.243:24287):</code></p><p><code>msg</code> 输入栏记录：<code>audit(*time_stamp*:*ID*)</code> 表格中记录的时间戳和特殊 ID。如果多种记录生成为相同审核事件的一部分，那么它们可以共享相同的时间戳和 ID。Kernel 或者用户空间应用提供不同的事件特定 <code>*name*=*value*</code> 组。</p></li><li><p><code>arch=c000003e</code></p><p><code>arch</code> 输入栏包括关于系统CPU架构的信息。值 <code>c000003e</code> 是使用 16 进制表示法编码。当使用 <code>ausearch</code> 命令搜寻审核记录时, 使用 <code>-i</code> 或者 <code>--interpret</code> 选项自动转化为 16 进制值可供人读取的对等语。 <code>c000003e</code> 值被解释为 <code>x86_64</code>。</p></li><li><p><code>syscall=2</code></p><p><code>syscall</code> 输入栏记录了传输给 Kernel 的输入栏类型。值 <code>2</code> 可以与在 <code>/usr/include/asm/unistd_64.h</code> 文件中可供人读取的对等语相匹配。 在这种情况下，<code>2</code> 是 <code>open</code> 系统调用。 请注意 <strong>ausyscall</strong> 实用程序允许您把系统调用数字转换成可供人读取的对等语。 使用 <code>ausyscall --dump</code> 命令来展示所有的系统调用和它们的号码。如想要获取更多信息，请参考 ausyscall(8) 手册页。</p></li><li><p><code>success=no</code></p><p><code>success</code> 输入栏记录了系统调用是否被成功地记录在特定事件中。在这种情况下，调用不会成功。</p></li><li><p><code>exit=-13</code></p><p><code>exit</code> 输入栏包含详细说明由系统调用所返回的退出代码的值。在不同的系统调用中，值各不相同。您可以用以下命令把值解释为可供人读取的对等语：<code>ausearch --interpret --exit -13</code>（假设您的审核日志中包含的事件没有退出代码 <code>-13</code>）。</p></li><li><p><code>a0=7fffd19c5592</code>, <code>a1=0</code>, <code>a2=7fffd19c5592</code>, <code>a3=a</code></p><p><code>a0</code> 到 <code>a3</code> 输入栏记录了前四个参数，在这个事件中使用 16 进制编码系统调用。这些参数取决于使用的系统调用；它们可以通过 <strong>ausearch</strong> 实用程序来解释。</p></li><li><p><code>items=1</code></p><p><code>items</code> 输入栏包含事件中路径记录的数量。</p></li><li><p><code>ppid=2686</code></p><p><code>items</code> 输入栏记录了父进程 ID（PPID）。在这个情况下，<code>2686</code> 是 <code>bash</code> 进程的 PPID。</p></li><li><p><code>pid=3538</code></p><p><code>pid</code> 输入栏记录了进程 ID（PID）。在这个情况下，<code>3538</code> 是 <code>cat</code> 进程的 PID。</p></li><li><p><code>auid=500</code></p><p><code>auid</code> 输入栏记录了审核用户 ID，这个是 loginuid。这个ID是用户在登录时使用的并且即使当用户身份改变时，也可以通过每个进程获取该ID。（例如，通过切换用户账户，使用 <code>su - john</code>命令）。</p></li><li><p><code>uid=500</code></p><p><code>uid</code> 输入栏记录了开始分析进程的用户 ID。使用以下指令：<code>ausearch -i --uid *UID*</code>，用户 ID 就可以被解释为用户名字。在这个情况下， <code>500</code> 是 <code>shadowman</code> 的用户 ID。</p></li><li><p><code>gid=500</code></p><p><code>gid</code> 输入栏记录了开始分析进程用户的 ID组。</p></li><li><p><code>euid=500</code></p><p><code>euid</code> 输入栏记录了开始分析进程用户的有效用户 ID。</p></li><li><p><code>suid=500</code></p><p><code>suid</code> 输入栏记录了开始分析进程的用户的设置用户 ID。</p></li><li><p><code>fsuid=500</code></p><p><code>fsuid</code> 输入栏记录了开始分析进程用户的文件系统用户 ID。</p></li><li><p><code>egid=500</code></p><p><code>egid</code> 输入栏记录了开始分析进程用户的有效群组 ID。</p></li><li><p><code>sgid=500</code></p><p><code>sgid</code> 输入栏记录了开始分析进程用户的设置群组 ID。</p></li><li><p><code>fsgid=500</code></p><p><code>fsgid</code> 输入栏记录了开始分析进程的用户的文件系统群组 ID。</p></li><li><p><code>tty=pts0</code></p><p><code>tty</code> 输入栏记录了调用分析进程的终端。</p></li><li><p><code>ses=1</code></p><p><code>ses</code> 输入栏记录了调用分析进程会话的会话 ID。</p></li><li><p><code>comm=&quot;cat&quot;</code></p><p><code>comm</code> 输入栏记录了命令行的名字，它被用于调用分析进程。在这种情况下 <code>cat</code> 命令被用来触发审核事件。</p></li><li><p><code>exe=&quot;/bin/cat&quot;</code></p><p><code>exe</code> 输入栏记录了被用来调用分析进程的可执行的路径。</p></li><li><p><code>subj=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</code></p><p><code>subj</code> 输入栏记录了 SELinux 语境，运用此语境可以在执行时间中标注分析进程。</p></li><li><p><code>key=&quot;sshd_config&quot;</code></p><p><code>key</code> 输入栏记录了所有管理者定义的字符串，它与在审核日志中生成该事件的规则有关。</p></li></ul><h3 id="第二记录"><a href="#第二记录" class="headerlink" title="第二记录"></a>第二记录</h3><ul><li><p><code>type=CWD</code></p><p>在第二记录中，<code>type</code> 输入栏数值是 <code>CWD</code> — 当前工作目录。这种类型用于记录在被执行的第一记录中详细说明的触发系统调用的进程。这个记录的目的是为了记录当前进程的位置以防在相关的 PATH 记录中捕捉到相对路径。运用这个方法可以重塑绝对路径。</p></li><li><p><code>msg=audit(1364481363.243:24287)</code></p><p><code>msg</code> 输入栏持有与第一记录中的数值相同的时间戳和 ID 值。</p></li><li><p><code>cwd=&quot;/home/shadowman&quot;</code></p><p><code>cwd</code> 输入栏含有进入目录的路径，在目录中触发系统调用。</p></li></ul><h3 id="第三记录"><a href="#第三记录" class="headerlink" title="第三记录"></a>第三记录</h3><ul><li><p><code>type=PATH</code></p><p>在第三记录中， <code>type</code> 输入栏值是 <code>PATH</code>。每个审核事件包含一个 <code>PATH</code> 对于每条路径种类的记录作为一个参数，传输给系统调用。在审核事件中，只有一条路径（<code>/etc/ssh/sshd_config</code>）被用来作为参数。</p></li><li><p><code>msg=audit(1364481363.243:24287):</code></p><p><code>msg</code> 输入栏持有与第一和第二记录中的值相同的时间戳和 ID 值。</p></li><li><p><code>item=0</code></p><p><code>item</code> 输入栏表明在所有项目中，哪个项目在 <code>SYSCALL</code> 类型记录中，参考了当前记录。这个是数字是以零为基准；值 <code>0</code> 意味着它是第一项。</p></li><li><p><code>name=&quot;/etc/ssh/sshd_config&quot;</code></p><p><code>name</code> 输入栏记录了文件或者目录的所有路径，作为参数被传输给系统调用。在这种情况下，它是 <code>/etc/ssh/sshd_config</code> 文件。</p></li><li><p><code>inode=409248</code></p><p><code>inode</code> 输入栏包含索引结点数字，与记录在事件中的文件和目录有关。以下命令体现了与 <code>409248</code> 索引结点数字相关的文件和目录：<code>~]# find / -inum 409248 -print /etc/ssh/sshd_config </code></p></li><li><p><code>dev=fd:00</code></p><p><code>dev</code> 输入栏明确说明了设备的次要和主要 ID，它包含记录在事件中的文件和目录。在这种情况下，值代表 <code>/dev/fd/0</code> 设备。</p></li><li><p><code>mode=0100600</code></p><p><code>mode</code> 输入栏记录了文件和目录权限，用 16 进制表示法编码。在这种情况下，<code>0100600</code> 可以被解释为 <code>-rw-------</code>，意味着对于 <code>/etc/ssh/sshd_config</code> 文件，只有 root 用户拥有读取并且输入权限。</p></li><li><p><code>ouid=0</code></p><p><code>ouid</code> 输入栏记录了对象所有者的用户 ID。</p></li><li><p><code>ogid=0</code></p><p><code>ogid</code> 输入栏记录对象拥有者的群组 ID。</p></li><li><p><code>rdev=00:00</code></p><p><code>rdev</code> 输入栏包含记录的设备识别器只用于特殊文件。在这种情况下，正常文件是不用来作为记录文件的。</p></li><li><p><code>obj=system_u:object_r:etc_t:s0</code></p><p><code>obj</code> 输入栏记录了 SELinux 语境，运用此语境可以在执行时间中标注分析进程。</p></li></ul><p>以上分析过的审核事件是事件所包含的所有可能位置栏的一小部分。为了列出所有事件的位置栏及解释，请参考〈<a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/security_guide/app-Audit_Reference#sec-Audit_Events_Fields">第 B.1 节 “审核事件字段”</a>〉。为了列出所有事件类型以及解释，请参考〈<a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/security_guide/sec-Audit_Record_Types">第 B.2 节 “审核记录类型”</a>〉。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qwertyupoiuytr/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">58278349</span><br>https:<span class="hljs-regexp">//</span>access.redhat.com<span class="hljs-regexp">/documentation/</span>zh-cn<span class="hljs-regexp">/red_hat_enterprise_linux/</span><span class="hljs-number">7</span><span class="hljs-regexp">/html/</span>security_guide/sec-understanding_audit_log_files<br>https:<span class="hljs-regexp">//</span>access.redhat.com<span class="hljs-regexp">/documentation/</span>zh-cn<span class="hljs-regexp">/red_hat_enterprise_linux/</span><span class="hljs-number">7</span><span class="hljs-regexp">/html/</span>security_guide/sec-defining_audit_rules_and_controls<br>https:<span class="hljs-regexp">//</span>www.jianshu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">4</span>a7cc1944ea7<br>https:<span class="hljs-regexp">//</span>www.daimajiaoliu.com<span class="hljs-regexp">/daima/</span><span class="hljs-number">4795</span>a4ea61003fc<br>https:<span class="hljs-regexp">//</span>paper.seebug.org<span class="hljs-regexp">/1594/</span><span class="hljs-comment">#31</span><br>http:<span class="hljs-regexp">//</span>blog.chinaunix.net/uid-<span class="hljs-number">20662820</span>-id-<span class="hljs-number">5326690</span>.html<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>离职项目交接模板</title>
    <link href="/2022/01/08/06%E6%9D%82%E9%A1%B9/00%E7%A6%BB%E8%81%8C%E9%A1%B9%E7%9B%AE%E4%BA%A4%E6%8E%A5%E6%A8%A1%E6%9D%BF/"/>
    <url>/2022/01/08/06%E6%9D%82%E9%A1%B9/00%E7%A6%BB%E8%81%8C%E9%A1%B9%E7%9B%AE%E4%BA%A4%E6%8E%A5%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="项目交接内容整理"><a href="#项目交接内容整理" class="headerlink" title="项目交接内容整理"></a>项目交接内容整理</h1><table><thead><tr><th>交接内容</th><th>交接结果</th><th>其他</th></tr></thead><tbody><tr><td>项目文档</td><td>协议说明等内容</td><td></td></tr><tr><td>项目源码地址</td><td></td><td></td></tr><tr><td>项目权限</td><td></td><td></td></tr><tr><td>编译环境</td><td></td><td>特殊说明：</td></tr><tr><td>上线步骤</td><td></td><td></td></tr><tr><td>上线注意事项</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>待完善或待完成工作内容</td><td></td><td></td></tr><tr><td>当前存在的问题及风险</td><td></td><td></td></tr></tbody></table><p><strong>至少保证程序编译后上线一次</strong></p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>个人开发基本原则</title>
    <link href="/2022/01/07/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/00%20%E4%B8%AA%E4%BA%BA%E5%BC%80%E5%8F%91%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/"/>
    <url>/2022/01/07/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/00%20%E4%B8%AA%E4%BA%BA%E5%BC%80%E5%8F%91%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul><li>不要在构造函数中注册任何回调；</li><li>不要在构造函数中把 this 传给跨线程的对象  <figure class="highlight coffeescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs coffeescript">因为在构造函数执行期间对象还没有完成初始化，如果 <span class="hljs-built_in">this</span>被泄露（<span class="hljs-built_in">escape</span>）给了其他对象（其自身创建的子对象除外），那么别的线程有可能访问这个半成品对象，这会造成难以预料的后果<br></code></pre></td></tr></table></figure><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2></li><li>shared_ptr 是管理共享资源的利器，需要注意避免循环引用，通常的做法是 owner 持有指向 child 的 shared_ptr， child 持有指向 owner 的 weak_ptr。</li><li>std::bind 拷贝的是实参类型，不是形参类型</li></ul><h1 id="c"><a href="#c" class="headerlink" title="c"></a>c</h1><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><ul><li>/usr/include/netinet/tcp.h 中的 tcp_info 获取连接的状态数据信息  </li></ul>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>typora配置标题自动添加序号</title>
    <link href="/2021/12/22/04DevOps/13%20typora%E9%85%8D%E7%BD%AE%E6%A0%87%E9%A2%98%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%8F%B7/"/>
    <url>/2021/12/22/04DevOps/13%20typora%E9%85%8D%E7%BD%AE%E6%A0%87%E9%A2%98%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<ol><li><p>依次点击以下按钮进入typora主题目录<br>文件—》偏好设置—》外观—》打开主题文件夹</p></li><li><p>在主题目录创建 base.user.css 文件</p></li><li><p>在base.user.css 文件中增加以下内容</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/** initialize css counter */</span><br><span class="hljs-selector-id">#write</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h1<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h2<br>&#125;<br><br><span class="hljs-selector-tag">h2</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h3<br>&#125;<br><br><span class="hljs-selector-tag">h3</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h4<br>&#125;<br><br><span class="hljs-selector-tag">h4</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h5<br>&#125;<br><br><span class="hljs-selector-tag">h5</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h6<br>&#125;<br><br><span class="hljs-comment">/** put counter result into headings */</span><br><span class="hljs-selector-id">#write</span> <span class="hljs-selector-tag">h1</span>:before &#123;<br>    counter-increment: h1;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;. &quot;</span><br>&#125;<br><br><span class="hljs-selector-id">#write</span> <span class="hljs-selector-tag">h2</span>:before &#123;<br>    counter-increment: h2;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;. &quot;</span><br>&#125;<br><br><span class="hljs-selector-id">#write</span> <span class="hljs-selector-tag">h3</span>:before,<br>h3.md-focus.md-heading:before /** override the default style for focused headings */ &#123;<br>    counter-increment: h3;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot;. &quot;</span><br>&#125;<br><br><span class="hljs-selector-id">#write</span> <span class="hljs-selector-tag">h4</span>:before,<br>h4.md-focus.md-heading:before &#123;<br>    counter-increment: h4;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h4) <span class="hljs-string">&quot;. &quot;</span><br>&#125;<br><br><span class="hljs-selector-id">#write</span> <span class="hljs-selector-tag">h5</span>:before,<br>h5.md-focus.md-heading:before &#123;<br>    counter-increment: h5;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h4) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h5) <span class="hljs-string">&quot;. &quot;</span><br>&#125;<br><br><span class="hljs-selector-id">#write</span> <span class="hljs-selector-tag">h6</span>:before,<br>h6.md-focus.md-heading:before &#123;<br>    counter-increment: h6;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h4) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h5) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h6) <span class="hljs-string">&quot;. &quot;</span><br>&#125;<br><br><span class="hljs-comment">/** override the default style for focused headings */</span><br><span class="hljs-selector-id">#write</span>&gt;<span class="hljs-selector-tag">h3</span><span class="hljs-selector-class">.md-focus</span>:before,<br>#write&gt;h4.md-focus:before,<br>#write&gt;h5.md-focus:before,<br>#write&gt;h6.md-focus:before,<br>h3.md-focus:before,<br>h4.md-focus:before,<br>h5.md-focus:before,<br>h6.md-focus:before &#123;<br>    color: inherit;<br>    <span class="hljs-attribute">border</span>: inherit;<br>    <span class="hljs-attribute">border-radius</span>: inherit;<br>    <span class="hljs-attribute">position</span>: inherit;<br>    <span class="hljs-attribute">left</span>:initial;<br>    <span class="hljs-attribute">float</span>: none;<br>    <span class="hljs-attribute">top</span>:initial;<br>    <span class="hljs-attribute">font-size</span>: inherit;<br>    <span class="hljs-attribute">padding-left</span>: inherit;<br>    <span class="hljs-attribute">padding-right</span>: inherit;<br>    <span class="hljs-attribute">vertical-align</span>: inherit;<br>    <span class="hljs-attribute">font-weight</span>: inherit;<br>    <span class="hljs-attribute">line-height</span>: inherit;<br>&#125;<br><br><span class="hljs-comment">/** 侧边栏列表 */</span><br><br><span class="hljs-selector-class">.sidebar-content</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h1<br>&#125;<br> <br><span class="hljs-selector-class">.outline-h1</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h2<br>&#125;<br> <br><span class="hljs-selector-class">.outline-h2</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h3<br>&#125;<br> <br><span class="hljs-selector-class">.outline-h3</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h4<br>&#125;<br> <br><span class="hljs-selector-class">.outline-h4</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h5<br>&#125;<br> <br><span class="hljs-selector-class">.outline-h5</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h6<br>&#125;<br> <br><span class="hljs-selector-class">.outline-h1</span>&gt;<span class="hljs-selector-class">.outline-item</span>&gt;<span class="hljs-selector-class">.outline-label</span>:before &#123;<br>    counter-increment: h1;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;. &quot;</span><br>&#125;<br> <br><span class="hljs-selector-class">.outline-h2</span>&gt;<span class="hljs-selector-class">.outline-item</span>&gt;<span class="hljs-selector-class">.outline-label</span>:before &#123;<br>    counter-increment: h2;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;. &quot;</span><br>&#125;<br> <br><span class="hljs-selector-class">.outline-h3</span>&gt;<span class="hljs-selector-class">.outline-item</span>&gt;<span class="hljs-selector-class">.outline-label</span>:before &#123;<br>    counter-increment: h3;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot;. &quot;</span><br>&#125;<br> <br><span class="hljs-selector-class">.outline-h4</span>&gt;<span class="hljs-selector-class">.outline-item</span>&gt;<span class="hljs-selector-class">.outline-label</span>:before &#123;<br>    counter-increment: h4;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h4) <span class="hljs-string">&quot;. &quot;</span><br>&#125;<br> <br><span class="hljs-selector-class">.outline-h5</span>&gt;<span class="hljs-selector-class">.outline-item</span>&gt;<span class="hljs-selector-class">.outline-label</span>:before &#123;<br>    counter-increment: h5;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h4) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h5) <span class="hljs-string">&quot;. &quot;</span><br>&#125;<br> <br><span class="hljs-selector-class">.outline-h6</span>&gt;<span class="hljs-selector-class">.outline-item</span>&gt;<span class="hljs-selector-class">.outline-label</span>:before &#123;<br>    counter-increment: h6;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h4) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h5) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h6) <span class="hljs-string">&quot;. &quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>zhuanlan.zhihu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">110257979</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>c++11 std::bind 详解</title>
    <link href="/2021/08/12/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/12c11%20bind%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/12/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/12c11%20bind%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p> std::bind 函数定义在头文件<functional>中，是一个函数模板，它就像一个函数适配器，接受一个可调用对象（callable object），生成一个新的可调用对象来“适应”原对象的参数列表。一般而言，我们用它可以把一个原本接收N个参数的函数fn，通过绑定一些参数，返回一个接收M个（M可以大于N，但这么做没什么意义）参数的新函数。同时，使用std::bind函数还可以实现参数顺序调整等操作。</p><h2 id="2-函数原型"><a href="#2-函数原型" class="headerlink" title="2. 函数原型"></a>2. 函数原型</h2><p>std::bind函数有两种函数原型，定义如下：</p><figure class="highlight stata"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs stata">template&lt; <span class="hljs-keyword">class</span> F, <span class="hljs-keyword">class</span>... <span class="hljs-keyword">Args</span> &gt; bind( F&amp;&amp; f, <span class="hljs-keyword">Args</span>&amp;&amp;... <span class="hljs-keyword">args</span> ); <br>template&lt; <span class="hljs-keyword">class</span> R, <span class="hljs-keyword">class</span> F, <span class="hljs-keyword">class</span>... <span class="hljs-keyword">Args</span> &gt;  bind( F&amp;&amp; f, <span class="hljs-keyword">Args</span>&amp;&amp;... <span class="hljs-keyword">args</span> );<br></code></pre></td></tr></table></figure><p>std::bind返回一个基于f的函数对象(obj)，调用obj时参数被绑定到args上。f的参数要么被绑定到具体的值，要么被绑定到 placeholders(占位符，如_1, _2, …, _n).</p><p>其中占位符<code>_1</code>,<code>_2</code>表示，当执行obj函数时的第1,第2 … 第n个参数。</p><h2 id="3-参数及用法解释"><a href="#3-参数及用法解释" class="headerlink" title="3. 参数及用法解释"></a>3. 参数及用法解释</h2><h3 id="3-1-参数"><a href="#3-1-参数" class="headerlink" title="3.1 参数"></a>3.1 参数</h3><p>f：一个可调用对象（可以是函数对象、函数指针、函数引用、成员函数指针、数据成员指针），它的参数将被绑定到args上。<br>args：绑定参数列表，参数会被值或占位符替换，其长度必须与f接收的参数个数一致。</p><h3 id="3-2-调用形式"><a href="#3-2-调用形式" class="headerlink" title="3.2 调用形式"></a>3.2 调用形式</h3><p>调用std::bind的一般形式为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> newCallable = std::<span class="hljs-built_in">bind</span>(callable, arg_list);<br></code></pre></td></tr></table></figure><p>其中，newCallable 本身是一个可调用对象，arg_list 是一个逗号分隔的参数列表，对应给定的 callable 的参数。即，当我们调用 newCallable 时，newCallable 会调用callable，并传递给它 arg_list 中的参数。</p><h3 id="3-3-返回类型"><a href="#3-3-返回类型" class="headerlink" title="3.3 返回类型"></a>3.3 返回类型</h3><p>std::bind 的返回类型是一个函数对象,这个函数对象是一个未指定类型T的函数对象，这个函数对象的 std::is_bind_expression<T>::value == true；这个函数对象包含以下成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1.</span> 对象成员<br> 一个由std::forward&lt;F&gt;(f)构造而来的std::decay&lt;F&gt;::type类型的对象，一个对象的每一个参数类型都是由std::forward&lt;Arg_i&gt;(arg_i)构造而来的std::decay&lt;Arg_i&gt;::type。简单来说，std::decay&lt;F&gt;::type对象保存了调用std::bind时传递过来的f参数，而若干个std::decay&lt;Arg_i&gt;::type则保存了传递过来的args参数（一个std::decay&lt;Arg_i&gt;::type保存一个args）。<br><span class="hljs-number">2.</span> 构造函数<br> 如果T的所有对象成员都是可拷贝的，则它自身也是可拷贝的；如果它的所有对象成员都是可移动构造的，则它自身也是可移动构造的。<br><span class="hljs-number">3.</span> 成员类型 result_type（从C++<span class="hljs-number">17</span>开始result_type已经被弃用）<br>·如果F是函数指针或者成员函数指针，result_type就是F的返回值类型<br>·如果F是一个拥有（或者说定义了）result_type的类类型，那么T的result_type就是F::result_type，即使result_type已经在T中被定义过<br><span class="hljs-number">4.</span> 成员函数 <span class="hljs-built_in"><span class="hljs-keyword">operator</span></span>()<br> 这是最应该了解的，因为在实际使用过程中，我们调用std::bind得到的返回值就是用来作为函数调用的。<br> bind的返回值T，假设我们这样调用：<span class="hljs-built_in">g</span>(a1, a2, a3, … ai); 此时g内部保存的std::decay&lt;F&gt;::type类型的对象将被调用, 它将会按照如下的方式来为a1, a2, …, ai 绑定值。<br> · 如果调用bind时指定的是reference_wrapper&lt;T&gt;类型的，比如在调用bind时使用了std::ref 或者 std::cref来包装args，那么调用g内部的这个对象时，对应参数会以T&amp;类型传入std::decay&lt;F&gt;::type类型的对象.<br> · 如果在创建g时，使用了嵌套的bind，即g = <span class="hljs-built_in">bind</span>(fn, args…)的参数列表args中，存在某个arg：使得std::is_bind_expression&lt;<span class="hljs-keyword">decltype</span>(arg)&gt;::value == <span class="hljs-literal">true</span>, 那么这个嵌套的bind表达式会被立即调用，其返回值会被传给ret里的_MyFun作为参数(也就是说嵌套的bind返回值会被当做ret调用时的参数)， 如果嵌套的bind里用到了占位符placeholder, 这些placeholder将会从ret的调用参数<span class="hljs-built_in">ret</span>(a1, a2, … ai)中对应位置选择.<br> · 如果在创建g时，使用了占位符placeholders, 即 g = <span class="hljs-built_in">bind</span>(fn, arg1, arg2, …, _1, _2, …), (对于_1, _2…, 有std::is_placeholder&lt;T&gt;::value != <span class="hljs-number">0</span>). 那么a1, a2, …, ai会以转发的形式forward&lt;ai&gt;(ai)传递给_MyFun, a1对应_1, a2对应_2, 以此类推.<br> 否则，ret内部保存的args，即上文提到的_Mybargs(bind调用时绑定的参数们)将被以左值的形式传给_MyFun以完成调用，这些参数和g有相同cv限定属性.<br> 如果<span class="hljs-built_in">g</span>(a1, a2, …, ai)中，有哪些ai没有匹配任何的placeholders，比如在调用bind时，placeholder只有_1, 而<span class="hljs-built_in">g</span>(a1, a2, a3), 那么a2, a3就是没有匹配的，没有被匹配的参数将被求值，但是会被丢弃。<br> 如果g被指定为<span class="hljs-built_in"><span class="hljs-keyword">volatile</span></span>(<span class="hljs-keyword">volatile</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">volatile</span>)，结果是未定义的。<br></code></pre></td></tr></table></figure><h2 id="4-类成员函数回调"><a href="#4-类成员函数回调" class="headerlink" title="4 类成员函数回调"></a>4 类成员函数回调</h2><p>在c++中，常用的回调函数场景是，在一个类A中，有一个普通成员函数a,在类B中，有一个普通成员函数b,在b中，想要回调函数a，这才是c++回调函数的正确打开方式。</p><p>先上一段代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::placeholders;<br> <br><span class="hljs-keyword">typedef</span> std::function&lt;<span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)&gt; Fun;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,Fun f)</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-built_in">f</span>(a,<span class="hljs-number">2</span>);<br>        &#125;<br>&#125;;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">callback</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>        cout&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot;+&quot;</span>&lt;&lt;b&lt;&lt;<span class="hljs-string">&quot;=&quot;</span>&lt;&lt;a+b&lt;&lt;endl;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bind</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        Fun fun=std::<span class="hljs-built_in">bind</span>(&amp;Test::callback,<span class="hljs-keyword">this</span>,_1,_2);<br>B b;<br>b.<span class="hljs-built_in">call</span>(<span class="hljs-number">1</span>,fun);<br>&#125;<br> <br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Test test;<br>test.<span class="hljs-built_in">bind</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的程序中，Test类中的bind函数调用B类中的call函数，b中的call函数又反过来回调Test类中的callback函数。记住function和bind都是c++11标准函数，编译的时候要加-std=c++11。</p><p>在分析上面程序之前，先介绍一下两个辅助函数，分别是bind函数和function函数，这两个函数之前是boost函数成员，现在加入到c++11标准中，使用更加方便。</p><h3 id="bind函数"><a href="#bind函数" class="headerlink" title="bind函数"></a>bind函数</h3><p>定义在头文件functional中。可以看成是对一个函数的改造器，可以借助于集合的观点来说（尽管可能没这回事），可以将bind函数看作是返回一个子函数。这个子函数可以是bind绑定的函数的子集，也可以是本身。</p><p> 一般常用语法是： newFunName=bind(oldFunName,arg_list);</p><p>bind函数返回一个新的函数对象。其中bind第一个参数是oldFunName,它是待绑定的函数名，arg_list是oldFunName的参数列表。注意，这个参数列表是旧函数的参数列表，前面提到，返回的是子函数。我们可以随便给子函数定几个参数，但是肯定不能多于bind所绑定的原函数的参数个数。举个例子：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//g</span>是一个有两个参数的可调用对象<br>auto g=bind(f,a,b,_2,c,_1);<br><span class="hljs-regexp">//</span>其中f是具有<span class="hljs-number">5</span>个参数的函数<br><span class="hljs-regexp">//</span>当我们调用g(x,y)时，实际调用的是f(a,b,y,c,x)<br></code></pre></td></tr></table></figure><p>在这个示例中，我们可能要调用f函数，并传入5个参数，但是我们现在调用g(x,y)，只要传入两个参数，同样能达到这个效果。当然，我费这么多事其实肯定不是为了省几个参数，主要还是为了将一个函数转化成一个可以作为回调的函数指针，可以看成是原函数指针的别名。</p><p>上面出现的_1，_2是它的占位符，bind最多可以使用9个占位符。这个占位符命名在std的placeholders中，使用时，要使用using std::placeholders.</p><h3 id="function函数"><a href="#function函数" class="headerlink" title="function函数"></a>function函数</h3><p> function是一个函数对象的<code>容器</code>。</p><p>如function&lt;int(int,int)&gt; fun;  fun是一个函数模板，可以接受两个int型参数，并返回一个int型参数。平时可以将它赋值给一个函数指针。</p><p>例如上面的回调函数： Fun fun=std::bind(&amp;Test::callback,this,_1,_2);</p><p>其中bind用于绑定一个Test类的callback函数，它有两个参数，在这里，因为它是一个类成员函数，中间传入一个this指针，另外两个_1和_2则是它的两个参数。bind返回一个函数指针，将它赋给fun,fun作为一个函数容器，容纳bind函数返回的临时函数指针。 这样就成功的将fun作为一个函数参数的别名，可以用于传给回调函数了。</p><p>关于bind和function函数，再举一个例子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-keyword">typedef</span> std::function&lt;<span class="hljs-built_in"><span class="hljs-keyword">void</span></span> ()&gt; fp;  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">g_fun</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    cout&lt;&lt;<span class="hljs-string">&quot;g_fun()&quot;</span>&lt;&lt;endl;  <br>&#125;  <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>  </span><br><span class="hljs-class">&#123;</span>  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">A_fun_static</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function">    </span>&#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;A_fun_static()&quot;</span>&lt;&lt;endl;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">A_fun</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function">    </span>&#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;A_fun()&quot;</span>&lt;&lt;endl;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">A_fun_int</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span>  </span><br><span class="hljs-function">    </span>&#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;A_fun_int() &quot;</span>&lt;&lt;i&lt;&lt;endl;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//非静态类成员，因为含有this指针，所以需要使用bind  </span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function">    </span>&#123;  <br>        fp fp1=std::<span class="hljs-built_in">bind</span>(&amp;A::A_fun,<span class="hljs-keyword">this</span>);  <br>        <span class="hljs-built_in">fp1</span>();  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init2</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-keyword">typedef</span> std::function&lt;<span class="hljs-built_in"><span class="hljs-keyword">void</span></span> (<span class="hljs-keyword">int</span>)&gt; fpi;  <br>        <span class="hljs-comment">//对于参数要使用占位符 std::placeholders::_1  </span><br>        fpi f=std::<span class="hljs-built_in">bind</span>(&amp;A::A_fun_int,<span class="hljs-keyword">this</span>,std::placeholders::_1);  <br>        <span class="hljs-built_in">f</span>(<span class="hljs-number">5</span>);  <br>    &#125;  <br>&#125;;  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-comment">//绑定到全局函数  </span><br>    fp f2=<span class="hljs-built_in">fp</span>(&amp;g_fun);  <br>    <span class="hljs-built_in">f2</span>();  <br>  <br>    <span class="hljs-comment">//绑定到类静态成员函数  </span><br>    fp f1=<span class="hljs-built_in">fp</span>(&amp;A::A_fun_static);  <br>    <span class="hljs-built_in">f1</span>();  <br>  <br>    <span class="hljs-built_in">A</span>().<span class="hljs-built_in">init</span>();  <br>    <span class="hljs-built_in">A</span>().<span class="hljs-built_in">init2</span>();  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-注意"><a href="#5-注意" class="headerlink" title="5 注意"></a>5 注意</h2><p>如可调用 (Callable) 中描述，<font color=#ff0000><code>调用指向非静态成员函数指针或指向非静态数据成员指针时，首参数必须是引用或指针</code></font>（可以包含智能指针，如 std::shared_ptr 与 std::unique_ptr），指向将访问其成员的对象。 </p><p>所以在调用类的成员函数的时候首参必须是this</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/afei__/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">81985937</span><br>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/hyp1977/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">51784520</span><br>https:<span class="hljs-regexp">//</span>en.cppreference.com<span class="hljs-regexp">/w/</span>cpp<span class="hljs-regexp">/utility/</span>functional/bind<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>c11</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unique_ptr和shared_ptr及weak_ptr的使用</title>
    <link href="/2021/08/09/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/11unique_ptr%E5%92%8Cshared_ptr%E5%8F%8Aweak_ptr%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/08/09/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/11unique_ptr%E5%92%8Cshared_ptr%E5%8F%8Aweak_ptr%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-unique-ptr"><a href="#1-unique-ptr" class="headerlink" title="1. unique_ptr"></a>1. unique_ptr</h1><p><a href="https://www.cnblogs.com/5iedu/p/11619357.html">https://www.cnblogs.com/5iedu/p/11619357.html</a></p><h2 id="1-1-初始化方式"><a href="#1-1-初始化方式" class="headerlink" title="1.1 初始化方式"></a>1.1 初始化方式</h2><ol><li>直接初始化<figure class="highlight maxima"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">unique</span>&lt;T&gt; myPtr(<span class="hljs-built_in">new</span> T);  //ok。但不能通过隐式转换来构造，如<span class="hljs-built_in">unique</span>&lt;T&gt; myPtr = <span class="hljs-built_in">new</span> T()。因为unique_ptr构造函数被声明为<span class="hljs-built_in">explicit</span>。<br></code></pre></td></tr></table></figure></li><li>移动构造<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">unique</span>&lt;T&gt; myOtherPtr = <span class="hljs-built_in">std</span>::move(myPtr);但不允许复制构造，如<span class="hljs-built_in">unique</span>&lt;T&gt; myOther = myPtr; 因为<span class="hljs-built_in">unique</span>是个只移动类型。<br></code></pre></td></tr></table></figure></li><li>通过make_unique构造<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts">unique<span class="hljs-params">&lt;T&gt;</span> myPtr = std::make_unique<span class="hljs-params">&lt;T&gt;</span>(); <span class="hljs-comment">//C++14支持的语法。但是make_都不支持添加删除器，或者初始化列表。</span><br></code></pre></td></tr></table></figure></li><li>通过reset重置<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">如std::unique_ptr up; up.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">T</span>());<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-2-指定删除器"><a href="#1-2-指定删除器" class="headerlink" title="1.2 指定删除器"></a>1.2 指定删除器</h2><ol><li><p>unique_ptr&lt;T,D&gt;  u1(p,d);删除器是unique_ptr类型的组成部分，可是普通函数指针或lambda表达式。注意，当指定删除器时需要同时指定其类型，即D不可省略。</p></li><li><p>使用默认的deleter时，unique_ptr对象和原始指针的大小是一样的。当自定义deleter时，如果deleter是函数指针，则unique_ptr对象的大小为8字节。对于函数对象的deleter，unique_ptr对象的大小依赖于存储状态的多少，无状态的函数对象（如不捕获变量的lambda表达式），其大小为4字节。</p></li></ol><h2 id="1-3-源码分析"><a href="#1-3-源码分析" class="headerlink" title="1.3 源码分析"></a>1.3 源码分析</h2><ol><li>unique_ptr的构造函数被声明为explicit，禁止隐式类型转换的行为。原因如下：<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts">①可减少误将智能指针指向栈对象的情况。如unique_ptr<span class="hljs-params">&lt;int&gt;</span> ui = <span class="hljs-variable">&amp;i</span>;其中的i为栈变量。<br>②可避免将一个普通指针传递给形参为智能指针的函数。假设，如果允许将裸指针传给void foo(std::unique_ptr<span class="hljs-params">&lt;T&gt;</span>)函数，则在函数结束后会因形参超出作用域，裸指针将被delete的误操作。<br></code></pre></td></tr></table></figure></li><li>unique_ptr的拷贝构造和拷贝赋值均被声明为delete。因此无法实施拷贝和赋值操作，但可以移动构造和移动赋值。</li><li>删除器是unique_ptr类型的一部分。默认为std::default_delete，内部是通过调用delete来实现。</li><li>unique_ptr可以指向数组，并重载了operator []运算符。如unique_ptr&lt;int[]&gt; ptr(new int[10]); ptr[9]=9;但建议使用使作std::array、std::vector或std::string来代替这种原始数组。</li></ol><h2 id="1-4-常用操作"><a href="#1-4-常用操作" class="headerlink" title="1.4 常用操作"></a>1.4 常用操作</h2><ol><li>get()：返回unique_ptr中保存的裸指针</li><li>reset()：重置unique_ptr。</li><li>release()：放弃对指针的控制权，返回裸指针，并将unique_ptr自身置空。通常用来初始化另一个智能指针。</li><li>swap(q)：交换两个智能指针所指向的对象。</li></ol><h2 id="1-5-基本用法示例"><a href="#1-5-基本用法示例" class="headerlink" title="1.5  基本用法示例"></a>1.5  基本用法示例</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#include &lt;iostream&gt;</span><br><span class="hljs-comment">#include &lt;vector&gt;</span><br><span class="hljs-comment">#include &lt;memory&gt;  //for smart pointer</span><br><br>using namespace std;<br><br>class Widget &#123;&#125;;<br><br><span class="hljs-regexp">//</span>返回值RVO优化：<br>unique_ptr&lt;int&gt; <span class="hljs-keyword">func</span>()<br>&#123;<br>    unique_ptr&lt;int&gt; up(new int(<span class="hljs-number">100</span>));<br>    return  up; <span class="hljs-regexp">//u</span>p是个左值，调用拷贝构造给返回值？ No。<br>                <span class="hljs-regexp">//</span>C++标准要求当RVO被允许时，要么消除拷贝，要么隐式地把std::move用在要返回的局部<br>                <span class="hljs-regexp">//</span>对象上去。这里编译器会直接在返回值位置创建up对象。因此根本不会发生拷贝构造，<br>                <span class="hljs-regexp">//u</span>nique_ptr本身也不能被拷贝构造。<br><br>    <span class="hljs-regexp">//</span>return unique_ptr&lt;int&gt;(new int(<span class="hljs-number">100</span>)); <span class="hljs-regexp">//</span>右值，被移动构造。<br>&#125;<br><br>void foo(std::unique_ptr&lt;int&gt; ptr)<br>&#123;<br>&#125;<br><br>void myDeleter(int* p)<br>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;invoke deleter(void* p)&quot;</span>&lt;&lt; endl;<br>    <span class="hljs-keyword">delete</span> p;<br>&#125;<br><br>int main()<br>&#123;<br>    <span class="hljs-regexp">//</span><span class="hljs-number">1</span>. unique_ptr的初始化<br>    <span class="hljs-regexp">//</span><span class="hljs-number">1.1</span> 通过裸指针创建unique_ptr（由于unique_ptr的构造函数是explicit的，必须使用直接初始化，不能做隐式类型转换）<br>    std::unique_ptr&lt;Widget&gt; ptr1(new Widget);      <span class="hljs-regexp">//</span>ok; 直接初始化<br>    <span class="hljs-regexp">//</span>std::unique_ptr&lt;Widget&gt; ptr1 = new Widget(); <span class="hljs-regexp">//</span>error。不能隐式将Widget*转换为unqiue_ptr&lt;Widget&gt;类型。<br><br>    std::unique_ptr&lt;int[]&gt; ptr2(new int[<span class="hljs-number">10</span>]); <span class="hljs-regexp">//</span>指向数组<br><br>    <span class="hljs-regexp">//</span><span class="hljs-number">1.2</span> 通过移动构造<br>    <span class="hljs-regexp">//</span>std::unique_ptr&lt;Widget&gt; ptr3 = ptr1;    <span class="hljs-regexp">//</span>error，unique_ptr是独占型，不能复制构造<br>    std::unique_ptr&lt;Widget&gt; ptr3 = std::move(ptr1);  <span class="hljs-regexp">//</span>ok，unique_ptr是个只移动类型，可以移动构造<br>    auto ptr4 = std::move(ptr3);     <span class="hljs-regexp">//</span>ok， ptr4为unique_ptr&lt;Widget&gt;类型<br><br>    <span class="hljs-regexp">//</span><span class="hljs-number">1.3</span> 通过std::make_unique来创建<br>    auto ptr5 = std::make_unique&lt;int&gt;(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-regexp">//</span>auto ptr6 = std::make_unique&lt;vector&lt;int&gt;&gt;(&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;); <span class="hljs-regexp">//</span>error，make_unique不支持初始化列表<br>    auto initList = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> &#125;;<br>    auto ptr6 = std::make_unique&lt;vector&lt;int&gt;&gt;(initList);<br><br>    <span class="hljs-regexp">//</span><span class="hljs-number">2</span>. 传参和返回值<br>    int* px = new int(<span class="hljs-number">0</span>);<br>    <span class="hljs-regexp">//</span>foo(px); <span class="hljs-regexp">//</span>error，px无法隐式转为unique_ptr。可防止foo函数执行完毕后，px会自动释放。<br>    <span class="hljs-regexp">//</span>foo(ptr5); <span class="hljs-regexp">//</span>error，智能指针不能被拷贝。因此，可以将foo的形参声明为引用，以避免所有权转移<br>    foo(std::move(ptr5)); <span class="hljs-regexp">//</span>ok，通过移动构造<br><br>    auto ptr7 = <span class="hljs-keyword">func</span>(); <span class="hljs-regexp">//</span>移动构造<br><br>    <span class="hljs-regexp">//</span><span class="hljs-number">3</span>.常用操作<br>    std::unique_ptr&lt;Widget&gt; upw1; <span class="hljs-regexp">//</span>空的unique_ptr<br>    upw1.reset(new Widget);<br>    std::unique_ptr&lt;Widget&gt; upw2(new Widget);<br><br>    cout &lt;&lt;<span class="hljs-string">&quot;before swap...&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;upw1.get() = &quot;</span> &lt;&lt; hex &lt;&lt; upw1.get() &lt;&lt; endl;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;upw2.get() = &quot;</span> &lt;&lt; hex &lt;&lt; upw2.get() &lt;&lt; endl;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;after swap...&quot;</span> &lt;&lt; endl;<br>    upw1.swap(upw2); <span class="hljs-regexp">//</span>交换指针所指的对象<br>    cout &lt;&lt; <span class="hljs-string">&quot;upw1.get() = &quot;</span> &lt;&lt; hex &lt;&lt; upw1.get() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;upw2.get() = &quot;</span> &lt;&lt; hex &lt;&lt; upw2.get() &lt;&lt; endl;<br><br>    <span class="hljs-regexp">//u</span>pw1.release(); <span class="hljs-regexp">//</span>release放弃了控制权不会释放内存，丢失了指针<br>    Widget* pw = upw1.release();<span class="hljs-regexp">//</span>放弃对指针的控制<br>    <span class="hljs-keyword">delete</span> pw; <span class="hljs-regexp">//</span>需手动删除<br><br>    <span class="hljs-keyword">if</span> (upw1) &#123;  <span class="hljs-regexp">//u</span>nique_ptr重载了operator bool()<br>        cout &lt;&lt; <span class="hljs-string">&quot;upw1 owns resourse&quot;</span> &lt;&lt; endl;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;upw1 lost resourse&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    upw1.reset(upw2.release()); <span class="hljs-regexp">//</span>转移所有权<br>    cout &lt;&lt; <span class="hljs-string">&quot;upw1.get() = &quot;</span> &lt;&lt; hex &lt;&lt; upw1.get() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;upw2.get() = &quot;</span> &lt;&lt; hex &lt;&lt; upw2.get() &lt;&lt; endl;<br><br>    <span class="hljs-regexp">//u</span>pw1 = nullptr; <span class="hljs-regexp">//</span>释放upw1指向的对象，并将upw1置空<br>    <span class="hljs-regexp">//u</span>pw1.reset(nullptr);<br><br>    <span class="hljs-regexp">//</span><span class="hljs-number">4</span>.unique_ptr的大小<br>    std::unique_ptr&lt;int,decltype(&amp;myDeleter)&gt; upd1(new int(<span class="hljs-number">0</span>), myDeleter); <span class="hljs-regexp">//</span>自定义删除器<br>    auto del = [](auto* p) &#123;<span class="hljs-keyword">delete</span> p; &#125;;<br>    std::unique_ptr&lt;int, decltype(del)&gt; upd2(new int(<span class="hljs-number">0</span>), del); <br>    cout &lt;&lt; sizeof(upw1) &lt;&lt; endl; <span class="hljs-regexp">//</span><span class="hljs-number">4</span>字节，默认删除器<br>    cout &lt;&lt; sizeof(upd1) &lt;&lt; endl; <span class="hljs-regexp">//</span><span class="hljs-number">8</span>字节<br>    cout &lt;&lt; sizeof(upd2) &lt;&lt; endl; <span class="hljs-regexp">//</span><span class="hljs-number">4</span>字节<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-6-使用场景"><a href="#1-6-使用场景" class="headerlink" title="1.6 使用场景"></a>1.6 使用场景</h2><h3 id="1-6-1-作为工厂函数的返回类型"><a href="#1-6-1-作为工厂函数的返回类型" class="headerlink" title="1.6.1 作为工厂函数的返回类型"></a>1.6.1 作为工厂函数的返回类型</h3><p>　　1. 工厂函数负责在堆上创建对象，但是调用工厂函数的用户才会真正去使用这个对象，并且要负责这个对象生命周期的管理。所以使用unique_ptr是最好的选择。</p><p>　　2. unique_ptr转为shared_ptr很容易，作为工厂函数本身并不知道用户希望所创建的对象的所有权是专有的还是共享的，返回unique_ptr时调用者可以按照需要做变换。</p><h3 id="1-6-2-PImpl机制：（Pointer-to-Implemention）"><a href="#1-6-2-PImpl机制：（Pointer-to-Implemention）" class="headerlink" title="1.6.2 PImpl机制：（Pointer to Implemention）"></a>1.6.2 PImpl机制：（Pointer to Implemention）</h3><p>　　1. 操作方法</p><p>　　（1）将曾经放在主类中的数据成员放到实现类中去，然后通过指针间接地访问那些数据成员。此时主类中存在只有声明而没有定义的类型（也叫非完整类型），如Widget::Impl。</p><p>　　（2）在实现类中，动态分配和归还原那些原本应在主类中定义的那数据成员对象。即将这个数据成员放到实现类中定义（动态分配其内存）</p><p>　　2. 注意事项</p><p>　　（1）PImpl机制通过降低类的客户和类实现者之间的依赖性，减少了构建遍数。</p><p>　　（2）对于采用std::unique_ptr来实现的PImpl指针，须在类的头文件中声明特殊成员函数，但在实现文件中实现它们（注意，不能直接在头文件中实现，具体原因见《编程实验》中的说明）。如，必须同时声明并实现类的析构函数。再由于自定义了析构函数，编译器不再提供默认的移动构造和移动赋值函数，如果需要这些函数，则也必须在头文件中声明，并在实现类中去实现。</p><p>　　（3）上述建议仅适用于std::unique_ptr，但并不适用于std::shared_ptr。因为删除器在unique_ptr中是其类型的一部分，而在shared_ptr中则不是。声明对象时，unique_ptr<T>支持T是个非完整类型，但在析构时T必须己经是个完整的类型。unique_ptr析构时会先判断T是否为完整类型再调用delete删除其所指对象，但shared_ptr<T>则不会。</p><h3 id="16-3-场景实验"><a href="#16-3-场景实验" class="headerlink" title="16.3 场景实验"></a>16.3 场景实验</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#ifndef  _WIDGET_H_</span><br><span class="hljs-comment">#define _WIDGET_H_</span><br><span class="hljs-comment">#include &lt;memory&gt;</span><br><br><span class="hljs-regexp">//</span><span class="hljs-number">1</span>.传统的做法<br><span class="hljs-regexp">//</span>问题：数据成员会导致Widget.h文件必须include &lt;string&gt;<br><span class="hljs-regexp">//</span>      &lt;vector&gt;和gadget.h。当客户包含Widget.h里，会增加编译时间，而且<br><span class="hljs-regexp">//</span>      如果其中的某个头文件(如Gadget.h)发生改变，则Widget的客户必须重新编译！<br><span class="hljs-regexp">//</span>class Widget<br><span class="hljs-regexp">//</span>&#123;<br><span class="hljs-regexp">//</span>    std::string name;<br><span class="hljs-regexp">//</span>    std::vector&lt;double&gt; data;<br><span class="hljs-regexp">//</span>    Gadget g1, g2, g3;<span class="hljs-regexp">//</span> <span class="hljs-regexp">//</span>自定义类型，位于gadget.h。<br><span class="hljs-regexp">//</span>public:<br><span class="hljs-regexp">//</span>    Widget();<br><span class="hljs-regexp">//</span>&#125;;<br><br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>. 采用PImpl手法<br>class Widget<br>&#123;<br>    <span class="hljs-regexp">//</span>声明实现结构体以及指向它的指针<br>    struct Impl; <span class="hljs-regexp">//</span>注意只有声明，没实现。是个非完整类型。<br>    std::unique_ptr&lt;Impl&gt; pImpl; <span class="hljs-regexp">//</span>使用智能指针而非裸指针。这里声明一个指针非完整类型的指针。注意针对非完整<br>                                 <span class="hljs-regexp">//</span>类型，可以做的事情极其有限。由于unique_ptr中会将删除器作为其类型的一部分<br>                                 <span class="hljs-regexp">//</span>因此，但unique_ptr析构被调用时，当<span class="hljs-keyword">delete</span>其所指对象时，会先判断T是否是个完<br>                                 <span class="hljs-regexp">//</span>整类型。如果不是，则会报错。因此必须在pImpl被析构前，确保Impl被定义（即是个完整类型）<br>                                 <span class="hljs-regexp">//</span>因此，使用unique_ptr&lt;非完整类型时&gt;，必须为该类同时定义析构函数！具体原因见后面的分析。<br><br>    <span class="hljs-regexp">//</span>std::shared_ptr&lt;Impl&gt; pImpl; <span class="hljs-regexp">//</span>由于删除器不是shared_ptr类型的组成部分。当pImpl被析构时，不会判断T是否为完整类型。<br>                                   <span class="hljs-regexp">//</span>因此，不要求Widget必须自定义析构函数。<br><br>public:<br>    Widget();<br>    ~Widget(); <span class="hljs-regexp">//</span>Impl是个非完整类型，这里必须声明析构函数，并在Widget.cpp中实现它。<br>                <span class="hljs-regexp">//</span>注意，不能在该文件中实现，因为此时unique_ptr看到的Impl是个非完整类型，unique_ptr内部要求<span class="hljs-keyword">delete</span>前，其<br>                <span class="hljs-regexp">//</span>其指向的必须是个完整类的指针。<br><br>    <span class="hljs-regexp">//</span>移动构造和移动赋值（由于自定义了析构函数，所以编译器不再提供默认的移动构造和移动赋值函数，这里需手动填加）<br>    Widget(Widget&amp;&amp; rhs); <span class="hljs-regexp">//</span>只能声明，须放在.cpp中去实现。编译器会在move构造函数内抛出异常的事件中生成析构pImpl代码，<br>                          <span class="hljs-regexp">//</span>而此处Impl为非完整类型。<br>    Widget&amp; operator=(Widget&amp;&amp; rhs); <span class="hljs-regexp">//</span>只能声明，须放在.cpp中去实现。因为移动赋值pImpl时，需要先析构pImpl所指对象，但<br>                                     <span class="hljs-regexp">//</span>此时仍为非完整类型。<br><br>    <span class="hljs-regexp">//</span>让Widget支持复制操作。注意unique_ptr不可复制<br>    Widget(const Widget&amp; rhs);  <span class="hljs-regexp">//</span>仅声明<br>    Widget&amp; operator=(const Widget&amp; rhs); <span class="hljs-regexp">//</span>仅声明<br>&#125;;<br><br><span class="hljs-comment">#endif // ! _WIDGET_H_</span><br><br>Widget.h<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Widget.h&quot;</span></span><br><br><span class="hljs-comment">//将对string和vector和Gadget头文件的依赖从Wigdget.h转移动Wigdget.cpp文件中。如此，Widget类的使用者</span><br><span class="hljs-comment">//只需依赖Widget.h，而把复杂的依赖关系留给Widget的实现者(Widget.cpp)去处理</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Gadget</span> &#123;</span>&#125;; <span class="hljs-comment">//本应#include &quot;Gardget.h&quot;，但为了简明起见，就直接在这里声明该类</span><br><br><span class="hljs-comment">//Widget::Impl的实现(包括此前在Widget中的数据成员)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Widget</span>:</span>:Impl<br>&#123;<br>    std::string name;<br>    std::vector&lt;<span class="hljs-keyword">double</span>&gt; data;<br>    Gadget g1, g2, g3;<br>&#125;;<br><br>Widget::<span class="hljs-built_in">Widget</span>():<span class="hljs-built_in">pImpl</span>(std::make_unique&lt;Impl&gt;())<br>&#123;&#125;<br><br><span class="hljs-comment">//注意：析构函数必须在Widget::Impl类之后定义。因为此时调用~Widget时，会调用unique_ptr的析构函数</span><br><span class="hljs-comment">//而unique_ptr中会调用delete删除其指向的对象，由于~Widget定义在Widget::Impl之后，因此这时看到的</span><br><span class="hljs-comment">//Impl是个完整的类，delete前通过了unique_ptr内部完整类型的判断！</span><br>Widget::~<span class="hljs-built_in">Widget</span>() &#123;&#125;<span class="hljs-comment">//或Widget::~Widget = default;</span><br><br>Widget::<span class="hljs-built_in">Widget</span>(Widget&amp;&amp; rhs) = <span class="hljs-keyword">default</span>;<br>Widget&amp; Widget::<span class="hljs-keyword">operator</span>=(Widget&amp;&amp; rhs) = <span class="hljs-keyword">default</span>;<br><br><span class="hljs-comment">//make_unique(Ts&amp;&amp;... params)== std::unique_ptr&lt;T&gt;(new T(std::forward&lt;Ts&gt;(params)...));</span><br>Widget::<span class="hljs-built_in">Widget</span>(<span class="hljs-keyword">const</span> Widget&amp; rhs):<span class="hljs-built_in">pImpl</span>(std::make_unique&lt;Impl&gt;(*rhs.pImpl))<span class="hljs-comment">//深拷贝！</span><br>&#123;<br>&#125;<br><br>Widget&amp; Widget::<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> Widget&amp; rhs)<br>&#123;<br>    *pImpl = *rhs.pImpl; <span class="hljs-comment">//深拷贝！复制两个指针所指向的内容。pImpl本身是只移动类型</span><br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;iostream&gt;<br>#<span class="hljs-keyword">include</span> &lt;memory&gt;<br>#<span class="hljs-keyword">include</span> &lt;functional&gt;<br>#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Widget.h&quot;</span><br>using namespace std;<br><br>enum <span class="hljs-keyword">class</span> InvestmentType &#123;itSock, itBond, itRealEstate&#125;;<br><span class="hljs-keyword">class</span> Investment<span class="hljs-comment">//投资</span><br>&#123;<br>public:<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-constructor">Investment()</span> &#123;&#125; <span class="hljs-comment">//声明为virtual,以便正确释放子类对象</span><br>&#125;;<br><br><span class="hljs-keyword">class</span> Stock : public Investment &#123;&#125;;<span class="hljs-comment">//股票</span><br><span class="hljs-keyword">class</span> Bond : public Investment &#123;&#125;;  <span class="hljs-comment">//债券</span><br><span class="hljs-keyword">class</span> RealEstate : public Investment &#123;&#125;; <span class="hljs-comment">//不动产</span><br><br>void make<span class="hljs-constructor">LogEntry(Investment<span class="hljs-operator">*</span> <span class="hljs-params">pInvmt</span>)</span> &#123;&#125;<br><br><span class="hljs-comment">//工厂函数</span><br>template&lt;typename... Ts&gt;<br>auto make<span class="hljs-constructor">Investment(Ts<span class="hljs-operator">&amp;&amp;</span><span class="hljs-operator">...</span> <span class="hljs-params">params</span>)</span> <span class="hljs-comment">//返回unique_ptr智能指针</span><br>&#123;<br>    <span class="hljs-comment">//自定义deleter</span><br>    auto delInvmt = <span class="hljs-literal">[]</span>(Investment* pInvmt) <span class="hljs-comment">//父类指针</span><br>    &#123;<br>        make<span class="hljs-constructor">LogEntry(<span class="hljs-params">pInvmt</span>)</span>;<br>        delete pInvmt; <span class="hljs-comment">//delete父类指针，所有析构函数须声明为virtual</span><br>    &#125;;<br><br>    std::unique_ptr&lt;Investment, decltype(delInvmt)&gt; p<span class="hljs-constructor">Inv(<span class="hljs-params">nullptr</span>, <span class="hljs-params">delInvmt</span>)</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span><span class="hljs-comment">/*a Stock Object should be created*/</span>) &#123;<br>        pInv.reset(<span class="hljs-keyword">new</span> <span class="hljs-constructor">Stock(<span class="hljs-params">std</span>::<span class="hljs-params">forward</span>&lt;Ts&gt;(<span class="hljs-params">params</span>)</span>...)); <span class="hljs-comment">//原始指针无法隐式转为unique_ptr，使用reset重置所有权</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span><span class="hljs-comment">/*a Bond Object should be created*/</span>)<br>    &#123;<br>        pInv.reset(<span class="hljs-keyword">new</span> <span class="hljs-constructor">Bond(<span class="hljs-params">std</span>::<span class="hljs-params">forward</span>&lt;Ts&gt;(<span class="hljs-params">params</span>)</span>...));<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span><span class="hljs-comment">/*a RealEstate should be created*/</span>)<br>    &#123;<br>        pInv.reset(<span class="hljs-keyword">new</span> <span class="hljs-constructor">RealEstate(<span class="hljs-params">std</span>::<span class="hljs-params">forward</span>&lt;Ts&gt;(<span class="hljs-params">params</span>)</span>...));<br>    &#125;<br><br>    return pInv;<br>&#125;<br><br><br><span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span><br>&#123;<br>    <span class="hljs-comment">//1. unique_ptr作为工厂函数的返回值。</span><br>    std::shared_ptr&lt;Investment&gt; sp =  make<span class="hljs-constructor">Investment()</span>;  <span class="hljs-comment">//从std::unique_ptr转换到std::shared_ptr（从独占到共享的</span><br>                                                         <span class="hljs-comment">//转换简单而高效） </span><br><br>    <span class="hljs-comment">//2. PImpl手法的测试</span><br>    Widget w;  <span class="hljs-comment">//注意Widget的析构函数必须手动实现。否则，则当w析构时编译器会将默认的析构函数inline</span><br>               <span class="hljs-comment">//到这里来，但由于include widget.h在inline动作之前，此时编译器看到的是非完整类型的</span><br>               <span class="hljs-comment">//Impl类。因此Widget类中的unique_ptr析构时，delete前检查出是个非完整类指针，从而报错。</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-shared-ptr"><a href="#2-shared-ptr" class="headerlink" title="2. shared_ptr"></a>2. shared_ptr</h1><p><a href="https://www.cnblogs.com/5iedu/p/11622401.html">https://www.cnblogs.com/5iedu/p/11622401.html</a></p><h2 id="2-1-shared-ptr的基本用法"><a href="#2-1-shared-ptr的基本用法" class="headerlink" title="2.1 shared_ptr的基本用法"></a>2.1 shared_ptr的基本用法</h2><h3 id="2-1-1-与unique-ptr的比较"><a href="#2-1-1-与unique-ptr的比较" class="headerlink" title="2.1.1 与unique_ptr的比较"></a>2.1.1 与unique_ptr的比较</h3><table><thead><tr><th>比较</th><th>shared_ptr</th><th>unique_ptr</th><th>备注</th></tr></thead><tbody><tr><td>初始化</td><td>①shared_ptr<T> sp; sp.reset(new T());②shared_ptr<T> sp(new T());③shared_ptr<T> sp1 = sp; **//**<strong>拷贝构造</strong>④auto sp = make_shared<int>(10);</td><td>①unique_ptr<T> up; up.reset(new T());②unique_ptr<T> up(new T());③unique_ptr<T> up1 = std::move(up);**//**<strong>移动构造</strong>④auto up = make_unique<int>(10);</td><td>两者的构造函数将声明为<strong>explicit，即不允许隐式类型转换，</strong>如shared_ptr<int> sp = new int(10);</td></tr><tr><td>条件判断</td><td>如，if(sp){…}</td><td>如，if(up){…}</td><td>两都均<strong>重载operator bool()</strong></td></tr><tr><td>解引用</td><td>*sp</td><td>*up</td><td>解引用，获得它所指向的对象</td></tr><tr><td>-&gt;mem</td><td>sp-&gt;mem</td><td>up-&gt;mem</td><td>重载-&gt;运算符</td></tr><tr><td>get()</td><td>sp.get()</td><td>up.get()</td><td>返回智能指针中保存的裸指针，要小心使用。</td></tr><tr><td>p.swap(q)</td><td>sp.swap(q);</td><td>up.swap(q);</td><td>交换p和q指针</td></tr><tr><td>独有操作</td><td>①shared_ptr<T> p(q);//拷贝构造②p = q;//赋值③p.unique();若p.use_count()为1，返回true,否则返回false。④p.use_count()//返回强引用计数</td><td>①up=nullptr;释放up指向的对象，并将up置空。②up.release();//up<strong>放弃对指针的控制权，返回裸指针，并将up置空</strong>③up.reset();释放up指向的对象。 up.reset(q);其中q为裸指针。令up指向q所指对象。 up.reset(nullptr);置空</td><td>注意:①unique_ptr<strong>不可拷贝和赋值，但可以被移动</strong>。②release会切断unique_ptr和它原来管理的对象间的联系。<strong>通常用来初始化另一个智能指针</strong>。</td></tr></tbody></table><h3 id="2-1-2-指定删除器"><a href="#2-1-2-指定删除器" class="headerlink" title="2.1.2 指定删除器"></a>2.1.2 指定删除器</h3><p>　　1. shared_ptr<T> sp1(q, deleter1);与unique_ptr不同，<strong>删除器不是shared_ptr类型的组成部分</strong>。假设，shared_ptr<T> sp2(q,deleter2)，尽管sp1和sp2有着不同的删除器，但两者的类型是一致的，都可以被放入vector&lt;shared_ptr<T>&gt;类型的同一容器里。</p><p>　　2. 与std::unique_ptr不同，自定义删除器不会改变std::shared_ptr的大小。<strong>其始终是祼指针大小的两倍</strong>。</p><p>　　3. 当使用shared_ptr<strong>管理动态数组</strong>时，需要指定删除器。因为默认删除器不支持数组对象。如shared_ptr<int> sp(new int[10], std::default_delete&lt;**int[]**&gt;);</p><p>　　4. 删除器可以是普通函数、函数对象和lambda表达式等。默认的删除器为std::default_delete，其内部是通过delete来实现功能的。</p><h2 id="2-2-剖析std-shared-ptr"><a href="#2-2-剖析std-shared-ptr" class="headerlink" title="2.2 剖析std::shared_ptr"></a>2.2 剖析std::shared_ptr</h2><h3 id="2-2-1-std-shared-ptr的内存模型"><a href="#2-2-1-std-shared-ptr的内存模型" class="headerlink" title="2.2.1 std::shared_ptr的内存模型"></a>2.2.1 std::shared_ptr的内存模型</h3><img src="/2021/08/09/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/11unique_ptr%E5%92%8Cshared_ptr%E5%8F%8Aweak_ptr%E7%9A%84%E4%BD%BF%E7%94%A8/2.png" class=""><p>　　1. shared_ptr包含了<strong>一个指向对象的指针和一个指向控制块的指针</strong>。每一个由std::shared_ptr管理的对象都有一个<strong>控制块</strong>，它除了<strong>包含引用计数之外，还包含了自定义删除器的副本和分配器的副本以及其他附加数据</strong>。<br>　　2. 控制块的创建规则：</p><p>　　（1）<strong>std::make_shared总是创建一个控制块</strong>。</p><p>　　（2）从<strong>具备所有权的指针出发构造一个std::shared_ptr时，会创建一个控制块</strong>。（如std::unique_ptr转为shared_ptr时会创建控制块，因为unique_ptr本身不使用控制块，同时unique_ptr置空）</p><p>　　（3）<strong>当std::shared_ptr构造函数使用裸指针作为实参时，会创建一个控制块</strong>。这意味从同一个裸指针出发来构造不止一个std::shared_ptr时会创建多重的控制块，也意味着对象会被析构多次。如果想从一个己经拥有控制块的对象出发创建一个std::shared_ptr，可以传递一个shared_ptr或weak_ptr而非裸指针作为构造函数的实参，这样则不会创建新的控制块。</p><p>【经验】</p><p>　　①尽可能<strong>避免将裸指针传递给一个std::shared_ptr的构造函数</strong>，常用的替代手法是使用std::make_shared。</p><p>　　②如果必须将一个裸指针传递给shared_ptr的构造函数，就<strong>直接传递new运算符的结果，而非传递一个裸指针变量</strong>。如shared_ptr<Widget> spw (new Widget, logginDel);</p><p>　　③<strong>不要将this指针返回给shared_ptr</strong>。当希望将this指针托管给shared_ptr时，类需要继承自std::enable_shared_from_this，并且从shared_from_this()中获得shared_ptr指针。（具体见《enable_shared_from_this》部分的分析）</p><p>　　3. 引用计数（强引用计数）</p><p>　　（1）<strong>shared_ptr的构造函数会使该引用计数递增</strong>，而<strong>析构函数会使该计数递减</strong>。但移动构造时表示从一个己有的shared_ptr移动构造到一个新的shared_ptr。这意味着一旦新的shared_ptr产生后，原有的shared_ptr会被置空，其结果是引用计数没有变化。</p><p>　　（2）<strong>复制赋值同时执行两种操作</strong>（如sp1 和sp2是指向不同对象的shared_ptr，则sp1 = sp2时，将修改sp1使得其指向sp2所指的对象。而最初sp1所指向的对象的引用计数递减，同时sp2所指向的对象引用计数递增）</p><p>　　（3）reset函数，如果不带参数时，则引用计数减1。如果不带参数时，如sp.reset(p)则sp原来指向的对象引用计数减1，同时sp指向新的对象(p)</p><p>　　（4）<strong>如果实施一次递减后最后的引用计数变成0，即不再有shared_ptr指向该对象，则会被shared_ptr析构掉</strong>。</p><p>　　（5）引用计数的递增和递减是<strong>原子操作</strong>，即允许不同线程并发改变引用计数。</p><p>shared_ptr的陷阱分析</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span> <span class="hljs-comment">// for smart pointer</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Widget</span>&#123;</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(shared_ptr&lt;Widget&gt; sp)</span></span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">funcException</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">/*throw 1;*/</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125; <span class="hljs-comment">//假设该函数会抛出异常</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">demo</span><span class="hljs-params">(shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; sp, <span class="hljs-keyword">int</span> f)</span></span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//1. 陷阱：用同一裸指针创建多个shared_ptr</span><br>    <span class="hljs-comment">//1.1 错误做法</span><br>    <span class="hljs-keyword">auto</span> pw = <span class="hljs-keyword">new</span> Widget;<br>    <span class="hljs-function">std::shared_ptr&lt;Widget&gt; <span class="hljs-title">spw1</span><span class="hljs-params">(pw)</span></span>; <span class="hljs-comment">//强引用计数为1，为pw创建一个控制块</span><br>    <span class="hljs-comment">//std::shared_ptr&lt;Widget&gt; spw2(pw); //强引用计数为1，为pw创建另一个新的控制块，会导致多次析构</span><br><br>    <span class="hljs-keyword">auto</span> sp = <span class="hljs-keyword">new</span> Widget;<br>    <span class="hljs-built_in">func</span>(shared_ptr&lt;Widget&gt;(sp)); <span class="hljs-comment">//慎用裸指针，sp将在func结束后被释放！</span><br><br>    <span class="hljs-comment">//1.2 正确做法</span><br>    <span class="hljs-function">std::shared_ptr&lt;Widget&gt; <span class="hljs-title">spw3</span><span class="hljs-params">(spw1)</span></span>; <span class="hljs-comment">//ok，pw的强引用计数为2。使用与spw1同一个控制块。</span><br>    <span class="hljs-function">std::shared_ptr&lt;Widget&gt; <span class="hljs-title">spw4</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Widget)</span></span>; <span class="hljs-comment">//将new的结果直接传递给shared_ptr</span><br>    std::shared_ptr&lt;Widget&gt; spw5 = std::make_shared&lt;Widget&gt;(); <span class="hljs-comment">//强烈推荐的做法!</span><br>    <br>    <span class="hljs-comment">//2. 陷阱：在函数实参中创建shared_ptr</span><br>    <span class="hljs-comment">//2.1 shared_ptr与异常安全问题</span><br>    <span class="hljs-comment">//由于参数的计算顺序因编译器和调用约定而异。假定按如下顺序计算</span><br>    <span class="hljs-comment">//A.先前new int，然后funcException();</span><br>    <span class="hljs-comment">//B.假设恰好此时funcException产生异常。</span><br>    <span class="hljs-comment">//C.因异常出现shared_ptr还来不及创建，于是int内存泄露</span><br>    <span class="hljs-built_in">demo</span>(shared_ptr&lt;<span class="hljs-keyword">int</span>&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(<span class="hljs-number">100</span>)), <span class="hljs-built_in">funcException</span>());<br><br>    <span class="hljs-comment">//2.2 正确做法</span><br>    <span class="hljs-keyword">auto</span> p1 = std::make_shared&lt;<span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">demo</span>(p1, <span class="hljs-built_in">funcException</span>());<br><br>    <span class="hljs-comment">//3. 陷阱：shared_ptr的循环引用（应避免）（见第22课 weak_ptr）</span><br><br>    <span class="hljs-comment">//4. 删除器</span><br>    <span class="hljs-keyword">auto</span> deleter1 = [](Widget* pw) &#123;cout &lt;&lt; <span class="hljs-string">&quot;deleter1&quot;</span>&lt;&lt; endl; <span class="hljs-keyword">delete</span> pw; &#125;;<br>    <span class="hljs-keyword">auto</span> deleter2 = [](Widget* pw) &#123;cout &lt;&lt; <span class="hljs-string">&quot;deleter2&quot;</span>&lt;&lt; endl; <span class="hljs-keyword">delete</span> pw; &#125;;<br><br>    <span class="hljs-function">std::shared_ptr&lt;Widget&gt; <span class="hljs-title">pw1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Widget, deleter1)</span></span>;<br>    <span class="hljs-function">std::shared_ptr&lt;Widget&gt; <span class="hljs-title">pw2</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Widget, deleter2)</span></span>;<br><br>    <span class="hljs-function">std::shared_ptr&lt;Widget&gt; <span class="hljs-title">pw3</span><span class="hljs-params">(pw1)</span></span>;<br>    pw3.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> Widget); <span class="hljs-comment">//deleter恢复为默认的std::default_delete</span><br><br>    vector&lt;std::shared_ptr&lt;Widget&gt;&gt; vecs;<br>    vecs.<span class="hljs-built_in">emplace_back</span>(pw1);<br>    vecs.<span class="hljs-built_in">emplace_back</span>(pw2); <span class="hljs-comment">//pw1和pw2虽然有不同的删除器，但类型相同，可以放入同一容器内。</span><br><br>    <span class="hljs-comment">//5. 其它</span><br>    <span class="hljs-comment">//5.1 shared_ptr的大小</span><br>    cout &lt;&lt; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(spw1) &lt;&lt; endl;<span class="hljs-comment">//8</span><br>    cout &lt;&lt; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(pw1) &lt;&lt; endl; <span class="hljs-comment">//8</span><br>    <span class="hljs-comment">//5.2 shared_ptr管理动态数组（建议用std::array、std::vector取代）</span><br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">pArray1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>], [](<span class="hljs-keyword">int</span>* p) &#123;<span class="hljs-keyword">delete</span>[] p; &#125;)</span></span>; <span class="hljs-comment">//使用delete[]</span><br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">pArray2</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>], std::default_delete&lt;<span class="hljs-keyword">int</span>[]&gt;())</span></span>; <span class="hljs-comment">//使用default_delete&lt;int[]&gt;()</span><br>    <span class="hljs-comment">//5.3 常见操作</span><br>    cout &lt;&lt; pw1.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl; <span class="hljs-comment">//2</span><br><br>    <span class="hljs-keyword">if</span> (pw1) <span class="hljs-comment">//pw1.use_count &gt;= 1 ?</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;pw1.use_count &gt;= 1&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;pw1.use_count == 0&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-comment">//5.4 别名构造</span><br>    <span class="hljs-keyword">int</span>* p = <span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>(<span class="hljs-number">20</span>))</span></span>;<br>    <span class="hljs-function">std::shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">b</span><span class="hljs-params">(a, p)</span></span>;  <span class="hljs-comment">// alias constructor: co-owns a, points to p。可用于多继承中</span><br>                                   <span class="hljs-comment">// a 和 b拥用相同的控制块，但两者指向的对象不同。由于两者拥用相同的</span><br>                                   <span class="hljs-comment">//的控制块，可认为a和b所指对象具有相同的拥有者，因此10和20两个堆对象</span><br>                                   <span class="hljs-comment">//拥有相同的生命期</span><br>    cout &lt;&lt; *a &lt;&lt; endl; <span class="hljs-comment">//20</span><br>    cout &lt;&lt; *b &lt;&lt; endl; <span class="hljs-comment">//10</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-2-enable-shared-from-this模板的分析"><a href="#2-2-2-enable-shared-from-this模板的分析" class="headerlink" title="2.2.2 enable_shared_from_this模板的分析"></a>2.2.2 enable_shared_from_this模板的分析</h3><p><strong>（一）模板分析（以boost::enable_shared_from_this为例）</strong></p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">template&lt;<span class="hljs-keyword">class</span> T&gt; <span class="hljs-keyword">class</span> enable<span class="hljs-number">_</span><span class="hljs-keyword">shared</span><span class="hljs-number">_f</span>rom<span class="hljs-number">_</span><span class="hljs-keyword">this</span><br>&#123;<br>protected:<br><br>    enable<span class="hljs-number">_</span><span class="hljs-keyword">shared</span><span class="hljs-number">_f</span>rom<span class="hljs-number">_</span><span class="hljs-keyword">this</span>() BOOST<span class="hljs-number">_</span>NOEXCEPT<br>    &#123;<br>    &#125;<br><br>    enable<span class="hljs-number">_</span><span class="hljs-keyword">shared</span><span class="hljs-number">_f</span>rom<span class="hljs-number">_</span><span class="hljs-keyword">this</span>(enable<span class="hljs-number">_</span><span class="hljs-keyword">shared</span><span class="hljs-number">_f</span>rom<span class="hljs-number">_</span><span class="hljs-keyword">this</span> const &amp;) BOOST<span class="hljs-number">_</span>NOEXCEPT<br>    &#123;<br>    &#125;<br><br>    enable<span class="hljs-number">_</span><span class="hljs-keyword">shared</span><span class="hljs-number">_f</span>rom<span class="hljs-number">_</span><span class="hljs-keyword">this</span> &amp; operator=(enable<span class="hljs-number">_</span><span class="hljs-keyword">shared</span><span class="hljs-number">_f</span>rom<span class="hljs-number">_</span><span class="hljs-keyword">this</span> const &amp;) BOOST<span class="hljs-number">_</span>NOEXCEPT<br>    &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    ~enable<span class="hljs-number">_</span><span class="hljs-keyword">shared</span><span class="hljs-number">_f</span>rom<span class="hljs-number">_</span><span class="hljs-keyword">this</span>() BOOST<span class="hljs-number">_</span>NOEXCEPT <span class="hljs-comment">// ~weak_ptr&lt;T&gt; newer throws, so this call also must not throw</span><br>    &#123;<br>    &#125;<br><br>public:<br><br>    <span class="hljs-keyword">shared</span><span class="hljs-number">_p</span>tr&lt;T&gt; <span class="hljs-keyword">shared</span><span class="hljs-number">_f</span>rom<span class="hljs-number">_</span><span class="hljs-keyword">this</span>()<br>    &#123;<br>        <span class="hljs-keyword">shared</span><span class="hljs-number">_p</span>tr&lt;T&gt; p( weak<span class="hljs-number">_</span><span class="hljs-keyword">this</span><span class="hljs-number">_</span> );<br>        BOOST<span class="hljs-number">_</span>ASSERT( p.get() == <span class="hljs-keyword">this</span> );<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br><br>    <span class="hljs-keyword">shared</span><span class="hljs-number">_p</span>tr&lt;T const&gt; <span class="hljs-keyword">shared</span><span class="hljs-number">_f</span>rom<span class="hljs-number">_</span><span class="hljs-keyword">this</span>() const<br>    &#123;<br>        <span class="hljs-keyword">shared</span><span class="hljs-number">_p</span>tr&lt;T const&gt; p( weak<span class="hljs-number">_</span><span class="hljs-keyword">this</span><span class="hljs-number">_</span> );<br>        BOOST<span class="hljs-number">_</span>ASSERT( p.get() == <span class="hljs-keyword">this</span> );<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br><br>public: <span class="hljs-comment">// actually private, but avoids compiler template friendship issues</span><br><br>    <span class="hljs-comment">// Note: invoked automatically by shared_ptr; do not call</span><br>    template&lt;<span class="hljs-keyword">class</span> X, <span class="hljs-keyword">class</span> Y&gt; <span class="hljs-keyword">void</span> <span class="hljs-number">_</span>internal<span class="hljs-number">_</span>accept<span class="hljs-number">_</span>owner( <span class="hljs-keyword">shared</span><span class="hljs-number">_p</span>tr&lt;X&gt; const * ppx, Y * py ) const<br>    &#123;<br>        <span class="hljs-keyword">if</span>( weak<span class="hljs-number">_</span><span class="hljs-keyword">this</span><span class="hljs-number">_</span>.expired() )<br>        &#123;<br>            weak<span class="hljs-number">_</span><span class="hljs-keyword">this</span><span class="hljs-number">_</span> = <span class="hljs-keyword">shared</span><span class="hljs-number">_p</span>tr&lt;T&gt;( *ppx, py );<br>        &#125;<br>    &#125;<br><br>private:<br><br>    mutable weak<span class="hljs-number">_p</span>tr&lt;T&gt; weak<span class="hljs-number">_</span><span class="hljs-keyword">this</span><span class="hljs-number">_</span>;<br>&#125;;<br><br>boost::enable<span class="hljs-number">_</span><span class="hljs-keyword">shared</span><span class="hljs-number">_f</span>rom<span class="hljs-number">_</span><span class="hljs-keyword">this</span><br></code></pre></td></tr></table></figure><ol><li><p>enable_shared_from_this模板类提供两个public属性的shared_from_this成员函数。这两个函数内部会通过weak_this_（weak_ptr类型）成员来创建shared_ptr。</p></li><li><p><em>internal_accept_owner函数不能手动调用，这个**函数会被shared_ptr自动调用，该函数是用来初始化唯一的成员变量weak_this</em>**。</p></li><li><p>根据对象生成顺序，先初始化基类enable_shared_from_this，再初始化派生类对象本身。这时对象己经生成，但weak_this_成员还未被初始化，最后<strong>应通过shared_ptr<T> sp(new T())等方式调用shared_ptr构造函数(内部会调用_internal_accept_owner)来初始化weak_this_成员</strong>。而<strong>如果在调用shared_from_this函数之前weak_this_成员未被初始化，则会通过ASSERT报错提示。</strong></p></li></ol><p>（二）使用说明</p><ol><li>基类必须为enable_shared_from_this<T>，其中<strong>T为派生类的类名</strong>。（这种方法叫奇妙递归模板模式）</li><li>通过调用shared_from_this()成员函数获得一个和this指针指向相同对象的shared_ptr。</li><li>从内部实现看，shared_from_this会查询当前对象的控制块，并创建一个指向该控制块的新shared_ptr。这样的设计就要求当前对象己有一个与其关联的控制块。为了实现这一点，就必须有一个己经存在指向当前对象的std::shared_ptr，如果不存在，则通常shared_from_this会抛出异常。</li></ol><p>安全地从this指针创建shared_ptr</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//1. 从this指针创建shared_ptr</span><br><span class="hljs-comment">//1.1 错误的做法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//析构函数</span><br>    ~<span class="hljs-built_in">Test1</span>() &#123; cout &lt;&lt;<span class="hljs-string">&quot;~Test1()&quot;</span> &lt;&lt; endl; &#125;<br><br>    <span class="hljs-comment">//获取指向当前对象的指针</span><br>    <span class="hljs-function">std::shared_ptr&lt;Test1&gt; <span class="hljs-title">getObject</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-function">shared_ptr&lt;Test1&gt; <span class="hljs-title">pTest</span><span class="hljs-params">(<span class="hljs-keyword">this</span>)</span></span>; <span class="hljs-comment">//危险！ 直接从this指针创建，会为this对象创建新的控制块！</span><br>                                       <span class="hljs-comment">//从而可能导致this所指对象被多次析构</span><br>        <span class="hljs-keyword">return</span> pTest;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//1.2 正确的做法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span> :</span> <span class="hljs-keyword">public</span> std::enable_shared_from_this&lt;Test2&gt; <span class="hljs-comment">//继承！ 注意Test2为基类的模板参数  (递归模板模式)</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//析构函数</span><br>    ~<span class="hljs-built_in">Test2</span>() &#123; cout &lt;&lt; <span class="hljs-string">&quot;~Test2()&quot;</span> &lt;&lt; endl; &#125;<br><br>    <span class="hljs-function">std::shared_ptr&lt;Test2&gt; <span class="hljs-title">getObject</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">shared_from_this</span>(); <span class="hljs-comment">//调用enable_shared_from_this模板的成员函数，获取this对象的shared_ptr</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//2. shared_from_this函数的正确调用</span><br><span class="hljs-comment">//2.1 一般做法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test3</span> :</span> <span class="hljs-keyword">public</span> std::enable_shared_from_this&lt;Test3&gt;<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//构造函数中不能使用shared_from_this</span><br>    <span class="hljs-built_in">Test3</span>()<br>    &#123;<br>        <span class="hljs-comment">//std::shared_ptr&lt;Test3&gt; sp = shared_from_this(); //error，此时基类（enable_shared_from_this&lt;Test3&gt;）</span><br>                                                          <span class="hljs-comment">//虽己构造完，但shared_ptr的构造函数还没被调用，weak_this_指针</span><br>                                                          <span class="hljs-comment">//未被初始化，因此调用shared_from_this会抛出异常</span><br>    &#125;<br><br>    <span class="hljs-comment">//调用process之前，必须确保shared_ptr的构造函数己被执行（即weak_this_被初始化）</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::shared_ptr&lt;Test3&gt; sp = <span class="hljs-built_in">shared_from_this</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//2.2 改进做法：利用工厂函数来提供shared_ptr</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test4</span> :</span> <span class="hljs-keyword">public</span> std::enable_shared_from_this&lt;Test4&gt;<br>&#123;<br>    <span class="hljs-built_in">Test4</span>() &#123;&#125;  <span class="hljs-comment">//构造函数设为private</span><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-comment">//提供工厂函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span>... Ts&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">static</span> std::shared_ptr&lt;Test4&gt; <span class="hljs-title">create</span><span class="hljs-params">(Ts&amp;&amp; ... params)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-function">std::shared_ptr&lt;Test4&gt; <span class="hljs-title">ret</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Test4(params...))</span></span>;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::shared_ptr&lt;Test4&gt; sp = <span class="hljs-built_in">shared_from_this</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//3. enable_shared_from_this的应用举例</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Widget</span>;</span><br>std::vector&lt;std::shared_ptr&lt;Widget&gt;&gt; processWidgets; <span class="hljs-comment">//记录己被处理过的Widgets</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Widget</span> :</span> <span class="hljs-keyword">public</span> std::enable_shared_from_this&lt;Widget&gt; <span class="hljs-comment">//需要从这里继承</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//错误做法：直接将this传给shared_ptr&lt;Widget&gt;</span><br>        <span class="hljs-comment">//processWidgets.emplace_back(this); //将处理完的Widget加入链表。</span><br>                                             <span class="hljs-comment">//error，这种做法本质上是用裸指针来创建shared_ptr，会为this对象创建</span><br>                                             <span class="hljs-comment">//新的控制块。如果外部new Widget时，也将指针交给shared_ptr管理时，会出现为同</span><br>                                             <span class="hljs-comment">//一个this对象创建多个控制块，从而造成this对象的多次析构！</span><br><br>        <span class="hljs-comment">//正确做法：（为了确保shared_from_this在shared_ptr构造函数后被调用，可以采用工厂函数的方式来创建Widget，</span><br>        <span class="hljs-comment">//具体见前面的例子）</span><br>        processWidgets.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-built_in">shared_from_this</span>()); <span class="hljs-comment">//将指向当前对象的shared_ptr加入到链表中</span><br>    &#125;<br><br>    ~<span class="hljs-built_in">Widget</span>() &#123; cout &lt;&lt;<span class="hljs-string">&quot;~Widget()&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//1.  从this指针创建shared_ptr</span><br>    <span class="hljs-comment">//1.1 错误做法：对象被多次析构</span><br>    &#123;<br>        <span class="hljs-comment">//std::shared_ptr&lt;Test1&gt; pt1(new Test1());</span><br>        <span class="hljs-comment">//std::shared_ptr&lt;Test1&gt; pt2 = pt1-&gt;getObject();</span><br>    &#125;<br><br>    <span class="hljs-comment">//1.2 正确做法</span><br>    &#123;<br>        <span class="hljs-function">std::shared_ptr&lt;Test2&gt; <span class="hljs-title">pt1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Test2())</span></span>;<br>        std::shared_ptr&lt;Test2&gt; pt2 = pt1-&gt;<span class="hljs-built_in">getObject</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//2. shared_from_this的正确调用</span><br>    &#123;<br>        <span class="hljs-comment">//2.1 错误方法：</span><br>        Test3 t;<br>        <span class="hljs-comment">//t.process(); //错误，shared_ptr构造函数没有被执行</span><br><br>        Test3* pt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Test3</span>();<br>        <span class="hljs-comment">//pt-&gt;process(); //错误，原因同上。</span><br>        <span class="hljs-keyword">delete</span> pt;<br><br>        <span class="hljs-comment">//正确做法</span><br>        <span class="hljs-function">std::shared_ptr&lt;Test3&gt; <span class="hljs-title">spt</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Test3)</span></span>; <span class="hljs-comment">//shared_ptr构造被执行,weak_this_被正确初始化</span><br>        spt-&gt;<span class="hljs-built_in">process</span>(); <br><br>        <span class="hljs-comment">//2.2 工厂方法提供shared_ptr，确保shared_ptr构造函数被执行！</span><br>        std::shared_ptr&lt;Test4&gt; spt2 = Test4::<span class="hljs-built_in">create</span>();<br>        spt2-&gt;<span class="hljs-built_in">process</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//3. enable_shared_from_this的应用举例</span><br>    &#123;<br>        <span class="hljs-function">std::shared_ptr&lt;Widget&gt; <span class="hljs-title">sp</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Widget)</span></span>;<br>        sp-&gt;<span class="hljs-built_in">process</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-weak-ptr"><a href="#3-weak-ptr" class="headerlink" title="3. weak_ptr"></a>3. weak_ptr</h1><p><a href="https://www.cnblogs.com/5iedu/p/11623757.html">https://www.cnblogs.com/5iedu/p/11623757.html</a></p><h2 id="3-1-weak-ptr的概况"><a href="#3-1-weak-ptr的概况" class="headerlink" title="3.1. weak_ptr的概况"></a>3.1. weak_ptr的概况</h2><h3 id="3-1-1-weak-ptr的创建"><a href="#3-1-1-weak-ptr的创建" class="headerlink" title="3.1.1 weak_ptr的创建"></a>3.1.1 weak_ptr的创建</h3><p>　　1. 直接初始化：weak_ptr<T> wp(sp); //其中sp为shared_ptr类型</p><p>　　2. 赋值： wp1 = sp; //其中sp为shared_ptr类型</p><p> 　　　　　　wp2 = wp1; //其中wp1为weak_ptr类型</p><h3 id="3-1-2-常用操作"><a href="#3-1-2-常用操作" class="headerlink" title="3.1.2 常用操作"></a>3.1.2 常用操作</h3><p>　　1. use_count()：获取当前控制块中资源的强引用计数。</p><p>　　2. expired()：判断所观测的资源<strong>是否失效</strong>（即己经被释放），即use_count是否为0。</p><p> 　　（1）shared_ptr<int> sp1 = wp.<strong>lock()</strong>;//<strong>如果wp失效,则sp为空</strong>（其中wp为weak_ptr类型）</p><p> 　　（2）shared_ptr<int> sp2(wp); //<strong>如果wp失效，则抛std::bad_weak_ptr异常</strong>。</p><p>　　3. lock()：<strong>获取所监视资源的shared_ptr</strong>，如shared_ptr<int> sp = wp.lock(); //wp为weak_ptr类型。</p><p>　　4. reset()：重置weak_ptr，<strong>影响弱引用计数</strong>。</p><h3 id="3-1-3-注意事项"><a href="#3-1-3-注意事项" class="headerlink" title="3.1.3 注意事项"></a>3.1.3 注意事项</h3><p>　　1. weak_ptr不是独立的智能指针，它是shared_ptr的助手，只是监视shared_ptr管理的资源是否释放，<strong>不会影响强引用计数</strong>，不能管理资源。</p><p>　　2.weak_ptr**没有重载操作符*和-&gt;**，因为它不共享指针，不能操作资源。</p><p>　　3.weak_ptr主要<strong>用来代替可能空悬的shared_ptr</strong>。</p><p>【编程实验】weak_ptr初体验</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> sp1 = make_shared&lt;<span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">10</span>);<br>    <span class="hljs-function">weak_ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">wp</span><span class="hljs-params">(sp1)</span></span>;  <span class="hljs-comment">//通过shared_ptr初始化</span><br>    weak_ptr&lt;<span class="hljs-keyword">int</span>&gt; wp1, wp2;<br>    wp1 = sp1;   <span class="hljs-comment">//利用shared_ptr来赋值</span><br>    wp2 = wp;    <span class="hljs-comment">//利用weak_ptr赋值</span><br>    <span class="hljs-keyword">auto</span> sp2 = wp2.<span class="hljs-built_in">lock</span>(); <span class="hljs-comment">//sp2为shared_ptr类型</span><br><br>    sp1 = <span class="hljs-literal">nullptr</span>;<br><br>    cout &lt;&lt; wp2.<span class="hljs-built_in">use_count</span>() &lt;&lt; endl; <span class="hljs-comment">//1，强引用计数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-2-weak-ptr的应用"><a href="#3-2-weak-ptr的应用" class="headerlink" title="3.2 weak_ptr的应用"></a>3.2 weak_ptr的应用</h2><h3 id="3-2-1-缓存对象"><a href="#3-2-1-缓存对象" class="headerlink" title="3.2.1 缓存对象"></a>3.2.1 缓存对象</h3><p>　　1. 考虑一个工厂函数loadWidget，该函数基于唯一ID来创建一些指向只读对象的智能指针。</p><p>　　2. 假设该只读对象需要被频繁使用，而且经常需要从文件或数据库中加载。那么可以考虑将对象缓存起来。同时为了避免过量缓存，当不再使用时，则将该对象删除。</p><p>　　3. 由于带缓存，工厂函数返回unique_ptr类型显然不合适。因为调用者和缓存管理器均需要一个指向这些对象的指针。</p><p>　　4. 当用户用完工厂函数返回的对象后，该对象会被析构，此时相应的缓存条目将会空悬。因为可以<strong>考虑将工厂函数的返回值设定为shared_ptr类型，而缓存类型为weak_ptr类型</strong>。</p><h3 id="3-2-2-观察者模式"><a href="#3-2-2-观察者模式" class="headerlink" title="3.2.2 观察者模式"></a>3.2.2 观察者模式</h3><ol><li><p>观察者模式是在subject状态发生改变时，通知观察者的一种设计模式。</p></li><li><p>在多数实现中，<strong>每个subject持有指向观察者的指针</strong>，这使得当subject状态改变时可以很容易通知观察者。</p></li><li><p><strong>subject</strong>不会控制其观察者的生存期，因此应该是持有观察者的weak_ptr指针**。同时在subject的使用某个指针时，可以先确定是否空悬。</p></li></ol><h3 id="3-2-3-解决循环引用"><a href="#3-2-3-解决循环引用" class="headerlink" title="3.2.3 解决循环引用"></a>3.2.3 解决循环引用</h3> <img src="/2021/08/09/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/11unique_ptr%E5%92%8Cshared_ptr%E5%8F%8Aweak_ptr%E7%9A%84%E4%BD%BF%E7%94%A8/1.png" class=""><p>　　1. A、B、C三个对象的数据结构中，A和C共享B的所有权，因此各持有一个指向B的std::shared_ptr;</p><p>　　2. 假设有一个指针从B指回A（<strong>即上图中的红色箭****头</strong>），则该指针的类型应为weak_ptr，而不能是裸指针或shared_ptr，原因如下：</p><p>　　　①假如是裸指针，当A被析构时，由于C仍指向B，所以B会被保留。但B中保存着指向A的空悬指针（野指针），而B却检测不出来，但解引用该指针时会产生未定义行为。</p><p>　　　②假如是shared_ptr时。由于A和B相互保存着指向对方的shared_ptr，此时会形成循环引用，从而阻止了A和B的析构。</p><p>　　　③假如是weak_ptr，这可以避免循环引用。假设A被析构，那么B的回指指针会空悬，但B可以检测到这一点，同时由于该指针是weak_ptr，不会影响A的强引用计数，因此当shared_ptr不再指向A时，不会阻止A的析构。</p><h3 id="3-2-4监视this智能指针"><a href="#3-2-4监视this智能指针" class="headerlink" title="3.2.4监视this智能指针"></a>3.2.4监视this智能指针</h3><p>见shared_ptr中的enable_shared_from_this，其中的weak_this_指针即为weak_ptr类型，用于监视this指针。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span> <span class="hljs-comment">//for smart pointer</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span> <span class="hljs-comment">//for unordered_map</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Widget</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Widget</span>(<span class="hljs-keyword">int</span> id):<span class="hljs-built_in">ID</span>(id)&#123;&#125;<br>    <br>    <span class="hljs-keyword">int</span> ID;<br>&#125;;<br><br><span class="hljs-comment">//1. 利用weak_ptr来缓存对象</span><br><span class="hljs-comment">//模拟从数据库中加载，并创建shared_ptr指向widget对象</span><br><span class="hljs-function">shared_ptr&lt;Widget&gt; <span class="hljs-title">loadWidget</span><span class="hljs-params">(<span class="hljs-keyword">int</span> WidgetID)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> make_shared&lt;Widget&gt;(WidgetID); <br>&#125;<br><br><span class="hljs-comment">//带缓存的工厂函数</span><br><span class="hljs-function">std::shared_ptr&lt;<span class="hljs-keyword">const</span> Widget&gt; <span class="hljs-title">fastloadWidget</span><span class="hljs-params">(<span class="hljs-keyword">int</span> WidgetID)</span> <span class="hljs-comment">//返回shared_ptr类型</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//缓存：weak_ptr类型</span><br>    <span class="hljs-keyword">static</span> std::unordered_map&lt;<span class="hljs-keyword">int</span>, std::weak_ptr&lt;<span class="hljs-keyword">const</span> Widget&gt;&gt; cache;<br><br>    <span class="hljs-keyword">auto</span> objPtr = cache[WidgetID].<span class="hljs-built_in">lock</span>(); <span class="hljs-comment">//objPtr的类型为shared_ptr，指向缓存的对象</span><br><br>    <span class="hljs-keyword">if</span> (!objPtr) &#123; <span class="hljs-comment">//如果对象不在缓存中. 这里省略了缓存中因失效而不断累积std::weak_ptr的处理。</span><br>        objPtr = <span class="hljs-built_in">loadWidget</span>(WidgetID);<br>        cache[WidgetID] = objPtr;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> objPtr;<br>&#125;<br><br><span class="hljs-comment">//2. 观察者模式</span><br><span class="hljs-comment">//2.1 观察者</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeatherObservers</span> //抽象观察者</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateWeatherInfo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">//机场：具体观察者</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Airport</span> :</span> <span class="hljs-keyword">public</span> WeatherObservers<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateWeatherInfo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::cout &lt;&lt;<span class="hljs-string">&quot;Airport: &quot;</span> &lt;&lt; num &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//学校：具体观察者</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">School</span> :</span> <span class="hljs-keyword">public</span> WeatherObservers<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateWeatherInfo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;School: &quot;</span> &lt;&lt; num &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//2.1 主题（气象站）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeatherStation</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">using</span> ObserverPtr = std::weak_ptr&lt;WeatherObservers&gt;; <span class="hljs-comment">//弱引用</span><br><br>    <span class="hljs-comment">//set集合中保存观察者的弱引用（以ObserverPtr为关键字，基于ownership排序）</span><br>    <span class="hljs-keyword">using</span> ObserverList = std::set&lt;ObserverPtr, std::owner_less&lt;ObserverPtr&gt;&gt;;<br><br>    ObserverList obs; <span class="hljs-comment">//保存所有观察者</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//注册观察者</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">registerObserver</span><span class="hljs-params">(<span class="hljs-keyword">const</span> ObserverPtr oPtr)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (obs.<span class="hljs-built_in">find</span>(oPtr) == obs.<span class="hljs-built_in">end</span>()) &#123;<br>            obs.<span class="hljs-built_in">insert</span>(oPtr);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//注销观察者</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unregisterObserver</span><span class="hljs-params">(<span class="hljs-keyword">const</span> ObserverPtr oPtr)</span> <span class="hljs-comment">//oPtr为weak_ptr类型</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (obs.<span class="hljs-built_in">find</span>(oPtr) != obs.<span class="hljs-built_in">end</span>())<br>        &#123;<br>            obs.<span class="hljs-built_in">erase</span>(oPtr);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//通知各个观察者</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">notifyObservers</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::shared_ptr&lt;WeatherObservers&gt; tempPtr;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; ob : obs)<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((tempPtr = ob.<span class="hljs-built_in">lock</span>())) &#123;<br>                tempPtr-&gt;<span class="hljs-built_in">updateWeatherInfo</span>(num);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//观察者模式</span><br>    WeatherStation station;<br>    <span class="hljs-function">std::shared_ptr&lt;Airport&gt; <span class="hljs-title">airport</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Airport())</span></span>;<br>    <span class="hljs-function">std::shared_ptr&lt;School&gt;  <span class="hljs-title">school</span><span class="hljs-params">(<span class="hljs-keyword">new</span> School())</span></span>;<br><br>    station.<span class="hljs-built_in">registerObserver</span>(airport);<br>    station.<span class="hljs-built_in">registerObserver</span>(school);<br><br>    station.<span class="hljs-built_in">notifyObservers</span>(<span class="hljs-number">1</span>);<br><br>    station.<span class="hljs-built_in">unregisterObserver</span>(school);<br>    station.<span class="hljs-built_in">notifyObservers</span>(<span class="hljs-number">2</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*输出结果</span><br><span class="hljs-comment">Airport: 1</span><br><span class="hljs-comment">School: 1</span><br><span class="hljs-comment">Airport: 2</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>c11</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指针精髓</title>
    <link href="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/10%E6%8C%87%E9%92%88/"/>
    <url>/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/10%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h2 id="1-指针的定义"><a href="#1-指针的定义" class="headerlink" title="1. 指针的定义"></a>1. 指针的定义</h2><p>程序运行时，每一个变量的数据都是保存在内存的一个确定位置，可以用&amp;操作符取得这个内存位置的值。32位操作系统上，这个值实际上就是一个32位的整数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> iA = <span class="hljs-number">30</span>;<br>cout&lt;&lt;”iA变量的内存地址：”&lt;&lt;&amp;iA&lt;&lt;endl;<br></code></pre></td></tr></table></figure><p>有时候我们需要把这个地址也保存起来，以实现在程序中直接使用。如果每次都对变量取地址，显得不方便。更何况有的情况并没有明确的变量名称，比如动态分配的一块内存。这些内存地址的值都有必要得到保存，因此指针数据类型就闪亮登场了。简单的说：<br>指针是一个变量，保存的是一个内存地址。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">int * pA = <span class="hljs-meta">&amp;iA;</span><br></code></pre></td></tr></table></figure><p>这就是定义一个int类型的指针变量pValue来保存iA这个整数的内存地址。</p><img src="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/10%E6%8C%87%E9%92%88/1.png" class=""><p>强烈建议指针变量用小写的p表示前缀（p是point的首字母）。</p><p>定义指针变量必须注意几点：<br>    1. 指针是对其他的数据类型的复合，指针变量必须指向同类型的变量的地址。比如不能写成：<br>    <figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">double * pA = <span class="hljs-meta">&amp;iA;   <span class="hljs-comment">// 错误，iA是整数，和double *不兼容</span></span><br></code></pre></td></tr></table></figure><br>    2. 指针的*位置可以紧靠数据类型，也可以紧靠指针变量，也可以两者都不紧靠。所以下面的三种写法都是可以的：<br>    <figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">int *pA = <span class="hljs-meta">&amp;iA;   <span class="hljs-comment">// 这种写法支持者较多，有的公司编码规范表示推荐这样写</span></span><br>int * pA = <span class="hljs-meta">&amp;iA;   <span class="hljs-comment">// 这种写法支持者也不少</span></span><br>int* pA = <span class="hljs-meta">&amp;iA;</span><br></code></pre></td></tr></table></figure><br>    3. 指针是一个变量，可以先定义，然后再使用。<br>    <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">int</span> *pA = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">int</span> iA = <span class="hljs-number">200</span>;<br>pA = &amp;iA;<br></code></pre></td></tr></table></figure><br>第1行代码就是对先定义指针变量，并把其初始值定义为NULL。NULL其实就0值，用    NULL更偏向于表示指针初值的意义。指针变量里的值为0，意味着还没有指向任何整数变量的内存地址。<br>[编程好习惯]<br>指针变量赋于初值NULL，是编程好习惯的一个体现。有的人甚至支持对所有变量都养成赋予初值的习惯。</p><h2 id="2-指针的基本功能"><a href="#2-指针的基本功能" class="headerlink" title="2. 指针的基本功能"></a>2. 指针的基本功能</h2><p>指针变量的基本功能就是对指针所指向的内存地址的数据进行操作，包括读取数据和修改数据。这里要用到C++的又一个操作符号：取值操作符<em>。值得注意的是和定义指针变量的</em>一样，但取值操作符*不是用在指针变量的声明语句里，而是用在其他语句的指针变量前（紧靠变量）表示取该指针指向的变量的值。这个时候指针变量一定是早已定义好了的变量。<br>程序实例5-1：Point(指针的基本用法)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">4.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-number">5.</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-number">6.</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">7.</span>&#123;<br><span class="hljs-number">8.</span><span class="hljs-keyword">int</span> iValue = <span class="hljs-number">300</span>;<br><span class="hljs-number">9.</span><span class="hljs-keyword">int</span> * pValue = &amp;iValue;<br><span class="hljs-number">10.</span>cout&lt;&lt;<span class="hljs-string">&quot;iValue的值:&quot;</span>&lt;&lt;iValue&lt;&lt;endl;                <span class="hljs-comment">// 输出300</span><br><span class="hljs-number">11.</span>cout&lt;&lt;<span class="hljs-string">&quot;通过pValue取值:&quot;</span>&lt;&lt;*pValue&lt;&lt;endl;          <span class="hljs-comment">// 输出300</span><br><span class="hljs-number">12.</span><br><span class="hljs-number">13.</span>*pValue = <span class="hljs-number">400</span>;<br><span class="hljs-number">14.</span>cout&lt;&lt;<span class="hljs-string">&quot;iValue的值:&quot;</span>&lt;&lt;iValue&lt;&lt;endl;               <span class="hljs-comment">// 输出400</span><br><span class="hljs-number">15.</span>cout&lt;&lt;<span class="hljs-string">&quot;通过pValue取值:&quot;</span>&lt;&lt;*pValue&lt;&lt;endl;        <span class="hljs-comment">// 输出400</span><br><span class="hljs-number">16.</span><br><span class="hljs-number">17.</span>     iValue = <span class="hljs-number">500</span>;<br><span class="hljs-number">18.</span>cout&lt;&lt;<span class="hljs-string">&quot;iValue的值:&quot;</span>&lt;&lt;iValue&lt;&lt;endl;                <span class="hljs-comment">// 输出500</span><br><span class="hljs-number">19.</span>cout&lt;&lt;<span class="hljs-string">&quot;通过pValue取值:&quot;</span>&lt;&lt;*pValue&lt;&lt;endl;         <span class="hljs-comment">// 输出500</span><br><span class="hljs-number">20.</span><br><span class="hljs-number">21.</span>&#125;<br></code></pre></td></tr></table></figure><p>从程序的运行结果可以看出，指针变量pValue指向iValue后，就可以通过<em>pValue去读数iValue的值。也可以通过对</em>pValue进行赋值达到修该iValue变量的值的效果。这些操作并没有通过iValue进行，而是通过指针变量pValue间接去操作它所指向的变量的数据。所以取值操作符号<em>也叫间访操作符号。间访就是间接访问的意思。<br>第14行代码通过iValue变量修改了本身的值，因为pValue在程序里一直指向该变量，变量本身值发生变化理所当然会影响后面到</em>pValue取值，所以第16行的*pValue取到的就是变化过的值了。</p><h2 id="3-指针指向数组"><a href="#3-指针指向数组" class="headerlink" title="3. 指针指向数组"></a>3. 指针指向数组</h2><p>数组的名称代表整个数组，其意义等价于一个指针，表示数组的首地址，也就是第一个元素的内存地址。因此，指针可以用来指向数组名称。比如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> arrA[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;;<br><span class="hljs-attribute">Int</span> *pA = arrA;    // 注意arrA前不能再加取地址符&amp;<br></code></pre></td></tr></table></figure><p>其意义如下图所表示：</p><img src="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/10%E6%8C%87%E9%92%88/2.png" class=""><h2 id="4-指针指向动态分配内存"><a href="#4-指针指向动态分配内存" class="headerlink" title="4. 指针指向动态分配内存"></a>4. 指针指向动态分配内存</h2><p>一个良好的程序更偏重于运行时的灵活性，编译时对程序过多的限制会削弱程序的质量，有时候甚至降低程序的性能。比如定义一个整数数组来保存学生的成绩，但目前的问题是并不知道学生的数量，如果定义成int arrScore[50]能满足一般的要求，可是在特殊情况学生有200人呢，程序不得不修改成int arrScore[200]。此时对于大多数情况只用了不到50个空间的情况来言，就是对内存空间的浪费。<br>动态分配内存就是运行时在进程内存空间的自由储存区（也称为堆区）去申请实际可需的内存，然后用来保存数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">char</span> szName[] = “SunWuKong”;<br>cout&lt;&lt;” szName变量的内存地址：”&lt;&lt;(<span class="hljs-keyword">int</span> *)szName&lt;&lt;endl;<br></code></pre></td></tr></table></figure><h3 id="4-1-C语言的动态分配内存"><a href="#4-1-C语言的动态分配内存" class="headerlink" title="4.1 C语言的动态分配内存"></a>4.1 C语言的动态分配内存</h3><p>C语言用malloc函数来实现内存的动态分配。比如申请100个int的内存空间：<br>int * pA = (int *)malloc( 100 * sizeof(int) );<br>这句代码用下图表示其意义：</p><img src="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/10%E6%8C%87%E9%92%88/3.png" class=""><p>Malloc函数返回一块申请成功的内存，这块内存并没有明确的变量来表示它。我们要使用这块内存，就必须用一定类型的指针去指向它（就是保存他的内存地址，从而知道这块风水宝地在哪里）。这也是C++程序里为什么有指针这种数据类型的原因之一。<br>使用malloc函数注意三点：<br>    - malloc函数返回的是void *指针，要赋予别的类型指针，必须强制转换。<br>    - 所需要的空间大小需要自己计算。<br>    - 动态分配的内存使用结束后用free函数释放，否则引起内存泄露。</p><h3 id="4-2-空类型指针void-的理解"><a href="#4-2-空类型指针void-的理解" class="headerlink" title="4.2 空类型指针void *的理解"></a>4.2 空类型指针void *的理解</h3><p>void *表示空类型指针，通常人们又简称为空指针，它仅仅单纯的保存一个内存地址，这个内存地址的数据是什么类型或者这个这个内存地址将要放什么类型的数据取决于后面的实现。Malloc函数返回的就是void *，因为新申请的内存用来装什么类型的数据往往是个未知数，如果你确定了用来装整数，就可以把void *强制转化成int *。如果你心血来潮，想用来装结构变量的数据，还可以转换成结构指针。<br>程序实例5-1：VoidPoint(空指针的应用理解)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">22.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-number">23.</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-number">24.</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tagSTUDENT</span></span><br><span class="hljs-class">25.&#123;</span><br><span class="hljs-number">26.</span>    <span class="hljs-keyword">char</span> szName[<span class="hljs-number">20</span>];<br><span class="hljs-number">27.</span>    <span class="hljs-keyword">int</span>  iAge;<br><span class="hljs-number">28.</span>&#125; T_STUDENT, *PT_STUDENT;<br><span class="hljs-number">29.</span><br><span class="hljs-number">30.</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">31.</span>&#123;<br><span class="hljs-number">32.</span><span class="hljs-keyword">void</span> * pA = <span class="hljs-built_in">malloc</span>( <span class="hljs-number">100</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>) );<br><span class="hljs-number">33.</span><span class="hljs-keyword">int</span> * pScore = (<span class="hljs-keyword">int</span> *)pA;<br><span class="hljs-number">34.</span>*pScore = <span class="hljs-number">100</span>;<br><span class="hljs-number">35.</span>cout&lt;&lt;*pScore&lt;&lt;endl;                  <span class="hljs-comment">// 输出100</span><br><span class="hljs-number">36.</span>T_STUDENT tZhangSan = &#123;<span class="hljs-string">&quot; ZhangSan&quot;</span>, <span class="hljs-number">20</span>&#125;;<br><span class="hljs-number">37.</span>T_STUDENT * pStudent = (T_STUDENT *) pA;<br><span class="hljs-number">38.</span>*pStudent = tZhangSan;<br><span class="hljs-number">39.</span>cout&lt;&lt;(*pStudent).iAge&lt;&lt;endl;           <span class="hljs-comment">// 输出20</span><br><span class="hljs-number">40.</span>     <span class="hljs-built_in">free</span>(pA);<br><span class="hljs-number">41.</span>&#125;<br></code></pre></td></tr></table></figure><p>程序说明：<br>第12行先把申请到的内存强制转化成整型指针，说明准备用来装整数。第13行就是利用指针给空间赋一个整数值，然后在第14行输出。<br>第16行又把申请到的内存用来装一个学生的结构变量，所以先把void*强制转化成结构指针，然后通过第17行直接把一个结构变量赋予到pStudent所指向的内存里。<br>第18行的(*pStudent)是指针变量取值，因为pStudent是结构指针，所以取值取到的就是一个结构的数据。因为cout并没有能力直接输出一个结构的信息，所以通过点号输出结构里的指定成员的值。<br>第19行的free是释放动态分配的内存。<br>此例说明，动态分配的内存可以反复使用，怎么使用取决于程序业务逻辑的实现。</p><h3 id="4-3-C-的动态分配内存"><a href="#4-3-C-的动态分配内存" class="headerlink" title="4.3 C++的动态分配内存"></a>4.3 C++的动态分配内存</h3><p>C++采用new操作符在堆空间上申请动态内存，使用完后用delete释放。比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> * pA = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>;    <span class="hljs-comment">//申请一个整数大小的动态内存，然后用pA指向它。</span><br><span class="hljs-keyword">delete</span> pA;          <span class="hljs-comment">//使用完毕后释放动态分配的内存。</span><br></code></pre></td></tr></table></figure><p>指针也可以指向动态分配的数组空间，比如</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">int</span> * pA = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];  <br></code></pre></td></tr></table></figure><p>这里的pA指向一个动态分配的整数数组的首地址(即第1个元素的地址)，数组有5个元素。释放这样的内存是：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">delete</span> []pA;         <span class="hljs-regexp">//</span>注意不能少了中括号[ ]<br></code></pre></td></tr></table></figure><p>值得注意的是[ ]不能写成()，比如：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">int</span> * pA = <span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(<span class="hljs-number">5</span>); <span class="hljs-comment">//这不是申请数组空间，而是申请一个整数空间，并赋予初值5。</span><br></code></pre></td></tr></table></figure><p>使用new动态分配内存注意：</p><ul><li>new和delete并不是函数，而是c++的操作符</li><li>new操作符号后必须指定数据类型，如果是数组空间，[ ]里的数字就表示这种数据类型的个数，而不是字节总的大小。</li><li>由于new操作符指明了数据类型，所以不需要强制转化，就可以用相应数据类型的指针来指向申请成功的动态内存。<h2 id="5-指针数组"><a href="#5-指针数组" class="headerlink" title="5. 指针数组"></a>5. 指针数组</h2>定义一个整数指针数组：<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> * pA[<span class="hljs-number">3</span>]；int iA, iB, iC;  <br><span class="hljs-attribute">pA</span>[<span class="hljs-number">0</span>] = &amp;iA; pA[<span class="hljs-number">1</span>] = &amp;iB; pA[<span class="hljs-number">2</span>] = &amp;iC;<br></code></pre></td></tr></table></figure>这表明每个元素都是一个整数指针，可以用来保存一个整数变量的内存地址（指向一个整数变量）。如下图所示：</li></ul><img src="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/10%E6%8C%87%E9%92%88/4.png" class=""><p>因为指针数组里每个整数指针也可以用来指向一个一维数组，因此指针数组可以用来“模拟”二维数组，只是这里的一维数组在内存上可以不用靠在一起。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> * pA[<span class="hljs-number">3</span>]；<br><span class="hljs-attribute">int</span> iA[<span class="hljs-number">5</span>], iB[<span class="hljs-number">5</span>], iC[<span class="hljs-number">5</span>];<br><span class="hljs-attribute">pA</span>[<span class="hljs-number">0</span>] = iA;   pA[<span class="hljs-number">1</span>] = iB;pA[<span class="hljs-number">2</span>] = iC;<br></code></pre></td></tr></table></figure><h2 id="6-指针的指针（二级指针）"><a href="#6-指针的指针（二级指针）" class="headerlink" title="6. 指针的指针（二级指针）"></a>6. 指针的指针（二级指针）</h2><p>指针的指针简称二级指针，这种指针指向另一个指针变量的内存地址。例如：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> iA = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">int</span> * pA = &amp;iA;<br><span class="hljs-built_in">int</span> **ppA = &amp;pA;<br></code></pre></td></tr></table></figure><p>这里ppA就是一个二级指针，它指向的是另一个指针变量pA的内存地址，而不是一个普通整数变量的内存地址。不能写成：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">int **ppA = <span class="hljs-meta">&amp;iA;  <span class="hljs-comment">// 错误，iA只能用一级指针来指向。</span></span><br></code></pre></td></tr></table></figure><img src="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/10%E6%8C%87%E9%92%88/5.png" class=""><h2 id="7-指针的运算"><a href="#7-指针的运算" class="headerlink" title="7. 指针的运算"></a>7. 指针的运算</h2><p>指针的运算通常是指当一个指针指向一个内存地址后，通过一定的偏移指向新的内存地址。比如</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> arrValue = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;;<br><span class="hljs-attribute">int</span> * pA = arrValue;<br><span class="hljs-attribute">pA</span> = pA + <span class="hljs-number">1</span>;<br><span class="hljs-attribute">cout</span>&lt;&lt;*pA &lt;endl;<br></code></pre></td></tr></table></figure><img src="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/10%E6%8C%87%E9%92%88/6.png" class=""><p>当指针加1后，相当于往后移动了一个数据单位，所移动的内存字节数取决于指针的类型。这里是整数指针，所以内存实际上移动了4个字节。可以得出结论：<br>指针偏移1个单位，实际移动的字节数等于指针类型所占的字节数。<br>灵活利用指针的偏移，有时可以使程序代码变得简洁又高效。</p><h2 id="8-指针与字符串"><a href="#8-指针与字符串" class="headerlink" title="8. 指针与字符串"></a>8. 指针与字符串</h2><p>字符串即字符数组，而指针可以指向数组，所以字符指针可以指向字符串。字符指针取值取到的是指针当前指向位置的字符。<br>程序示例TranslateBig.cpp：把所有字符串转化为大写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-number">2.</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-number">3.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctype.h&gt;</span>    <span class="hljs-comment">// 字符函数库</span></span><br><span class="hljs-number">4.</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">5.</span>&#123;<br><span class="hljs-number">6.</span>    <span class="hljs-keyword">char</span> szInfo[] = <span class="hljs-string">&quot;I am a student!&quot;</span>;<br><span class="hljs-number">7.</span>    <span class="hljs-keyword">char</span> * pszValue = szInfo;<br><span class="hljs-number">8.</span><span class="hljs-keyword">while</span>(*pszValue != <span class="hljs-number">0</span>)<br><span class="hljs-number">9.</span>&#123;<br><span class="hljs-number">10.</span>*pszValue = <span class="hljs-built_in">toupper</span>(*pszValue);<br><span class="hljs-number">11.</span>pszValue++;<br><span class="hljs-number">12.</span>&#125;<br><span class="hljs-number">13.</span>cout&lt;&lt;szInfo&lt;&lt;endl;<br><span class="hljs-number">14.</span>&#125;<br></code></pre></td></tr></table></figure><p>程序运行结果：<br>I AM A STUDENT!<br>程序说明：<br>（1）、*pszValue字符指针取值取到的是一个字符，由于pszValue++导致指针逐渐往后偏移，所以每次取道的值是不一样的，当取道字符串的最后一个空字符时，由于空字符的ASCII值就是0，0值即为假，所以刚好遍历完字符串后退出循环。<br>（2）、第10行的函数toupper是把一个函数转化为大写。要使用字符库函数，必须包含头文件&lt;ctype.h&gt;。把取到的字符转化为大写后然后再赋值回去，这里利用了指针来修改数据。<br>[特别提醒]<br>很多人定义字符串的时候很喜欢这样定义：<br>char * pszInfo = “I am a student!”;<br>这样其意义侧重于定义字符指针，然后指向一个没有名称的常量字符串，这个字符串是不可修改的。对于本例要改变成大写就是不合符要求的。如果你这样定义，可以通过编译，但运行的时候第10行将引起崩溃。</p><h2 id="9-二维数组的指针访问形式"><a href="#9-二维数组的指针访问形式" class="headerlink" title="9. 二维数组的指针访问形式"></a>9. 二维数组的指针访问形式</h2><p>假设定义有二维整数数组：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> arrKey[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = &#123; &#123;<span class="hljs-number">100</span>,<span class="hljs-number">200</span>&#125;, &#123;<span class="hljs-number">300</span>, <span class="hljs-number">400</span>&#125;, &#123; <span class="hljs-number">500</span>, <span class="hljs-number">600</span>&#125; &#125;;<br></code></pre></td></tr></table></figure><p>如果要输出第2行第2列的元素值，最简单的形式是利用下标：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cout</span>&lt;&lt;arrKey[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><p>因为arrKey等价于指针，所以也可以通过指针形式来访问第2行第2列的元素值：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cout</span>&lt;&lt;*(*(arrKey + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>);   // 输出第<span class="hljs-number">2</span>行第<span class="hljs-number">2</span>列的值即<span class="hljs-number">400</span><br></code></pre></td></tr></table></figure><p>分析示意图如下图：</p><img src="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/10%E6%8C%87%E9%92%88/7.png" class=""><h2 id="10-数组指针的指针"><a href="#10-数组指针的指针" class="headerlink" title="10. 数组指针的指针"></a>10. 数组指针的指针</h2><p>先看代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-number">2.</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-number">3.</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">4.</span>&#123;<br><span class="hljs-number">5.</span>    <span class="hljs-keyword">int</span> iValue = <span class="hljs-number">300</span>;<br><span class="hljs-number">6.</span>    <span class="hljs-keyword">int</span> *pValue = &amp;iValue;  <span class="hljs-comment">// 指向变量，取变量地址</span><br><span class="hljs-number">7.</span>    cout &lt;&lt; <span class="hljs-string">&quot;iValue:&quot;</span>&lt;&lt;*pValue&lt;&lt;endl;<br><span class="hljs-number">8.</span>   <br><span class="hljs-number">9.</span>    <span class="hljs-keyword">int</span> arrValue[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>&#125;;<br><span class="hljs-number">10.</span>    <span class="hljs-keyword">int</span> * pA = arrValue;  <span class="hljs-comment">//指向一维数组，数组名即数组首元素地址等价于指针，故直接赋值于Pa</span><br><span class="hljs-number">11.</span>    cout&lt;&lt;<span class="hljs-string">&quot;arrValue[0]:&quot;</span>&lt;&lt;*pA&lt;&lt;endl;    <span class="hljs-comment">// 通过指针输出第一个元素的值</span><br><span class="hljs-number">12.</span>    <br><span class="hljs-number">13.</span>    <span class="hljs-keyword">int</span> arrKey[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = &#123; &#123;<span class="hljs-number">100</span>,<span class="hljs-number">200</span>&#125;, &#123;<span class="hljs-number">300</span>, <span class="hljs-number">400</span>&#125;, &#123; <span class="hljs-number">500</span>, <span class="hljs-number">600</span>&#125; &#125;;<br><span class="hljs-number">14.</span>    <span class="hljs-built_in"><span class="hljs-keyword">int</span></span> (* ppA)[<span class="hljs-number">2</span>] = arrKey;  <span class="hljs-comment">// 指向数组指针的指针</span><br><span class="hljs-number">15.</span>    cout&lt;&lt; <span class="hljs-string">&quot;arrKey[0]0]:&quot;</span>&lt;&lt;(*ppA)[<span class="hljs-number">0</span>]&lt;&lt;endl;   <span class="hljs-comment">// (*ppA)指针取值取到第一个数组</span><br><span class="hljs-number">16.</span><br><span class="hljs-number">17.</span>    <span class="hljs-keyword">int</span> arrNum[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>&#125;;<br><span class="hljs-number">18.</span>    <span class="hljs-built_in"><span class="hljs-keyword">int</span></span> (*pNum)[<span class="hljs-number">5</span>] = &amp;arrNum;  <br><span class="hljs-number">19.</span>    cout&lt;&lt; <span class="hljs-string">&quot;arrNum[1]:&quot;</span>&lt;&lt;(*pNum)[<span class="hljs-number">1</span>]&lt;&lt;endl;<br><span class="hljs-number">20.</span>&#125;<br></code></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs iValue:300">arrValue[0]:100<br>arrKey[0]0]:100<br>arrNum[1]:200<br></code></pre></td></tr></table></figure><p>程序说明：<br>第14行代码即定义一个指向数组指针的指针。如果写成： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> arrValue[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = &#123; &#123;<span class="hljs-number">100</span>,<span class="hljs-number">200</span>&#125;, &#123;<span class="hljs-number">300</span>, <span class="hljs-number">400</span>&#125;, &#123; <span class="hljs-number">500</span>, <span class="hljs-number">600</span>&#125; &#125;;<br><span class="hljs-attribute">int</span> * pA = arrValue;  // 编译出错<br></code></pre></td></tr></table></figure><p>编译产生的错误提示：cannot convert from ‘int [3][2]’ to ‘int *’。这说明二维数组名arrValue和一级指针pA是不等价的数据类型，不能相互转化。<br>二维数组arrValue[3][2]可以看成是一个一维数组arrValue[3]，只是这个一维数组里的每个元素又是一个一维数组。二维数组的名称arrValue代表这个一维数组的首地址，而不是一个普通整数元素的地址。所以二维数组名是在一定意义上的二级指针。<br>注意：<br>当程序需要指定一个指向数组指针的指针时，别忘了括号。对比一下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> (* ppA)[<span class="hljs-number">2</span>] = arrValue;  <span class="hljs-comment">// 指向数组指针的指针</span><br><span class="hljs-built_in">int</span> *pA[<span class="hljs-number">2</span>];              <span class="hljs-comment">// 指针数组</span><br></code></pre></td></tr></table></figure><p>指向数组指针的维数一定要一致。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> arrKey[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = &#123; &#123;<span class="hljs-number">100</span>,<span class="hljs-number">200</span>&#125;, &#123;<span class="hljs-number">300</span>, <span class="hljs-number">400</span>&#125;, &#123; <span class="hljs-number">500</span>, <span class="hljs-number">600</span>&#125; &#125;;<br><span class="hljs-attribute">int</span> (* ppA)[<span class="hljs-number">5</span>] = arrKey;  // <span class="hljs-number">5</span>和<span class="hljs-number">2</span>不一致，导致编译错误<br></code></pre></td></tr></table></figure><p>编译错误提示：cannot convert from ‘int [3][2]’ to ‘int (*)[5]’<br>[特别提醒]<br>指向数组指针的指针是比较难以理解的，所幸的是实际应用极少。原因很简单，既然定义了数组，一般情况下通过数组名称结合下标就可以很方便的访问元素。因此，这种语法如果一时难以理解，并不是一件可怕的事情，你甚至可以不屑一顾，甚至置之不理。</p>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指针精髓</title>
    <link href="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/10%E6%8C%87%E9%92%88%E7%B2%BE%E9%AB%93/"/>
    <url>/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/10%E6%8C%87%E9%92%88%E7%B2%BE%E9%AB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="1-指针的定义"><a href="#1-指针的定义" class="headerlink" title="1. 指针的定义"></a>1. 指针的定义</h2><p>程序运行时，每一个变量的数据都是保存在内存的一个确定位置，可以用&amp;操作符取得这个内存位置的值。32位操作系统上，这个值实际上就是一个32位的整数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> iA = <span class="hljs-number">30</span>;<br>cout&lt;&lt;”iA变量的内存地址：”&lt;&lt;&amp;iA&lt;&lt;endl;<br></code></pre></td></tr></table></figure><p>有时候我们需要把这个地址也保存起来，以实现在程序中直接使用。如果每次都对变量取地址，显得不方便。更何况有的情况并没有明确的变量名称，比如动态分配的一块内存。这些内存地址的值都有必要得到保存，因此指针数据类型就闪亮登场了。简单的说：<br>指针是一个变量，保存的是一个内存地址。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">int * pA = <span class="hljs-meta">&amp;iA;</span><br></code></pre></td></tr></table></figure><p>这就是定义一个int类型的指针变量pValue来保存iA这个整数的内存地址。</p><img src="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/10%E6%8C%87%E9%92%88%E7%B2%BE%E9%AB%93/1.png" class=""><p>强烈建议指针变量用小写的p表示前缀（p是point的首字母）。</p><p>定义指针变量必须注意几点：<br>    1. 指针是对其他的数据类型的复合，指针变量必须指向同类型的变量的地址。比如不能写成：<br>    <figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">double * pA = <span class="hljs-meta">&amp;iA;   <span class="hljs-comment">// 错误，iA是整数，和double *不兼容</span></span><br></code></pre></td></tr></table></figure><br>    2. 指针的*位置可以紧靠数据类型，也可以紧靠指针变量，也可以两者都不紧靠。所以下面的三种写法都是可以的：<br>    <figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">int *pA = <span class="hljs-meta">&amp;iA;   <span class="hljs-comment">// 这种写法支持者较多，有的公司编码规范表示推荐这样写</span></span><br>int * pA = <span class="hljs-meta">&amp;iA;   <span class="hljs-comment">// 这种写法支持者也不少</span></span><br>int* pA = <span class="hljs-meta">&amp;iA;</span><br></code></pre></td></tr></table></figure><br>    3. 指针是一个变量，可以先定义，然后再使用。<br>    <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">int</span> *pA = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">int</span> iA = <span class="hljs-number">200</span>;<br>pA = &amp;iA;<br></code></pre></td></tr></table></figure><br>第1行代码就是对先定义指针变量，并把其初始值定义为NULL。NULL其实就0值，用    NULL更偏向于表示指针初值的意义。指针变量里的值为0，意味着还没有指向任何整数变量的内存地址。<br>[编程好习惯]<br>指针变量赋于初值NULL，是编程好习惯的一个体现。有的人甚至支持对所有变量都养成赋予初值的习惯。</p><h2 id="2-指针的基本功能"><a href="#2-指针的基本功能" class="headerlink" title="2. 指针的基本功能"></a>2. 指针的基本功能</h2><p>指针变量的基本功能就是对指针所指向的内存地址的数据进行操作，包括读取数据和修改数据。这里要用到C++的又一个操作符号：取值操作符<em>。值得注意的是和定义指针变量的</em>一样，但取值操作符*不是用在指针变量的声明语句里，而是用在其他语句的指针变量前（紧靠变量）表示取该指针指向的变量的值。这个时候指针变量一定是早已定义好了的变量。<br>程序实例5-1：Point(指针的基本用法)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">4.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-number">5.</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-number">6.</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">7.</span>&#123;<br><span class="hljs-number">8.</span><span class="hljs-keyword">int</span> iValue = <span class="hljs-number">300</span>;<br><span class="hljs-number">9.</span><span class="hljs-keyword">int</span> * pValue = &amp;iValue;<br><span class="hljs-number">10.</span>cout&lt;&lt;<span class="hljs-string">&quot;iValue的值:&quot;</span>&lt;&lt;iValue&lt;&lt;endl;                <span class="hljs-comment">// 输出300</span><br><span class="hljs-number">11.</span>cout&lt;&lt;<span class="hljs-string">&quot;通过pValue取值:&quot;</span>&lt;&lt;*pValue&lt;&lt;endl;          <span class="hljs-comment">// 输出300</span><br><span class="hljs-number">12.</span><br><span class="hljs-number">13.</span>*pValue = <span class="hljs-number">400</span>;<br><span class="hljs-number">14.</span>cout&lt;&lt;<span class="hljs-string">&quot;iValue的值:&quot;</span>&lt;&lt;iValue&lt;&lt;endl;               <span class="hljs-comment">// 输出400</span><br><span class="hljs-number">15.</span>cout&lt;&lt;<span class="hljs-string">&quot;通过pValue取值:&quot;</span>&lt;&lt;*pValue&lt;&lt;endl;        <span class="hljs-comment">// 输出400</span><br><span class="hljs-number">16.</span><br><span class="hljs-number">17.</span>     iValue = <span class="hljs-number">500</span>;<br><span class="hljs-number">18.</span>cout&lt;&lt;<span class="hljs-string">&quot;iValue的值:&quot;</span>&lt;&lt;iValue&lt;&lt;endl;                <span class="hljs-comment">// 输出500</span><br><span class="hljs-number">19.</span>cout&lt;&lt;<span class="hljs-string">&quot;通过pValue取值:&quot;</span>&lt;&lt;*pValue&lt;&lt;endl;         <span class="hljs-comment">// 输出500</span><br><span class="hljs-number">20.</span><br><span class="hljs-number">21.</span>&#125;<br></code></pre></td></tr></table></figure><p>从程序的运行结果可以看出，指针变量pValue指向iValue后，就可以通过<em>pValue去读数iValue的值。也可以通过对</em>pValue进行赋值达到修该iValue变量的值的效果。这些操作并没有通过iValue进行，而是通过指针变量pValue间接去操作它所指向的变量的数据。所以取值操作符号<em>也叫间访操作符号。间访就是间接访问的意思。<br>第14行代码通过iValue变量修改了本身的值，因为pValue在程序里一直指向该变量，变量本身值发生变化理所当然会影响后面到</em>pValue取值，所以第16行的*pValue取到的就是变化过的值了。</p><h2 id="3-指针指向数组"><a href="#3-指针指向数组" class="headerlink" title="3. 指针指向数组"></a>3. 指针指向数组</h2><p>数组的名称代表整个数组，其意义等价于一个指针，表示数组的首地址，也就是第一个元素的内存地址。因此，指针可以用来指向数组名称。比如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> arrA[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;;<br><span class="hljs-attribute">Int</span> *pA = arrA;    // 注意arrA前不能再加取地址符&amp;<br></code></pre></td></tr></table></figure><p>其意义如下图所表示：</p><img src="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/10%E6%8C%87%E9%92%88%E7%B2%BE%E9%AB%93/2.png" class=""><h2 id="4-指针指向动态分配内存"><a href="#4-指针指向动态分配内存" class="headerlink" title="4. 指针指向动态分配内存"></a>4. 指针指向动态分配内存</h2><p>一个良好的程序更偏重于运行时的灵活性，编译时对程序过多的限制会削弱程序的质量，有时候甚至降低程序的性能。比如定义一个整数数组来保存学生的成绩，但目前的问题是并不知道学生的数量，如果定义成int arrScore[50]能满足一般的要求，可是在特殊情况学生有200人呢，程序不得不修改成int arrScore[200]。此时对于大多数情况只用了不到50个空间的情况来言，就是对内存空间的浪费。<br>动态分配内存就是运行时在进程内存空间的自由储存区（也称为堆区）去申请实际可需的内存，然后用来保存数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">char</span> szName[] = “SunWuKong”;<br>cout&lt;&lt;” szName变量的内存地址：”&lt;&lt;(<span class="hljs-keyword">int</span> *)szName&lt;&lt;endl;<br></code></pre></td></tr></table></figure><h3 id="4-1-C语言的动态分配内存"><a href="#4-1-C语言的动态分配内存" class="headerlink" title="4.1 C语言的动态分配内存"></a>4.1 C语言的动态分配内存</h3><p>C语言用malloc函数来实现内存的动态分配。比如申请100个int的内存空间：<br>int * pA = (int *)malloc( 100 * sizeof(int) );<br>这句代码用下图表示其意义：</p><img src="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/10%E6%8C%87%E9%92%88%E7%B2%BE%E9%AB%93/3.png" class=""><p>Malloc函数返回一块申请成功的内存，这块内存并没有明确的变量来表示它。我们要使用这块内存，就必须用一定类型的指针去指向它（就是保存他的内存地址，从而知道这块风水宝地在哪里）。这也是C++程序里为什么有指针这种数据类型的原因之一。<br>使用malloc函数注意三点：<br>    - malloc函数返回的是void *指针，要赋予别的类型指针，必须强制转换。<br>    - 所需要的空间大小需要自己计算。<br>    - 动态分配的内存使用结束后用free函数释放，否则引起内存泄露。</p><h3 id="4-2-空类型指针void-的理解"><a href="#4-2-空类型指针void-的理解" class="headerlink" title="4.2 空类型指针void *的理解"></a>4.2 空类型指针void *的理解</h3><p>void *表示空类型指针，通常人们又简称为空指针，它仅仅单纯的保存一个内存地址，这个内存地址的数据是什么类型或者这个这个内存地址将要放什么类型的数据取决于后面的实现。Malloc函数返回的就是void *，因为新申请的内存用来装什么类型的数据往往是个未知数，如果你确定了用来装整数，就可以把void *强制转化成int *。如果你心血来潮，想用来装结构变量的数据，还可以转换成结构指针。<br>程序实例5-1：VoidPoint(空指针的应用理解)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">22.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-number">23.</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-number">24.</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tagSTUDENT</span></span><br><span class="hljs-class">25.&#123;</span><br><span class="hljs-number">26.</span>    <span class="hljs-keyword">char</span> szName[<span class="hljs-number">20</span>];<br><span class="hljs-number">27.</span>    <span class="hljs-keyword">int</span>  iAge;<br><span class="hljs-number">28.</span>&#125; T_STUDENT, *PT_STUDENT;<br><span class="hljs-number">29.</span><br><span class="hljs-number">30.</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">31.</span>&#123;<br><span class="hljs-number">32.</span><span class="hljs-keyword">void</span> * pA = <span class="hljs-built_in">malloc</span>( <span class="hljs-number">100</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>) );<br><span class="hljs-number">33.</span><span class="hljs-keyword">int</span> * pScore = (<span class="hljs-keyword">int</span> *)pA;<br><span class="hljs-number">34.</span>*pScore = <span class="hljs-number">100</span>;<br><span class="hljs-number">35.</span>cout&lt;&lt;*pScore&lt;&lt;endl;                  <span class="hljs-comment">// 输出100</span><br><span class="hljs-number">36.</span>T_STUDENT tZhangSan = &#123;<span class="hljs-string">&quot; ZhangSan&quot;</span>, <span class="hljs-number">20</span>&#125;;<br><span class="hljs-number">37.</span>T_STUDENT * pStudent = (T_STUDENT *) pA;<br><span class="hljs-number">38.</span>*pStudent = tZhangSan;<br><span class="hljs-number">39.</span>cout&lt;&lt;(*pStudent).iAge&lt;&lt;endl;           <span class="hljs-comment">// 输出20</span><br><span class="hljs-number">40.</span>     <span class="hljs-built_in">free</span>(pA);<br><span class="hljs-number">41.</span>&#125;<br></code></pre></td></tr></table></figure><p>程序说明：<br>第12行先把申请到的内存强制转化成整型指针，说明准备用来装整数。第13行就是利用指针给空间赋一个整数值，然后在第14行输出。<br>第16行又把申请到的内存用来装一个学生的结构变量，所以先把void*强制转化成结构指针，然后通过第17行直接把一个结构变量赋予到pStudent所指向的内存里。<br>第18行的(*pStudent)是指针变量取值，因为pStudent是结构指针，所以取值取到的就是一个结构的数据。因为cout并没有能力直接输出一个结构的信息，所以通过点号输出结构里的指定成员的值。<br>第19行的free是释放动态分配的内存。<br>此例说明，动态分配的内存可以反复使用，怎么使用取决于程序业务逻辑的实现。</p><h3 id="4-3-C-的动态分配内存"><a href="#4-3-C-的动态分配内存" class="headerlink" title="4.3 C++的动态分配内存"></a>4.3 C++的动态分配内存</h3><p>C++采用new操作符在堆空间上申请动态内存，使用完后用delete释放。比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> * pA = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>;    <span class="hljs-comment">//申请一个整数大小的动态内存，然后用pA指向它。</span><br><span class="hljs-keyword">delete</span> pA;          <span class="hljs-comment">//使用完毕后释放动态分配的内存。</span><br></code></pre></td></tr></table></figure><p>指针也可以指向动态分配的数组空间，比如</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">int</span> * pA = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];  <br></code></pre></td></tr></table></figure><p>这里的pA指向一个动态分配的整数数组的首地址(即第1个元素的地址)，数组有5个元素。释放这样的内存是：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">delete</span> []pA;         <span class="hljs-regexp">//</span>注意不能少了中括号[ ]<br></code></pre></td></tr></table></figure><p>值得注意的是[ ]不能写成()，比如：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">int</span> * pA = <span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(<span class="hljs-number">5</span>); <span class="hljs-comment">//这不是申请数组空间，而是申请一个整数空间，并赋予初值5。</span><br></code></pre></td></tr></table></figure><p>使用new动态分配内存注意：</p><ul><li>new和delete并不是函数，而是c++的操作符</li><li>new操作符号后必须指定数据类型，如果是数组空间，[ ]里的数字就表示这种数据类型的个数，而不是字节总的大小。</li><li>由于new操作符指明了数据类型，所以不需要强制转化，就可以用相应数据类型的指针来指向申请成功的动态内存。<h2 id="5-指针数组"><a href="#5-指针数组" class="headerlink" title="5. 指针数组"></a>5. 指针数组</h2>定义一个整数指针数组：<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> * pA[<span class="hljs-number">3</span>]；int iA, iB, iC;  <br><span class="hljs-attribute">pA</span>[<span class="hljs-number">0</span>] = &amp;iA; pA[<span class="hljs-number">1</span>] = &amp;iB; pA[<span class="hljs-number">2</span>] = &amp;iC;<br></code></pre></td></tr></table></figure>这表明每个元素都是一个整数指针，可以用来保存一个整数变量的内存地址（指向一个整数变量）。如下图所示：</li></ul><img src="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/10%E6%8C%87%E9%92%88%E7%B2%BE%E9%AB%93/4.png" class=""><p>因为指针数组里每个整数指针也可以用来指向一个一维数组，因此指针数组可以用来“模拟”二维数组，只是这里的一维数组在内存上可以不用靠在一起。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> * pA[<span class="hljs-number">3</span>]；<br><span class="hljs-attribute">int</span> iA[<span class="hljs-number">5</span>], iB[<span class="hljs-number">5</span>], iC[<span class="hljs-number">5</span>];<br><span class="hljs-attribute">pA</span>[<span class="hljs-number">0</span>] = iA;   pA[<span class="hljs-number">1</span>] = iB;pA[<span class="hljs-number">2</span>] = iC;<br></code></pre></td></tr></table></figure><h2 id="6-指针的指针（二级指针）"><a href="#6-指针的指针（二级指针）" class="headerlink" title="6. 指针的指针（二级指针）"></a>6. 指针的指针（二级指针）</h2><p>指针的指针简称二级指针，这种指针指向另一个指针变量的内存地址。例如：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> iA = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">int</span> * pA = &amp;iA;<br><span class="hljs-built_in">int</span> **ppA = &amp;pA;<br></code></pre></td></tr></table></figure><p>这里ppA就是一个二级指针，它指向的是另一个指针变量pA的内存地址，而不是一个普通整数变量的内存地址。不能写成：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">int **ppA = <span class="hljs-meta">&amp;iA;  <span class="hljs-comment">// 错误，iA只能用一级指针来指向。</span></span><br></code></pre></td></tr></table></figure><img src="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/10%E6%8C%87%E9%92%88%E7%B2%BE%E9%AB%93/5.png" class=""><h2 id="7-指针的运算"><a href="#7-指针的运算" class="headerlink" title="7. 指针的运算"></a>7. 指针的运算</h2><p>指针的运算通常是指当一个指针指向一个内存地址后，通过一定的偏移指向新的内存地址。比如</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> arrValue = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;;<br><span class="hljs-attribute">int</span> * pA = arrValue;<br><span class="hljs-attribute">pA</span> = pA + <span class="hljs-number">1</span>;<br><span class="hljs-attribute">cout</span>&lt;&lt;*pA &lt;endl;<br></code></pre></td></tr></table></figure><img src="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/10%E6%8C%87%E9%92%88%E7%B2%BE%E9%AB%93/6.png" class=""><p>当指针加1后，相当于往后移动了一个数据单位，所移动的内存字节数取决于指针的类型。这里是整数指针，所以内存实际上移动了4个字节。可以得出结论：<br>指针偏移1个单位，实际移动的字节数等于指针类型所占的字节数。<br>灵活利用指针的偏移，有时可以使程序代码变得简洁又高效。</p><h2 id="8-指针与字符串"><a href="#8-指针与字符串" class="headerlink" title="8. 指针与字符串"></a>8. 指针与字符串</h2><p>字符串即字符数组，而指针可以指向数组，所以字符指针可以指向字符串。字符指针取值取到的是指针当前指向位置的字符。<br>程序示例TranslateBig.cpp：把所有字符串转化为大写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-number">2.</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-number">3.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctype.h&gt;</span>    <span class="hljs-comment">// 字符函数库</span></span><br><span class="hljs-number">4.</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">5.</span>&#123;<br><span class="hljs-number">6.</span>    <span class="hljs-keyword">char</span> szInfo[] = <span class="hljs-string">&quot;I am a student!&quot;</span>;<br><span class="hljs-number">7.</span>    <span class="hljs-keyword">char</span> * pszValue = szInfo;<br><span class="hljs-number">8.</span><span class="hljs-keyword">while</span>(*pszValue != <span class="hljs-number">0</span>)<br><span class="hljs-number">9.</span>&#123;<br><span class="hljs-number">10.</span>*pszValue = <span class="hljs-built_in">toupper</span>(*pszValue);<br><span class="hljs-number">11.</span>pszValue++;<br><span class="hljs-number">12.</span>&#125;<br><span class="hljs-number">13.</span>cout&lt;&lt;szInfo&lt;&lt;endl;<br><span class="hljs-number">14.</span>&#125;<br></code></pre></td></tr></table></figure><p>程序运行结果：<br>I AM A STUDENT!<br>程序说明：<br>（1）、*pszValue字符指针取值取到的是一个字符，由于pszValue++导致指针逐渐往后偏移，所以每次取道的值是不一样的，当取道字符串的最后一个空字符时，由于空字符的ASCII值就是0，0值即为假，所以刚好遍历完字符串后退出循环。<br>（2）、第10行的函数toupper是把一个函数转化为大写。要使用字符库函数，必须包含头文件&lt;ctype.h&gt;。把取到的字符转化为大写后然后再赋值回去，这里利用了指针来修改数据。<br>[特别提醒]<br>很多人定义字符串的时候很喜欢这样定义：<br>char * pszInfo = “I am a student!”;<br>这样其意义侧重于定义字符指针，然后指向一个没有名称的常量字符串，这个字符串是不可修改的。对于本例要改变成大写就是不合符要求的。如果你这样定义，可以通过编译，但运行的时候第10行将引起崩溃。</p><h2 id="9-二维数组的指针访问形式"><a href="#9-二维数组的指针访问形式" class="headerlink" title="9. 二维数组的指针访问形式"></a>9. 二维数组的指针访问形式</h2><p>假设定义有二维整数数组：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> arrKey[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = &#123; &#123;<span class="hljs-number">100</span>,<span class="hljs-number">200</span>&#125;, &#123;<span class="hljs-number">300</span>, <span class="hljs-number">400</span>&#125;, &#123; <span class="hljs-number">500</span>, <span class="hljs-number">600</span>&#125; &#125;;<br></code></pre></td></tr></table></figure><p>如果要输出第2行第2列的元素值，最简单的形式是利用下标：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cout</span>&lt;&lt;arrKey[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><p>因为arrKey等价于指针，所以也可以通过指针形式来访问第2行第2列的元素值：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cout</span>&lt;&lt;*(*(arrKey + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>);   // 输出第<span class="hljs-number">2</span>行第<span class="hljs-number">2</span>列的值即<span class="hljs-number">400</span><br></code></pre></td></tr></table></figure><p>分析示意图如下图：</p><img src="/2021/05/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/10%E6%8C%87%E9%92%88%E7%B2%BE%E9%AB%93/7.png" class=""><h2 id="10-数组指针的指针"><a href="#10-数组指针的指针" class="headerlink" title="10. 数组指针的指针"></a>10. 数组指针的指针</h2><p>先看代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-number">2.</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-number">3.</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">4.</span>&#123;<br><span class="hljs-number">5.</span>    <span class="hljs-keyword">int</span> iValue = <span class="hljs-number">300</span>;<br><span class="hljs-number">6.</span>    <span class="hljs-keyword">int</span> *pValue = &amp;iValue;  <span class="hljs-comment">// 指向变量，取变量地址</span><br><span class="hljs-number">7.</span>    cout &lt;&lt; <span class="hljs-string">&quot;iValue:&quot;</span>&lt;&lt;*pValue&lt;&lt;endl;<br><span class="hljs-number">8.</span>   <br><span class="hljs-number">9.</span>    <span class="hljs-keyword">int</span> arrValue[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>&#125;;<br><span class="hljs-number">10.</span>    <span class="hljs-keyword">int</span> * pA = arrValue;  <span class="hljs-comment">//指向一维数组，数组名即数组首元素地址等价于指针，故直接赋值于Pa</span><br><span class="hljs-number">11.</span>    cout&lt;&lt;<span class="hljs-string">&quot;arrValue[0]:&quot;</span>&lt;&lt;*pA&lt;&lt;endl;    <span class="hljs-comment">// 通过指针输出第一个元素的值</span><br><span class="hljs-number">12.</span>    <br><span class="hljs-number">13.</span>    <span class="hljs-keyword">int</span> arrKey[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = &#123; &#123;<span class="hljs-number">100</span>,<span class="hljs-number">200</span>&#125;, &#123;<span class="hljs-number">300</span>, <span class="hljs-number">400</span>&#125;, &#123; <span class="hljs-number">500</span>, <span class="hljs-number">600</span>&#125; &#125;;<br><span class="hljs-number">14.</span>    <span class="hljs-built_in"><span class="hljs-keyword">int</span></span> (* ppA)[<span class="hljs-number">2</span>] = arrKey;  <span class="hljs-comment">// 指向数组指针的指针</span><br><span class="hljs-number">15.</span>    cout&lt;&lt; <span class="hljs-string">&quot;arrKey[0]0]:&quot;</span>&lt;&lt;(*ppA)[<span class="hljs-number">0</span>]&lt;&lt;endl;   <span class="hljs-comment">// (*ppA)指针取值取到第一个数组</span><br><span class="hljs-number">16.</span><br><span class="hljs-number">17.</span>    <span class="hljs-keyword">int</span> arrNum[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>&#125;;<br><span class="hljs-number">18.</span>    <span class="hljs-built_in"><span class="hljs-keyword">int</span></span> (*pNum)[<span class="hljs-number">5</span>] = &amp;arrNum;  <br><span class="hljs-number">19.</span>    cout&lt;&lt; <span class="hljs-string">&quot;arrNum[1]:&quot;</span>&lt;&lt;(*pNum)[<span class="hljs-number">1</span>]&lt;&lt;endl;<br><span class="hljs-number">20.</span>&#125;<br></code></pre></td></tr></table></figure><p>程序运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs iValue:300">arrValue[0]:100<br>arrKey[0]0]:100<br>arrNum[1]:200<br></code></pre></td></tr></table></figure><p>程序说明：<br>第14行代码即定义一个指向数组指针的指针。如果写成： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> arrValue[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = &#123; &#123;<span class="hljs-number">100</span>,<span class="hljs-number">200</span>&#125;, &#123;<span class="hljs-number">300</span>, <span class="hljs-number">400</span>&#125;, &#123; <span class="hljs-number">500</span>, <span class="hljs-number">600</span>&#125; &#125;;<br><span class="hljs-attribute">int</span> * pA = arrValue;  // 编译出错<br></code></pre></td></tr></table></figure><p>编译产生的错误提示：cannot convert from ‘int [3][2]’ to ‘int *’。这说明二维数组名arrValue和一级指针pA是不等价的数据类型，不能相互转化。<br>二维数组arrValue[3][2]可以看成是一个一维数组arrValue[3]，只是这个一维数组里的每个元素又是一个一维数组。二维数组的名称arrValue代表这个一维数组的首地址，而不是一个普通整数元素的地址。所以二维数组名是在一定意义上的二级指针。<br>注意：<br>当程序需要指定一个指向数组指针的指针时，别忘了括号。对比一下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> (* ppA)[<span class="hljs-number">2</span>] = arrValue;  <span class="hljs-comment">// 指向数组指针的指针</span><br><span class="hljs-built_in">int</span> *pA[<span class="hljs-number">2</span>];              <span class="hljs-comment">// 指针数组</span><br></code></pre></td></tr></table></figure><p>指向数组指针的维数一定要一致。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> arrKey[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = &#123; &#123;<span class="hljs-number">100</span>,<span class="hljs-number">200</span>&#125;, &#123;<span class="hljs-number">300</span>, <span class="hljs-number">400</span>&#125;, &#123; <span class="hljs-number">500</span>, <span class="hljs-number">600</span>&#125; &#125;;<br><span class="hljs-attribute">int</span> (* ppA)[<span class="hljs-number">5</span>] = arrKey;  // <span class="hljs-number">5</span>和<span class="hljs-number">2</span>不一致，导致编译错误<br></code></pre></td></tr></table></figure><p>编译错误提示：cannot convert from ‘int [3][2]’ to ‘int (*)[5]’<br>[特别提醒]<br>指向数组指针的指针是比较难以理解的，所幸的是实际应用极少。原因很简单，既然定义了数组，一般情况下通过数组名称结合下标就可以很方便的访问元素。因此，这种语法如果一时难以理解，并不是一件可怕的事情，你甚至可以不屑一顾，甚至置之不理。</p>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树 AVL树 B树等算法树介绍</title>
    <link href="/2021/05/10/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04%E4%BA%8C%E5%8F%89%E6%A0%91%20AVL%E6%A0%91%20B%E6%A0%91%E7%AD%89%E7%AE%97%E6%B3%95%E6%A0%91%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/05/10/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/04%E4%BA%8C%E5%8F%89%E6%A0%91%20AVL%E6%A0%91%20B%E6%A0%91%E7%AD%89%E7%AE%97%E6%B3%95%E6%A0%91%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉查找树-Binary-Search-Tree"><a href="#二叉查找树-Binary-Search-Tree" class="headerlink" title="二叉查找树(Binary Search Tree)"></a>二叉查找树(Binary Search Tree)</h1><p>二叉查找树（Binary Search Tree，也叫二叉排序树，即Binary Sort Tree）能够支持多种动态集合操作，它可以用来表示有序集合、建立索引等，因而在实际应用中，二叉排序树是一种非常重要的数据结构。</p><p>从算法复杂度角度考虑，我们知道，作用于二叉查找树上的基本操作（如查找，插入等）的时间复杂度与树的高度成正比。对一个含n个节点的完全二叉树，这些操作的最坏情况运行时间为O(log n)。但如果因为频繁的删除和插入操作，导致树退化成一个n个节点的线性链（此时即为一个单链表），则这些操作的最坏情况运行时间为O(n)。为了克服以上缺点，很多二叉查找树的变形出现了，如红黑树、AVL树，Treap树等。</p><h1 id="平衡二叉树AVL树"><a href="#平衡二叉树AVL树" class="headerlink" title="平衡二叉树AVL树"></a>平衡二叉树AVL树</h1><p>二叉平衡树是一种二叉排序树，其中每一个结点的左子树和右子树的高度差至多等于1。</p><p>平衡因子BF将二叉树上结点的左子树深度减去右子树深度的值称为平衡因子BF。</p><h1 id="多路查找树（B树）"><a href="#多路查找树（B树）" class="headerlink" title="多路查找树（B树）"></a>多路查找树（B树）</h1><ol><li><p>2-3树：（最简单的B树）</p><ul><li>2结点包含一个元素和两个孩子（或没有孩子）。</li><li>3结点包含两个元素和三个孩子（或没有孩子）。</li><li>并且2-3树的所有叶子结点都在同一层上。</li></ul></li><li><p>   3-4树<br>    同上<br>       4结点包含3个元素和4个孩子（或没有孩子）；</p></li><li><p>   B树</p></li></ol><p>结点最大的孩子书称为B树的阶。2-3树是3阶B树，2-3-4树是4阶B树。<br>如果结点不是叶结点，则其至少有两颗子树。<br>每一个非根的分支结点都有k-1个元素和k个孩子，其中⌈m/2⌉&lt;=k&lt;=m。<br>各一个叶子结点n都有n-1个元素，其中⌈m/2⌉&lt;=k&lt;=m。<br>所有叶子结点都位于同意层次。<br>所有结点包含以下信息数据（n,A0,K1,A1,K2,A2….,Kn,An）,其中，K1…Kn为关键字，且K1 &lt; Kn；A0.。。。An为指向子树根节点的指针，且指针Ai-1所指子树中所有关键字均要小于Ki，An所指子树中的关键字均要大于Kn。<br>总结<br>在B树上查找过程是一个顺指针查找结点和在结点中查找关键字的交叉过程。<br>由于B树每个结点可以具有比二叉树多得多的元素，所以与二叉树的操作不同，它们减少了必须访问结点和数据块的数量，从而提高了性能。可以说，B树的数据结构就是为了内外存的数据交互准备的。<br>例子：比如说一个B树的阶树为1001（即1个结点包含1000个关键字），高度为2。那么它可以存储超过10亿个关键字。我们只要将根结点持久的保留在内存中，那么在这棵树上，寻找一个关键字至多需要读取两次硬盘即可。</p><h1 id="多路查找平衡二叉树-B-树"><a href="#多路查找平衡二叉树-B-树" class="headerlink" title="多路查找平衡二叉树(B+树)"></a>多路查找平衡二叉树(B+树)</h1><p>提出原因：对于B数，遍历时，会多次对根节点进行遍历，造成损耗。</p><p>B树中每个元素只会在该树中出现一次，有可能在叶子结点，也有可能在分支结点。而在B+树中，出现在分子结点中的元素会被当作他们在该分支结点位置的中序后继者（叶子结点）中再次出现。另外，每个叶子结点都会保存一个指向后一个叶子结点的指针。<br>所以，B+树中所有的叶子结点包含了全部的关键字信息，及指向包含这些关键字记录的指针，叶子结点本身依照关键字大小自小而大顺序排列。<br>所有分支结点可以看成索引，结点中仅含有其子树中的最大（最小）关键字。<br>B+树结构特别适合带有范围的查找，比如说查找年龄19-22岁的学生人数，可以通过从根结点出发找到第一个19岁的学生，再在叶子结点中按照顺序查找到符合范围的所有记录。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/XieCH1995/article/details/79762786">https://blog.csdn.net/XieCH1995/article/details/79762786</a></p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>doxygen使用说明</title>
    <link href="/2021/03/24/04DevOps/12%20doxygen%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <url>/2021/03/24/04DevOps/12%20doxygen%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p>doxygen文档中的所有命令均以反斜杠（\）或符号（@）开头，两者是等价的。</p><p>c++注释模板</p>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>makefile及编译相关知识汇总</title>
    <link href="/2021/02/24/04DevOps/11%20makefile%E5%8F%8A%E7%BC%96%E8%AF%91%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/"/>
    <url>/2021/02/24/04DevOps/11%20makefile%E5%8F%8A%E7%BC%96%E8%AF%91%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h2><p>makefile 的详细语法可参考 <a href="https://gitee.com/fly542/how-to-write-makefile">跟我一起写Makefile</a></p><h2 id="2-gcc-编译参数"><a href="#2-gcc-编译参数" class="headerlink" title="2. gcc 编译参数"></a>2. gcc 编译参数</h2><p>以-g，-f，-m，-O，-W或–param开头的选项是自动的传递给gcc调用的各个子流程。为了将其他选项传递给这些进程，必须使用-W <letter>选项。</p><p>执行 “ gcc -v –help” 可显示所有子流程的命令行选项 </p><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. 注意事项</h2><h3 id="Bstatic-及-Bdynamic-使用注意事项"><a href="#Bstatic-及-Bdynamic-使用注意事项" class="headerlink" title="Bstatic 及 Bdynamic 使用注意事项"></a>Bstatic 及 Bdynamic 使用注意事项</h3><ul><li>使用-Wl,-Bstatic 后续使用的库强制引用静态链接库</li><li>使用-Wl,-Bdynamic 后续的库强制引用动态库</li></ul>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>makeifle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux中errno说明</title>
    <link href="/2021/02/22/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/09Linux%E4%B8%ADerrno%E8%AF%B4%E6%98%8E/"/>
    <url>/2021/02/22/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/09Linux%E4%B8%ADerrno%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p>linux下errno的对应数值位于/usr/include/asm-generic/errno-base.h 和/usr/include/asm-generic/errno.h 中</p><p>errno-base.h的内容如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _ASM_GENERIC_ERRNO_BASE_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ASM_GENERIC_ERRNO_BASE_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EPERM 1<span class="hljs-comment">/* Operation not permitted */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOENT 2<span class="hljs-comment">/* No such file or directory */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ESRCH 3<span class="hljs-comment">/* No such process */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EINTR 4<span class="hljs-comment">/* Interrupted system call */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EIO 5<span class="hljs-comment">/* I/O error */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENXIO 6<span class="hljs-comment">/* No such device or address */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>E2BIG 7<span class="hljs-comment">/* Argument list too long */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOEXEC 8<span class="hljs-comment">/* Exec format error */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EBADF 9<span class="hljs-comment">/* Bad file number */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ECHILD10<span class="hljs-comment">/* No child processes */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EAGAIN11<span class="hljs-comment">/* Try again */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOMEM12<span class="hljs-comment">/* Out of memory */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EACCES13<span class="hljs-comment">/* Permission denied */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EFAULT14<span class="hljs-comment">/* Bad address */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOTBLK15<span class="hljs-comment">/* Block device required */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EBUSY16<span class="hljs-comment">/* Device or resource busy */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EEXIST17<span class="hljs-comment">/* File exists */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EXDEV18<span class="hljs-comment">/* Cross-device link */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENODEV19<span class="hljs-comment">/* No such device */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOTDIR20<span class="hljs-comment">/* Not a directory */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EISDIR21<span class="hljs-comment">/* Is a directory */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EINVAL22<span class="hljs-comment">/* Invalid argument */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENFILE23<span class="hljs-comment">/* File table overflow */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EMFILE24<span class="hljs-comment">/* Too many open files */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOTTY25<span class="hljs-comment">/* Not a typewriter */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ETXTBSY26<span class="hljs-comment">/* Text file busy */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EFBIG27<span class="hljs-comment">/* File too large */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOSPC28<span class="hljs-comment">/* No space left on device */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ESPIPE29<span class="hljs-comment">/* Illegal seek */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EROFS30<span class="hljs-comment">/* Read-only file system */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EMLINK31<span class="hljs-comment">/* Too many links */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EPIPE32<span class="hljs-comment">/* Broken pipe */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EDOM33<span class="hljs-comment">/* Math argument out of domain of func */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ERANGE34<span class="hljs-comment">/* Math result not representable */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><p>errno.h的内容如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _ASM_GENERIC_ERRNO_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ASM_GENERIC_ERRNO_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;asm-generic/errno-base.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EDEADLK35<span class="hljs-comment">/* Resource deadlock would occur */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENAMETOOLONG36<span class="hljs-comment">/* File name too long */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOLCK37<span class="hljs-comment">/* No record locks available */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOSYS38<span class="hljs-comment">/* Function not implemented */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOTEMPTY39<span class="hljs-comment">/* Directory not empty */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ELOOP40<span class="hljs-comment">/* Too many symbolic links encountered */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EWOULDBLOCKEAGAIN<span class="hljs-comment">/* Operation would block */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOMSG42<span class="hljs-comment">/* No message of desired type */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EIDRM43<span class="hljs-comment">/* Identifier removed */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ECHRNG44<span class="hljs-comment">/* Channel number out of range */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EL2NSYNC45<span class="hljs-comment">/* Level 2 not synchronized */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EL3HLT46<span class="hljs-comment">/* Level 3 halted */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EL3RST47<span class="hljs-comment">/* Level 3 reset */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ELNRNG48<span class="hljs-comment">/* Link number out of range */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EUNATCH49<span class="hljs-comment">/* Protocol driver not attached */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOCSI50<span class="hljs-comment">/* No CSI structure available */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EL2HLT51<span class="hljs-comment">/* Level 2 halted */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EBADE52<span class="hljs-comment">/* Invalid exchange */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EBADR53<span class="hljs-comment">/* Invalid request descriptor */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EXFULL54<span class="hljs-comment">/* Exchange full */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOANO55<span class="hljs-comment">/* No anode */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EBADRQC56<span class="hljs-comment">/* Invalid request code */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EBADSLT57<span class="hljs-comment">/* Invalid slot */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EDEADLOCKEDEADLK</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EBFONT59<span class="hljs-comment">/* Bad font file format */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOSTR60<span class="hljs-comment">/* Device not a stream */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENODATA61<span class="hljs-comment">/* No data available */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ETIME62<span class="hljs-comment">/* Timer expired */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOSR63<span class="hljs-comment">/* Out of streams resources */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENONET64<span class="hljs-comment">/* Machine is not on the network */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOPKG65<span class="hljs-comment">/* Package not installed */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EREMOTE66<span class="hljs-comment">/* Object is remote */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOLINK67<span class="hljs-comment">/* Link has been severed */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EADV68<span class="hljs-comment">/* Advertise error */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ESRMNT69<span class="hljs-comment">/* Srmount error */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ECOMM70<span class="hljs-comment">/* Communication error on send */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EPROTO71<span class="hljs-comment">/* Protocol error */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EMULTIHOP72<span class="hljs-comment">/* Multihop attempted */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EDOTDOT73<span class="hljs-comment">/* RFS specific error */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EBADMSG74<span class="hljs-comment">/* Not a data message */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EOVERFLOW75<span class="hljs-comment">/* Value too large for defined data type */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOTUNIQ76<span class="hljs-comment">/* Name not unique on network */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EBADFD77<span class="hljs-comment">/* File descriptor in bad state */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EREMCHG78<span class="hljs-comment">/* Remote address changed */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ELIBACC79<span class="hljs-comment">/* Can not access a needed shared library */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ELIBBAD80<span class="hljs-comment">/* Accessing a corrupted shared library */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ELIBSCN81<span class="hljs-comment">/* .lib section in a.out corrupted */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ELIBMAX82<span class="hljs-comment">/* Attempting to link in too many shared libraries */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ELIBEXEC83<span class="hljs-comment">/* Cannot exec a shared library directly */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EILSEQ84<span class="hljs-comment">/* Illegal byte sequence */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ERESTART85<span class="hljs-comment">/* Interrupted system call should be restarted */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ESTRPIPE86<span class="hljs-comment">/* Streams pipe error */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EUSERS87<span class="hljs-comment">/* Too many users */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOTSOCK88<span class="hljs-comment">/* Socket operation on non-socket */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EDESTADDRREQ89<span class="hljs-comment">/* Destination address required */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EMSGSIZE90<span class="hljs-comment">/* Message too long */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EPROTOTYPE91<span class="hljs-comment">/* Protocol wrong type for socket */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOPROTOOPT92<span class="hljs-comment">/* Protocol not available */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EPROTONOSUPPORT93<span class="hljs-comment">/* Protocol not supported */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ESOCKTNOSUPPORT94<span class="hljs-comment">/* Socket type not supported */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EOPNOTSUPP95<span class="hljs-comment">/* Operation not supported on transport endpoint */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EPFNOSUPPORT96<span class="hljs-comment">/* Protocol family not supported */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EAFNOSUPPORT97<span class="hljs-comment">/* Address family not supported by protocol */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EADDRINUSE98<span class="hljs-comment">/* Address already in use */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EADDRNOTAVAIL99<span class="hljs-comment">/* Cannot assign requested address */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENETDOWN100<span class="hljs-comment">/* Network is down */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENETUNREACH101<span class="hljs-comment">/* Network is unreachable */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENETRESET102<span class="hljs-comment">/* Network dropped connection because of reset */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ECONNABORTED103<span class="hljs-comment">/* Software caused connection abort */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ECONNRESET104<span class="hljs-comment">/* Connection reset by peer */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOBUFS105<span class="hljs-comment">/* No buffer space available */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EISCONN106<span class="hljs-comment">/* Transport endpoint is already connected */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOTCONN107<span class="hljs-comment">/* Transport endpoint is not connected */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ESHUTDOWN108<span class="hljs-comment">/* Cannot send after transport endpoint shutdown */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ETOOMANYREFS109<span class="hljs-comment">/* Too many references: cannot splice */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ETIMEDOUT110<span class="hljs-comment">/* Connection timed out */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ECONNREFUSED111<span class="hljs-comment">/* Connection refused */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EHOSTDOWN112<span class="hljs-comment">/* Host is down */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EHOSTUNREACH113<span class="hljs-comment">/* No route to host */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EALREADY114<span class="hljs-comment">/* Operation already in progress */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EINPROGRESS115<span class="hljs-comment">/* Operation now in progress */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ESTALE116<span class="hljs-comment">/* Stale file handle */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EUCLEAN117<span class="hljs-comment">/* Structure needs cleaning */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOTNAM118<span class="hljs-comment">/* Not a XENIX named type file */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENAVAIL119<span class="hljs-comment">/* No XENIX semaphores available */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EISNAM120<span class="hljs-comment">/* Is a named type file */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EREMOTEIO121<span class="hljs-comment">/* Remote I/O error */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EDQUOT122<span class="hljs-comment">/* Quota exceeded */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOMEDIUM123<span class="hljs-comment">/* No medium found */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EMEDIUMTYPE124<span class="hljs-comment">/* Wrong medium type */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ECANCELED125<span class="hljs-comment">/* Operation Canceled */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOKEY126<span class="hljs-comment">/* Required key not available */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EKEYEXPIRED127<span class="hljs-comment">/* Key has expired */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EKEYREVOKED128<span class="hljs-comment">/* Key has been revoked */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EKEYREJECTED129<span class="hljs-comment">/* Key was rejected by service */</span></span><br><br><span class="hljs-comment">/* for robust mutexes */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>EOWNERDEAD130<span class="hljs-comment">/* Owner died */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>ENOTRECOVERABLE131<span class="hljs-comment">/* State not recoverable */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ERFKILL132<span class="hljs-comment">/* Operation not possible due to RF-kill */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EHWPOISON133<span class="hljs-comment">/* Memory page has hardware error */</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>const char*, char const*, char*const 的区别</title>
    <link href="/2021/01/13/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/08%E5%90%84%E7%B1%BBconst%20%E6%8C%87%E9%92%88%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/01/13/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/08%E5%90%84%E7%B1%BBconst%20%E6%8C%87%E9%92%88%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>Bjarne在他的The C++ Programming Language里面给出过一个助记的方法：把一个声明从右向左读。</p><figure class="highlight nim"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs nim"><span class="hljs-built_in">char</span> * <span class="hljs-keyword">const</span> cp; ( * 读成 <span class="hljs-built_in">pointer</span> to ) <br>cp <span class="hljs-keyword">is</span> a <span class="hljs-keyword">const</span> <span class="hljs-built_in">pointer</span> to <span class="hljs-built_in">char</span> <br><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> * p; <br>p <span class="hljs-keyword">is</span> a <span class="hljs-built_in">pointer</span> to <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span>; <br><br><span class="hljs-built_in">char</span> <span class="hljs-keyword">const</span> * p;  //同上因为C++里面没有<span class="hljs-keyword">const</span>*的运算符，所以<span class="hljs-keyword">const</span>只能属于前面的类型。<br></code></pre></td></tr></table></figure><p>C++标准规定，const关键字放在类型或变量名之前等价的。</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> n=<span class="hljs-number">5</span>;    //same <span class="hljs-keyword">as</span> below<br><span class="hljs-built_in">int</span> <span class="hljs-keyword">const</span> m=<span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> *p;    //same <span class="hljs-keyword">as</span> below  <span class="hljs-keyword">const</span> (<span class="hljs-built_in">int</span>) * p<br><span class="hljs-built_in">int</span> <span class="hljs-keyword">const</span> *q;    // (<span class="hljs-built_in">int</span>) <span class="hljs-keyword">const</span> *p<br><br><span class="hljs-built_in">char</span> ** p1;  // <span class="hljs-built_in">pointer</span> to <span class="hljs-built_in">pointer</span> to <span class="hljs-built_in">char</span>;  p1是一个指针，p1指向的对象类型是<span class="hljs-built_in">char</span> *<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> **p2; // <span class="hljs-built_in">pointer</span> to    <span class="hljs-built_in">pointer</span> to <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span>; p2是一个非<span class="hljs-keyword">const</span>指针，p2指向对象类型指向<span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> 类型的指针<br><span class="hljs-built_in">char</span> * <span class="hljs-keyword">const</span> * p3; // <span class="hljs-built_in">pointer</span> to <span class="hljs-keyword">const</span> <span class="hljs-built_in">pointer</span> to <span class="hljs-built_in">char</span>; p3是一个指向<span class="hljs-keyword">const</span>指针的指针，而这个<span class="hljs-keyword">const</span>指针是一个指向<span class="hljs-built_in">char</span>类型的指针<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> * <span class="hljs-keyword">const</span> * p4; // <span class="hljs-built_in">pointer</span> to <span class="hljs-keyword">const</span> <span class="hljs-built_in">pointer</span> to <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span>; p4是一个执行<span class="hljs-keyword">const</span>指针的指针，这个<span class="hljs-keyword">const</span>指针指向<span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span><br><span class="hljs-built_in">char</span> ** <span class="hljs-keyword">const</span> p5;<br>// <span class="hljs-keyword">const</span> <span class="hljs-built_in">pointer</span> to    <span class="hljs-built_in">pointer</span> to    <span class="hljs-built_in">char</span> <br><span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> ** <span class="hljs-keyword">const</span> p6;<br>// <span class="hljs-keyword">const</span> <span class="hljs-built_in">pointer</span> to    <span class="hljs-built_in">pointer</span> to <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> <br><span class="hljs-built_in">char</span> * <span class="hljs-keyword">const</span> * <span class="hljs-keyword">const</span> p7;<br>// <span class="hljs-keyword">const</span> <span class="hljs-built_in">pointer</span> to <span class="hljs-keyword">const</span> <span class="hljs-built_in">pointer</span> to    <span class="hljs-built_in">char</span> <br><span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> * <span class="hljs-keyword">const</span> * <span class="hljs-keyword">const</span> p8;<br>// <span class="hljs-keyword">const</span> <span class="hljs-built_in">pointer</span> to <span class="hljs-keyword">const</span> <span class="hljs-built_in">pointer</span> to <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span><br></code></pre></td></tr></table></figure><p>说到这里，我们可以看一道以前Google的笔试题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *p=<span class="hljs-string">&quot;hello&quot;</span>;       <br><span class="hljs-built_in">foo</span>(&amp;p);  <span class="hljs-comment">// 函数foo(const char **pp)下面说法正确的是［］</span><br>A.函数<span class="hljs-built_in">foo</span>()不能改变p指向的字符串内容。<br>B.函数<span class="hljs-built_in">foo</span>()不能使指针p指向malloc生成的地址。<br>C.函数<span class="hljs-built_in">foo</span>()可以使p指向新的字符串常量。<br>D.函数<span class="hljs-built_in">foo</span>()可以把p赋值为 <span class="hljs-literal">NULL</span>。<br>至于这道题的答案是众说纷纭。针对上面这道题，我们可以用下面的程序测试：<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **pp)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    *pp=NULL;</span><br><span class="hljs-comment">//    *pp=&quot;Hello world!&quot;;</span><br>        *pp = (<span class="hljs-keyword">char</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-built_in">snprintf</span>(*pp, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;hi google!&quot;</span>);<br><span class="hljs-comment">//       (*pp)[1] = &#x27;x&#x27;;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span></span><br><span class="hljs-function"><span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *p=<span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;before foo %s/n&quot;</span>,p);<br>    <span class="hljs-built_in">foo</span>(&amp;p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;after foo %s/n&quot;</span>,p);<br>    p[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结论如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">在foo函数中，可以使main函数中p指向的新的字符串常量。<br>在foo函数中，可以使main函数中的p指向<span class="hljs-literal">NULL</span>。<br>在foo函数中，可以使main函数中的p指向由malloc生成的内存块，并可以在main中用free释放，但是会有警告。但是注意，即使在foo中让p指向了由malloc生成的内存块，但是仍旧不能用p[<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;x&#x27;</span>;这样的语句改变p指向的内容。<br>在foo中，不能用(*pp)[<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;x&#x27;</span>;这样的语句改变p的内容。<br>所以，感觉gcc只是根据<span class="hljs-keyword">const</span>的字面的意思对其作了限制，即对于<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>*p这样的指针，不管后来p实际指向malloc的内存或者常量的内存，均不能用p[<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;x&#x27;</span>这样的语句改变其内容。但是很奇怪，在foo里面，对p指向malloc的内存后，可以用snprintf之类的函数修改其内容。<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宏定义define的奇技淫巧</title>
    <link href="/2020/12/08/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/07%E5%AE%8F%E5%AE%9A%E4%B9%89define%E7%9A%84%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    <url>/2020/12/08/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/07%E5%AE%8F%E5%AE%9A%E4%B9%89define%E7%9A%84%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="define中的三个特殊符号：-，-，"><a href="#define中的三个特殊符号：-，-，" class="headerlink" title="define中的三个特殊符号：#，##，#@"></a>define中的三个特殊符号：#，##，#@</h1><div class="code-wrapper"><pre><code class="hljs">#define Conn(x,y) x##y#define ToChar(x)#@x#define ToString(x)#x</code></pre></div><p>对应解释如下：</p><div class="code-wrapper"><pre><code class="hljs">(1)x##y 表示x连接y，如下：    int n = Conn(123,456);/* 结果就是n=123456;*/    char* str = Conn(&quot;asdf&quot;,&quot;adf&quot;);/*结果就是 str = &quot;asdfadf&quot;;*/(2) #@x代表给x加上单引号，结果返回是一个const char。如下：    char a = ToChar(1);结果就是a=&#39;1&#39;;    做个越界试验char a = ToChar(123);结果就错了;    但是如果你的参数超过四个字符，编译器就给给你报错了！    error C2015: too many characters in constant ：P(3) #x 给x加双引号    char* str = ToString(123132);就成了str=&quot;123132&quot;;    </code></pre></div><h1 id="得到一个field在结构体-struct-中的偏移量"><a href="#得到一个field在结构体-struct-中的偏移量" class="headerlink" title="得到一个field在结构体(struct)中的偏移量"></a>得到一个field在结构体(struct)中的偏移量</h1><div class="code-wrapper"><pre><code class="hljs">#define OFFSETOF( type, field ) ((size_t)&amp;(( type *) 0)-&gt; field )</code></pre></div><h1 id="得到一个结构体中field所占用的字节数"><a href="#得到一个结构体中field所占用的字节数" class="headerlink" title="得到一个结构体中field所占用的字节数"></a>得到一个结构体中field所占用的字节数</h1><div class="code-wrapper"><pre><code class="hljs">#define FSIZ( type, field ) sizeof(((type *) 0)-&gt;field )</code></pre></div><h1 id="将一个字母转换为大写"><a href="#将一个字母转换为大写" class="headerlink" title="将一个字母转换为大写"></a>将一个字母转换为大写</h1><div class="code-wrapper"><pre><code class="hljs">#define UPCASE( c )(((c)&gt;=&#39;a&#39;&amp;&amp;(c)&lt;=&#39;z&#39;)?((c)- 0x20):(c))</code></pre></div><h1 id="判断字符是不是10进值的数字"><a href="#判断字符是不是10进值的数字" class="headerlink" title="判断字符是不是10进值的数字"></a>判断字符是不是10进值的数字</h1><div class="code-wrapper"><pre><code class="hljs">#define DECCHK( c )((c)&gt;=&#39;0&#39;&amp;&amp;(c)&lt;=&#39;9&#39;)</code></pre></div><h1 id="判断字符是不是16进值的数字"><a href="#判断字符是不是16进值的数字" class="headerlink" title="判断字符是不是16进值的数字"></a>判断字符是不是16进值的数字</h1><div class="code-wrapper"><pre><code class="hljs">#define HEXCHK( c )(((c)&gt;=&#39;0&#39;&amp;&amp;(c)&lt;=&#39;9&#39;)||((c)&gt;=&#39;A&#39;&amp;&amp;(c)&lt;=&#39;F&#39;)||((c)&gt;=&#39;a&#39;&amp;&amp;(c)&lt;=&#39;f&#39;))</code></pre></div><h1 id="防止溢出的一个方法"><a href="#防止溢出的一个方法" class="headerlink" title="防止溢出的一个方法"></a>防止溢出的一个方法</h1><div class="code-wrapper"><pre><code class="hljs">#define INC_SAT( val )(val =((val)+1 &gt;(val))?(val)+1 :(val))</code></pre></div><h1 id="返回数组元素的个数"><a href="#返回数组元素的个数" class="headerlink" title="返回数组元素的个数"></a>返回数组元素的个数</h1><div class="code-wrapper"><pre><code class="hljs">#define ARR_SIZE( a )(sizeof((a))/sizeof((a[0])))</code></pre></div><h1 id="使用一些宏跟踪调试"><a href="#使用一些宏跟踪调试" class="headerlink" title="使用一些宏跟踪调试"></a>使用一些宏跟踪调试</h1><div class="code-wrapper"><pre><code class="hljs">_LINE_ /*(两个下划线)，对应%d*/_FILE_ /*对应%s*/_DATE_ /*对应%s*/_TIME_ /*对应%s*/</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim常用命令及快捷键</title>
    <link href="/2020/12/04/04DevOps/10%20vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2020/12/04/04DevOps/10%20vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p><strong>关闭文件</strong><br>:w    //保存文件<br>:w vpser.net //保存至vpser.net文件<br>:q      //退出编辑器，如果文件已修改请使用下面的命令<br>:q!     //退出编辑器，且不保存<br>:wq     //退出编辑器，且保存文件<br>：x：保存当前文件并退出</p><p><strong>移动光标类命令</strong></p><p>h ：光标左移一个字符<br>l ：光标右移一个字符<br>space：光标右移一个字符<br>Backspace：光标左移一个字符<br>k或Ctrl+p：光标上移一行<br>j或Ctrl+n ：光标下移一行<br>Enter ：光标下移一行<br>w或W ：光标右移一个字至字首<br>b或B ：光标左移一个字至字首<br>e或E ：光标右移一个字至字尾<br>) ：光标移至句尾<br>( ：光标移至句首<br>}：光标移至段落开头<br>{：光标移至段落结尾<br>nG：光标移至第n行首<br>n+：光标下移n行<br>n-：光标上移n行<br>n$：光标移至第n行尾<br>H ：光标移至屏幕顶行<br>M ：光标移至屏幕中间行<br>L ：光标移至屏幕最后行<br>0：（注意是数字零）光标移至当前行首<br>$：光标移至当前行尾<br>n+     //向下跳n行<br>n-     //向上跳n行<br>nG     //跳到行号为n的行<br>G      //跳至文件的底部</p><p><strong>屏幕翻滚类命令</strong><br>Ctrl+u：向文件首翻半屏<br>Ctrl+d：向文件尾翻半屏<br>Ctrl+f：向文件尾翻一屏<br>Ctrl＋b；向文件首翻一屏<br>nz：将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部。</p><p><strong>插入文本类命令</strong><br>i ：在光标前<br>I ：在当前行首<br>a：光标后<br>A：在当前行尾<br>o：在当前行之下新开一行<br>O：在当前行之上新开一行<br>r：替换当前字符<br>R：替换当前字符及其后的字符，直至按ESC键<br>s：从当前光标位置处开始，以输入的文本替代指定数目的字符<br>S：删除指定数目的行，并以所输入文本代替之<br>ncw或nCW：修改指定数目的字<br>nCC：修改指定数目的行</p><p><strong>复制、粘贴</strong><br>yy   //将当前行复制到缓存区，也可以用 “ayy 复制，”a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。<br>nyy  //将当前行向下n行复制到缓冲区，也可以用 “anyy 复制，”a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。<br>yw   //复制从光标开始到词尾的字符。<br>nyw  //复制从光标开始的n个单词。<br>y^    //复制从光标到行首的内容。<br>y$    //复制从光标到行尾的内容。<br>p     //粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用”ap 进行粘贴。<br>P     //粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用”aP 进行粘贴。</p><p><strong>文本替换</strong><br>:s/old/new    //用new替换行中首次出现的old<br>:s/old/new/g     //用new替换行中所有的old<br>:n,m s/old/new/g   //用new替换从n到m行里所有的old<br>:%s/old/new/g    //用new替换当前文件里所有的old<br>:%s/\s+$//    //将行未空格删除<br>简单替换表达式<br>:%s/four/4/g<br>“%” 范围前缀表示在所有行中执行替换，最后的 “g” 标记表示替换行中的所有匹配点，如果仅仅对当前行进行操作，那么只要去掉%即可<br>如果你有一个像 “thirtyfour” 这样的单词，上面的命令会出错。这种情况下，这个单词会被替换成”thirty4″。要解决这个问题，用 “&lt; span&gt;来指定匹配单词开头：<br> :%s/<br>显然，这样在处理 “fourty” 的时候还是会出错。用 “&lt;” 来解决这个问题：<br> :%s//4/g<br>如果你在编码，你可能只想替换注释中的 “four”，而保留代码中的。由于这很难指定，可以在替换命令中加一个 “c” 标记，这样，Vim 会在每次替换前提示你：<br>:%s//4/gc</p><p><strong>单词精确匹配替换</strong><br>sed -e “s//new/g”  file</p><p><strong>删除命令</strong><br>ndw或ndW：删除光标处开始及其后的n-1个字<br>d0：删至行首   (0为数字)<br>d$：删至行尾<br>D : 删除至行尾<br>ndd：删除当前行及其后n-1行<br>x或X：删除一个字符，x删除光标后的，而X删除光标前的<br>Ctrl+u：删除输入方式下所输入的文本<br>x     //删除当前字符<br>nx     //删除从光标开始的n个字符<br>dd    //删除当前行<br>ndd   //向下删除当前行在内的n行<br>u     //撤销上一步操作<br>U    //撤销对当前行的所有操作</p><p><strong>搜索及替换命令</strong><br>/pattern：从光标开始处向文件尾搜索pattern<br>?pattern：从光标开始处向文件首搜索pattern<br>n：在同一方向重复上一次搜索命令<br>N：在反方向上重复上一次搜索命令<br>：s/p1/p2/g：将当前行中所有p1均用p2替代<br>：n1,n2s/p1/p2/g：将第n1至n2行中所有p1均用p2替代<br>：g/p1/s//p2/g：将文件中所有p1均用p2替换</p><p><strong>最后行方式命令</strong><br>：n1,n2 co n3：将n1行到n2行之间的内容拷贝到第n3行下<br>：n1,n2 m n3：将n1行到n2行之间的内容移至到第n3行下<br>：n1,n2 d ：将n1行到n2行之间的内容删除<br>：e filename：打开文件filename进行编辑<br>：!command：执行shell命令command<br>：n1,n2 w!command：将文件中n1行至n2行的内容作为command的输入并执行之，若不指定n1，n2，则表示将整个文件内容作为command的输入<br>：r!command：将命令command的输出结果放到当前行<br>：%!xxd  十六进制显示内容</p>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚继承</title>
    <link href="/2020/11/20/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/06%E8%99%9A%E7%BB%A7%E6%89%BF/"/>
    <url>/2020/11/20/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/06%E8%99%9A%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="虚继承的目的"><a href="#虚继承的目的" class="headerlink" title="虚继承的目的"></a>虚继承的目的</h1><p>虚继承是解决C++多重继承问题的一种手段，从不同途径继承来的同一基类，会在子类中存在多份拷贝。这将存在两个问题：</p><p>其一，浪费存储空间；</p><p>第二，存在二义性问题，通常可以将派生类对象的地址赋值给基类对象，实现的具体方式是，将基类指针指向继承类（继承类有基类的拷贝）中的基类对象的地址，但是多重继承可能存在一个基类的多份拷贝，这就出现了二义性</p>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间及其转换</title>
    <link href="/2020/11/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/05%E6%97%B6%E9%97%B4/"/>
    <url>/2020/11/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/05%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="1-日历时间-Calendar-Time"><a href="#1-日历时间-Calendar-Time" class="headerlink" title="1. 日历时间(Calendar Time)"></a>1. 日历时间(Calendar Time)</h1><p>unix系统内部对时间的表示方式均是以自Epoch以来的秒数来度量的。Epoch即通用协调时间(UTC, 也称为格林威治标准时间，或GMT)的1970年1月1日早晨零点。</p><p>日历时间存储在类型为 <strong>time_t</strong>  的变量中。</p><h2 id="1-1-gettimeofday"><a href="#1-1-gettimeofday" class="headerlink" title="1.1 gettimeofday()"></a>1.1 gettimeofday()</h2><p> 可与tv指向的缓冲区中返回日历时间</p><p>int gettimeofday(struct timeval * tv, struct timezone *tz)</p><p>其中tv定义如下：</p><p>struct timeval {</p><p>​    time_t tv_sec;                 //      UTC 以来的秒数</p><p>​    suseconds_t tv_usec;    //  微妙</p><p>}</p><p>tz为历史产物，目前已经被废弃，应始终设置为NULL。</p><h2 id="1-2-time"><a href="#1-2-time" class="headerlink" title="1.2 time()"></a>1.2 time()</h2><p>time() 返回Epoch以来的秒数，和gettimeofday()所返回的tv参数中的tv_sec字段的数值相同。</p><h2 id="1-3-时间转换函数"><a href="#1-3-时间转换函数" class="headerlink" title="1.3 时间转换函数"></a>1.3 时间转换函数</h2><p>time_t 可通过以下转换函数实现不同格式间的转换</p><img src="/2020/11/17/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&C++/05%E6%97%B6%E9%97%B4/time.png" class=""><h3 id="1-3-1-ctime"><a href="#1-3-1-ctime" class="headerlink" title="1.3.1 ctime()"></a>1.3.1 ctime()</h3><p>char* ctime(const time_t *timep) 将返回一个长达26字节的字符串 (包含\n \0 结束符)，内含标准格式的日期和时间。如下所示:<br><code>Tue Nov 17 12:22:34 CST 2020</code><br>ctime函数自动的对本地时区和DST（Daylight Saving Time， 即夏令时）的设置加以考虑，返回的字符串是静态分配，下一次调用将会覆盖上一次的值。（可使用ctime_r版本替换ctime，解决静态分配问题)</p><h3 id="1-3-2-gmtime-和localtime-将time-t转为分解时间"><a href="#1-3-2-gmtime-和localtime-将time-t转为分解时间" class="headerlink" title="1.3.2 gmtime() 和localtime() 将time_t转为分解时间"></a>1.3.2 gmtime() 和localtime() 将time_t转为分解时间</h3><p>函数gmtime()和localtime()可将time_t 的值转换为分解时间，分解时间被置于静态结构中，其地址作为函数结果返回</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">struct tm * <span class="hljs-title">gmtime</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">time_t</span> *timep)</span></span><br><span class="hljs-function">struct tm * <span class="hljs-title">localtime</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">time_t</span> * timep)</span></span><br></code></pre></td></tr></table></figure><p>gmtime 可以将<code>日历时间</code>转换为UTC的分解时间，（GM来自于格林威治标准时间)<br>localtime 将考虑时区和夏令时设置，返回对应于系统本地时间的一个分解时间</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">gmtime_r</span> 和localtime_r 为两个函数的可重入版本<br></code></pre></td></tr></table></figure><h3 id="1-3-3-mktime-将本地分解时间转为time-t"><a href="#1-3-3-mktime-将本地分解时间转为time-t" class="headerlink" title="1.3.3 mktime() 将本地分解时间转为time_t"></a>1.3.3 mktime() 将本地分解时间转为time_t</h3><p>这一转换会忽略输入tm结构中的tm_wday和tm_yday字段。</p><h2 id="1-4-分解时间和打印格式之间的转换"><a href="#1-4-分解时间和打印格式之间的转换" class="headerlink" title="1.4 分解时间和打印格式之间的转换"></a>1.4 分解时间和打印格式之间的转换</h2><h3 id="1-4-1-asctime"><a href="#1-4-1-asctime" class="headerlink" title="1.4.1 asctime()"></a>1.4.1 asctime()</h3><p>char* asctime(const struct tm* timeptr) 功能等同于ctime(), 只不过接收的参数是struct tm*类型；本地时区的设置对本函数没有影响<br><code>可重入版本为asctime_r()</code></p><h3 id="1-4-2-strftime-更精确的打印格式转换"><a href="#1-4-2-strftime-更精确的打印格式转换" class="headerlink" title="1.4.2 strftime() 更精确的打印格式转换"></a>1.4.2 strftime() 更精确的打印格式转换</h3><p>size_t strftime(char * outstr, size_t maxsize, const char * format, cosnt struct tm* timeptr); 在分解时间转换为打印格式时，可通过format 提供更为精确的控制。令timeptr指向分解时间，strftime()会将以null结尾，由日期和时间组成的响应字符串置于outstr所指向的缓冲区中</p><h3 id="strptime-将打印格时间-转换为分解时间"><a href="#strptime-将打印格时间-转换为分解时间" class="headerlink" title="strptime() 将打印格时间 转换为分解时间"></a>strptime() 将打印格时间 转换为分解时间</h3><p>函数strptime() 是strftime()的逆向函数，将字符串转为分解时间<br><code>char * strptime(cosnt char * str, const char * format, struct tm * timeptr)</code></p><h1 id="2-进程时间"><a href="#2-进程时间" class="headerlink" title="2. 进程时间"></a>2. 进程时间</h1><p>也成为cpu时间，以时钟滴答进行计算</p><h2 id="times"><a href="#times" class="headerlink" title="times()"></a>times()</h2><p>clock_t times(struct tms * buf) 获取程序执行消耗的用户时间和cpu时间，tms结构体的前两个字返回调用进程到目前为止使用的用户和系统组件的cpu时间，最后两个字段返回的信息是：父进程(比如，times()的调用者)执行了系统调用wait()的所有已经终止的子进程使用的cpu时间。<br>clock_t 是用时钟计时单元为单位度量时间的整型值。我们可以调用sysconf(_SC_CLK_TCK)来获取每秒包含的时钟计时单元数，然后用这个数字除以clock_t 转换为秒</p><p>注意：clock_t 是有有效范围的，溢出后，times(0的返回值将再次从0开始计算)</p><h2 id="clock"><a href="#clock" class="headerlink" title="clock()"></a>clock()</h2><p>函数<code>clock_t clock(void);</code>  提供了一个简单的接口用于取得进程时间。它返回一个值描述了调用进程使用的总的CPU时间（包括用户和系统).</p>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>监控进程的句柄及启动时间</title>
    <link href="/2020/11/12/04DevOps/09%20%E7%9B%91%E6%8E%A7%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%8F%A5%E6%9F%84%E5%8F%8A%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4/"/>
    <url>/2020/11/12/04DevOps/09%20%E7%9B%91%E6%8E%A7%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%8F%A5%E6%9F%84%E5%8F%8A%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">################################################################################</span><br><span class="hljs-comment">#  Copyright (C) 2015-2018 IQIYI All rights reserved.</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment">#  Author     : </span><br><span class="hljs-comment">#  E-mail     : fly542@gmail.com</span><br><span class="hljs-comment">#  Version    :</span><br><span class="hljs-comment">#  Date       : Wed 04 Nov 2020 09:15:31 AM CST</span><br><span class="hljs-comment">#  Destription: 监控相关句柄数是否正常，每2秒输出一次相关内容</span><br><span class="hljs-comment">#               使用方法：./watch_fd 进程过滤唯一关键字</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">################################################################################</span><br><span class="hljs-built_in">cd</span> `dirname <span class="hljs-variable">$0</span>`<br><br>keyInfo=<span class="hljs-variable">$1</span><br>proc_num=<span class="hljs-string">&quot;&quot;</span>   <span class="hljs-comment"># 获取到的最新进程id</span><br>sleep_idle=2   <span class="hljs-comment"># 监控间隔</span><br>outSeq=1       <span class="hljs-comment"># 输出行数</span><br>procInfoInt=20 <span class="hljs-comment"># 进程启动信息输出记录行数，</span><br><br>startTime=0<br><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;keyInfo&#125;</span>&quot;</span> ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;usage: <span class="hljs-variable">$0</span> key_path &quot;</span><br>    <span class="hljs-built_in">exit</span>;<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;key path=<span class="hljs-variable">$&#123;keyInfo&#125;</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 获取进程的启动时间</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">GetProcStartTime</span></span>() <br>&#123; <br>    <span class="hljs-built_in">local</span> PID=<span class="hljs-variable">$1</span><br>    <span class="hljs-keyword">if</span> [ -z <span class="hljs-variable">$&#123;PID&#125;</span> ]<br>    <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;usage <span class="hljs-variable">$&#123;0&#125;</span> pid&quot;</span><br>        <span class="hljs-built_in">return</span> 0    <br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">local</span> STARTTIME=$(awk <span class="hljs-string">&#x27;&#123;print int($22 /100)&#125;&#x27;</span> /proc/<span class="hljs-variable">$PID</span>/<span class="hljs-built_in">stat</span>)<br>    <span class="hljs-built_in">local</span> UT=$(awk <span class="hljs-string">&#x27;&#123;print int($1)&#125;&#x27;</span> /proc/uptime)<br>    <span class="hljs-built_in">local</span> NOW=$(date +%s)<br>    startTime=$((NOW - (UT - STARTTIME)))<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;proc <span class="hljs-variable">$PID</span> start at : `date -d @<span class="hljs-variable">$startTime</span>`&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 获取最新进程的进程id</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">GetLatestPid</span></span>()<br>&#123; <br>    proc_num_all=(`ps -ef |grep <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;keyInfo&#125;</span>&quot;</span> |grep -v grep |awk <span class="hljs-string">&#x27;&#123;print $2,$8&#125;&#x27;</span> |grep <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;keyInfo&#125;</span>&quot;</span> |awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`)<br>    proc_num=<span class="hljs-variable">$&#123;proc_num_all[@]&#125;</span><br>    <span class="hljs-keyword">for</span> tmpPid <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;proc_num_all[@]&#125;</span>&quot;</span><br>    <span class="hljs-keyword">do</span><br>        oldTime=<span class="hljs-variable">$&#123;startTime&#125;</span><br>        GetProcStartTime <span class="hljs-variable">$&#123;tmpPid&#125;</span><br>        <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;oldTime&#125;</span> -lt <span class="hljs-variable">$&#123;startTime&#125;</span> ]<br>        <span class="hljs-keyword">then</span><br>            proc_num=<span class="hljs-variable">$&#123;tmpPid&#125;</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">done</span><br>&#125;<br><br>GetLatestPid<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br>    sleep <span class="hljs-variable">$&#123;sleep_idle&#125;</span><br>    <span class="hljs-keyword">if</span> [ ! -d /proc/<span class="hljs-variable">$&#123;proc_num&#125;</span> ]<br>    <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;proc <span class="hljs-variable">$&#123;proc_num&#125;</span> is dead&quot;</span><br>    <span class="hljs-keyword">else</span> <br>        proInfo=`ls /proc/<span class="hljs-variable">$&#123;proc_num&#125;</span>/fd -l 2&gt;&amp;1 |awk <span class="hljs-string">&#x27;</span><br><span class="hljs-string">        BEGIN &#123;sum=0; sock=0; efd=0; ep=0; fd=0;&#125; </span><br><span class="hljs-string">        &#123; </span><br><span class="hljs-string">            sum += 1; </span><br><span class="hljs-string">            if($0~&quot;socket&quot;) &#123; sock+=1; &#125; </span><br><span class="hljs-string">            else if($0~&quot;eventfd&quot;) &#123; efd+=1; &#125; </span><br><span class="hljs-string">            else if($0~&quot;eventpoll&quot;) &#123; ep+=1; &#125; </span><br><span class="hljs-string">            else &#123; fd+=1; &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        END &#123;print &quot;total_fd=&quot;sum, &quot;sock_num=&quot;sock, &quot;eventfd_num=&quot;efd, &quot;eventpool_num=&quot;ep, &quot;file_fd=&quot;fd &#125;&#x27;</span><br>        `<br>        vmInfo=`cat /proc/<span class="hljs-variable">$&#123;proc_num&#125;</span>/status |awk <span class="hljs-string">&#x27;BEGIN&#123;vm=&quot;&quot;; rss=&quot;&quot;;&#125; &#123; if($0~&quot;VmSize&quot;) vm=$2$3 fi; if($0~&quot;VmRSS&quot;) rss=$2$3 fi;&#125; END &#123;print &quot;VmSize=&quot;vm, &quot;VmRSS=&quot;rss&#125;&#x27;</span>`<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;`date &quot;</span>+%Y-%m-%d %T<span class="hljs-string">&quot;` pid=<span class="hljs-variable">$&#123;proc_num&#125;</span> <span class="hljs-variable">$&#123;proInfo&#125;</span> <span class="hljs-variable">$&#123;vmInfo&#125;</span>&quot;</span><br>        outSeq=$((<span class="hljs-variable">$&#123;outSeq&#125;</span>+<span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> [ $(( <span class="hljs-variable">$outSeq</span> % <span class="hljs-variable">$&#123;procInfoInt&#125;</span> )) -eq 0 ]<br>        <span class="hljs-keyword">then</span><br>            GetProcStartTime <span class="hljs-variable">$&#123;proc_num&#125;</span><br>        <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">exit</span> 0<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>01 kafka 驱动使用详解</title>
    <link href="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/01%20kafka%E9%A9%B1%E5%8A%A8/"/>
    <url>/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/01%20kafka%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="c-c-驱动地址"><a href="#c-c-驱动地址" class="headerlink" title="c/c++驱动地址"></a>c/c++驱动地址</h2><p>国内：<a href="https://gitee.com/mirrors/librdkafka">https://gitee.com/mirrors/librdkafka</a></p><p>github: <a href="https://github.com/edenhill/librdkafka">https://github.com/edenhill/librdkafka</a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>高性能代理软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kafka基础</title>
    <link href="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/00%20kafka%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/00%20kafka%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>本文转载自《<a href="https://developer.51cto.com/art/202003/611798.htm%E3%80%8B">https://developer.51cto.com/art/202003/611798.htm》</a></p><p>本文主要讲解 Kafka 是什么、Kafka 的架构包括工作流程和存储机制，以及生产者和消费者。</p><h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h1><p>Kafka 是一个分布式的基于发布/订阅模式的消息队列(Message Queue)，主要应用与大数据实时处理领域。</p><p><strong>消息队列</strong></p><p>Kafka 本质上是一个 MQ(Message Queue)，使用消息队列的好处?(面试会问)</p><ul><li><strong>解耦</strong>：允许我们独立的扩展或修改队列两边的处理过程。</li><li><strong>可恢复性</strong>：即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。</li><li><strong>缓冲</strong>：有助于解决生产消息和消费消息的处理速度不一致的情况。</li><li><strong>灵活性&amp;峰值处理能力</strong>：不会因为突发的超负荷的请求而完全崩溃，消息队列能够使关键组件顶住突发的访问压力。</li><li><strong>异步通信</strong>：消息队列允许用户把消息放入队列但不立即处理它。</li></ul><p><strong>发布/订阅模式</strong></p><p>一对多，生产者将消息发布到 Topic 中，有多个消费者订阅该主题，发布到 Topic 的消息会被所有订阅者消费，被消费的数据不会立即从 Topic 清除。</p><img src="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/00%20kafka%E5%9F%BA%E7%A1%80/1.jpg" class=""><h1 id="2-架构"><a href="#2-架构" class="headerlink" title="2. 架构"></a>2. 架构</h1><img src="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/00%20kafka%E5%9F%BA%E7%A1%80/2.jpg" class=""><p>Kafka 存储的消息来自任意多被称为 Producer 生产者的进程。数据从而可以被发布到不同的 Topic 主题下的不同 Partition 分区。</p><p>在一个分区内，这些消息被索引并连同时间戳存储在一起。其它被称为 Consumer 消费者的进程可以从分区订阅消息。</p><p>Kafka 运行在一个由一台或多台服务器组成的集群上，并且分区可以跨集群结点分布。</p><p>下面给出 Kafka 一些重要概念，让大家对 Kafka 有个整体的认识和感知，后面还会详细的解析每一个概念的作用以及更深入的原理：</p><ul><li><strong>Producer</strong>： 消息生产者，向 Kafka Broker 发消息的客户端。</li><li><strong>Consumer</strong>：消息消费者，从 Kafka Broker 取消息的客户端。</li><li><strong>Consumer Group</strong>：消费者组(CG)，消费者组内每个消费者负责消费不同分区的数据，提高消费能力。一个分区只能由组内一个消费者消费，消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。</li><li><strong>Broker</strong>：一台 Kafka 机器就是一个 Broker。一个集群由多个 Broker 组成。一个 Broker 可以容纳多个 Topic。</li><li><strong>Topic</strong>：可以理解为一个队列，Topic 将消息分类，生产者和消费者面向的是同一个 Topic。</li><li><strong>Partition</strong>：为了实现扩展性，提高并发能力，一个非常大的 Topic 可以分布到多个 Broker (即服务器)上，一个 Topic 可以分为多个 Partition，每个 Partition 是一个 有序的队列。</li><li><strong>Replica</strong>：副本，为实现备份的功能，保证集群中的某个节点发生故障时，该节点上的 Partition 数据不丢失，且 Kafka 仍然能够继续工作，Kafka 提供了副本机制，一个 Topic 的每个分区都有若干个副本，一个 Leader 和若干个 Follower。</li><li><strong>Leader</strong>：每个分区多个副本的“主”副本，生产者发送数据的对象，以及消费者消费数据的对象，都是 Leader。</li><li><strong>Follower</strong>：每个分区多个副本的“从”副本，实时从 Leader 中同步数据，保持和 Leader 数据的同步。Leader 发生故障时，某个 Follower 还会成为新的 Leader。</li><li><strong>Offset</strong>：消费者消费的位置信息，监控数据消费到什么位置，当消费者挂掉再重新恢复的时候，可以从消费位置继续消费。</li><li><strong>Zookeeper</strong>：Kafka 集群能够正常工作，需要依赖于 Zookeeper，Zookeeper 帮助 Kafka 存储和管理集群信息。</li></ul><h1 id="3-工作流程"><a href="#3-工作流程" class="headerlink" title="3. 工作流程"></a>3. 工作流程</h1><p>Kafka集群将 Record 流存储在称为 Topic 的类别中，每个记录由一个键、一个值和一个时间戳组成。</p><img src="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/00%20kafka%E5%9F%BA%E7%A1%80/3.jpg" class=""><p>Kafka 是一个分布式流平台，这到底是什么意思?</p><ul><li>发布和订阅记录流，类似于消息队列或企业消息传递系统。</li><li>以容错的持久方式存储记录流。</li><li>处理记录流。</li></ul><p>Kafka 中消息是以 Topic 进行分类的，生产者生产消息，消费者消费消息，面向的都是同一个 Topic。</p><p>Topic 是逻辑上的概念，而 Partition 是物理上的概念，每个 Partition 对应于一个 log 文件，该 log 文件中存储的就是 Producer 生产的数据。</p><p>Producer 生产的数据会不断追加到该 log 文件末端，且每条数据都有自己的 Offset。</p><p>消费者组中的每个消费者，都会实时记录自己消费到了哪个 Offset，以便出错恢复时，从上次的位置继续消费。</p><h1 id="4-存储机制"><a href="#4-存储机制" class="headerlink" title="4. 存储机制"></a>4. 存储机制</h1><img src="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/00%20kafka%E5%9F%BA%E7%A1%80/4.jpg" class=""><p>由于生产者生产的消息会不断追加到 log 文件末尾，为防止 log 文件过大导致数据定位效率低下，Kafka 采取了分片和索引机制。</p><p>它将每个 Partition 分为多个 Segment，每个 Segment 对应两个文件：“.index” 索引文件和 “.log” 数据文件。</p><p>这些文件位于同一文件下，该文件夹的命名规则为：topic 名-分区号。例如，first 这个 topic 有三分分区，则其对应的文件夹为 first-0，first-1，first-2。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs pgsql"># ls /root/data/kafka/first<span class="hljs-number">-0</span><br><span class="hljs-number">00000000000000009014.</span><span class="hljs-keyword">index</span><br><span class="hljs-number">00000000000000009014.</span><span class="hljs-keyword">log</span><br><span class="hljs-number">00000000000000009014.</span>timeindex<br><span class="hljs-number">00000000000000009014.</span><span class="hljs-keyword">snapshot</span><br>leader-epoch-<span class="hljs-keyword">checkpoint</span> <br></code></pre></td></tr></table></figure><p>index 和 log 文件以当前 Segment 的第一条消息的 Offset 命名。下图为 index 文件和 log 文件的结构示意图：</p><img src="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/00%20kafka%E5%9F%BA%E7%A1%80/5.jpg" class=""><p>“.index” 文件存储大量的索引信息，“.log” 文件存储大量的数据，索引文件中的元数据指向对应数据文件中 Message 的物理偏移量。</p><h1 id="5-生产者"><a href="#5-生产者" class="headerlink" title="5. 生产者"></a>5. 生产者</h1><p><strong>分区策略</strong></p><p><strong>分区原因：</strong></p><ul><li>方便在集群中扩展，每个 Partition 可以通过调整以适应它所在的机器，而一个 Topic 又可以有多个 Partition 组成，因此可以以 Partition 为单位读写了。</li><li>可以提高并发，因此可以以 Partition 为单位读写了。</li></ul><p><strong>分区原则</strong>：我们需要将 Producer 发送的数据封装成一个 ProducerRecord 对象。</p><p>该对象需要指定一些参数：</p><ul><li>topic：string 类型，NotNull。</li><li>partition：int 类型，可选。</li><li>timestamp：long 类型，可选。</li><li>key：string 类型，可选。</li><li>value：string 类型，可选。</li><li>headers：array 类型，Nullable。</li></ul><p>①指明 Partition 的情况下，直接将给定的 Value 作为 Partition 的值。</p><p>②没有指明 Partition 但有 Key 的情况下，将 Key 的 Hash 值与分区数取余得到 Partition 值。</p><p>③既没有 Partition 有没有 Key 的情况下，第一次调用时随机生成一个整数(后面每次调用都在这个整数上自增)，将这个值与可用的分区数取余，得到 Partition 值，也就是常说的 Round-Robin 轮询算法。</p><p><strong>数据可靠性保证</strong></p><p>为保证 Producer 发送的数据，能可靠地发送到指定的 Topic，Topic 的每个 Partition 收到 Producer 发送的数据后，都需要向 Producer 发送 ACK(ACKnowledge 确认收到)。</p><p>如果 Producer 收到 ACK，就会进行下一轮的发送，否则重新发送数据。</p><p><strong>①副本数据同步策略</strong></p><p>何时发送 ACK?确保有 Follower 与 Leader 同步完成，Leader 再发送 ACK，这样才能保证 Leader 挂掉之后，能在 Follower 中选举出新的 Leader 而不丢数据。</p><p>多少个 Follower 同步完成后发送 ACK?全部 Follower 同步完成，再发送 ACK。</p><img src="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/00%20kafka%E5%9F%BA%E7%A1%80/7.jpg" class=""><p><strong>②ISR</strong></p><p>采用第二种方案，所有 Follower 完成同步，Producer 才能继续发送数据，设想有一个 Follower 因为某种原因出现故障，那 Leader 就要一直等到它完成同步。</p><p>这个问题怎么解决?Leader维护了一个动态的 in-sync replica set(ISR)：和 Leader 保持同步的 Follower 集合。</p><p>当 ISR 集合中的 Follower 完成数据的同步之后，Leader 就会给 Follower 发送 ACK。</p><p>如果 Follower 长时间未向 Leader 同步数据，则该 Follower 将被踢出 ISR 集合，该时间阈值由 replica.lag.time.max.ms 参数设定。Leader 发生故障后，就会从 ISR 中选举出新的 Leader。</p><p><strong>③ACK 应答机制</strong></p><p>对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失，所以没必要等 ISR 中的 Follower 全部接受成功。</p><p>所以 Kafka 为用户提供了三种可靠性级别，用户根据可靠性和延迟的要求进行权衡，选择以下的配置。</p><img src="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/00%20kafka%E5%9F%BA%E7%A1%80/8.jpg" class=""><p>Ack 参数配置：</p><ul><li>0：Producer 不等待 Broker 的 ACK，这提供了最低延迟，Broker 一收到数据还没有写入磁盘就已经返回，当 Broker 故障时有可能丢失数据。</li><li>1：Producer 等待 Broker 的 ACK，Partition 的 Leader 落盘成功后返回 ACK，如果在 Follower 同步成功之前 Leader 故障，那么将会丢失数据。</li><li>-1(all)：Producer 等待 Broker 的 ACK，Partition 的 Leader 和 Follower 全部落盘成功后才返回 ACK。但是在 Broker 发送 ACK 时，Leader 发生故障，则会造成数据重复。</li></ul><p><strong>④故障处理细节</strong></p><img src="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/00%20kafka%E5%9F%BA%E7%A1%80/9.jpg" class=""><p>LEO：每个副本最大的 Offset。HW：消费者能见到的最大的 Offset，ISR 队列中最小的 LEO。</p><p><strong>Follower 故障</strong>：Follower 发生故障后会被临时踢出 ISR 集合，待该 Follower 恢复后，Follower 会 读取本地磁盘记录的上次的 HW，并将 log 文件高于 HW 的部分截取掉，从 HW 开始向 Leader 进行同步数据操作。</p><p>等该 Follower 的 LEO 大于等于该 Partition 的 HW，即 Follower 追上 Leader 后，就可以重新加入 ISR 了。</p><p><strong>Leader 故障</strong>：Leader 发生故障后，会从 ISR 中选出一个新的 Leader，之后，为保证多个副本之间的数据一致性，其余的 Follower 会先将各自的 log 文件高于 HW 的部分截掉，然后从新的 Leader 同步数据。</p><p>注意：这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复。</p><p><strong>Exactly Once 语义</strong></p><p>将服务器的 ACK 级别设置为 -1，可以保证 Producer 到 Server 之间不会丢失数据，即 At Least Once 语义。</p><p>相对的，将服务器 ACK 级别设置为 0，可以保证生产者每条消息只会被发送一次，即 At Most Once 语义。</p><p>At Least Once 可以保证数据不丢失，但是不能保证数据不重复;相对的，At Most Once 可以保证数据不重复，但是不能保证数据不丢失。</p><p>但是，对于一些非常重要的信息，比如交易数据，下游数据消费者要求数据既不重复也不丢失，即 Exactly Once 语义。</p><p>0.11 版本的 Kafka，引入了幂等性：Producer 不论向 Server 发送多少重复数据，Server 端都只会持久化一条。</p><p>即：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">At</span> <span class="hljs-variable">Least</span> <span class="hljs-built_in">Once</span> <span class="hljs-operator">+</span> 幂等性 <span class="hljs-operator">=</span> <span class="hljs-variable">Exactly</span> <span class="hljs-built_in">Once</span> <br></code></pre></td></tr></table></figure><p>要启用幂等性，只需要将 Producer 的参数中 enable.idompotence 设置为 true 即可。</p><p>开启幂等性的 Producer 在初始化时会被分配一个 PID，发往同一 Partition 的消息会附带 Sequence Number。</p><p>而 Borker 端会对</p><p>但是 PID 重启后就会变化，同时不同的 Partition 也具有不同主键，所以幂等性无法保证跨分区会话的 Exactly Once。</p><h1 id="6-消费者"><a href="#6-消费者" class="headerlink" title="6. 消费者"></a>6. 消费者</h1><p><strong>消费方式</strong></p><p>Consumer 采用 Pull(拉取)模式从 Broker 中读取数据。</p><p>Consumer 采用 Push(推送)模式，Broker 给 Consumer 推送消息的速率是由 Broker 决定的，很难适应消费速率不同的消费者。</p><p>它的目标是尽可能以最快速度传递消息，但是这样很容易造成 Consumer 来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。</p><p>而 Pull 模式则可以根据 Consumer 的消费能力以适当的速率消费消息。Pull 模式不足之处是，如果 Kafka 没有数据，消费者可能会陷入循环中，一直返回空数据。</p><p>因为消费者从 Broker 主动拉取数据，需要维护一个长轮询，针对这一点， Kafka 的消费者在消费数据时会传入一个时长参数 timeout。</p><p>如果当前没有数据可供消费，Consumer 会等待一段时间之后再返回，这段时长即为 timeout。</p><p><strong>分区分配策略</strong></p><p>一个 Consumer Group 中有多个 Consumer，一个 Topic 有多个 Partition，所以必然会涉及到 Partition 的分配问题，即确定哪个 Partition 由哪个 Consumer 来消费。</p><p>Kafka 有两种分配策略，一个是 RoundRobin，一个是 Range，默认为Range，当消费者组内消费者发生变化时，会触发分区分配策略(方法重新分配)。</p><p><strong>①RoundRobin</strong></p><img src="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/00%20kafka%E5%9F%BA%E7%A1%80/10.jpg" class=""><p>RoundRobin 轮询方式将分区所有作为一个整体进行 Hash 排序，消费者组内分配分区个数最大差别为 1，是按照组来分的，可以解决多个消费者消费数据不均衡的问题。</p><p>但是，当消费者组内订阅不同主题时，可能造成消费混乱，如下图所示，Consumer0 订阅主题 A，Consumer1 订阅主题 B。</p><img src="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/00%20kafka%E5%9F%BA%E7%A1%80/11.jpg" class=""><p>将 A、B 主题的分区排序后分配给消费者组，TopicB 分区中的数据可能分配到 Consumer0 中。</p><p><strong>②Range</strong></p><img src="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/00%20kafka%E5%9F%BA%E7%A1%80/12.jpg" class=""><p>Range 方式是按照主题来分的，不会产生轮询方式的消费混乱问题。</p><p>但是，如下图所示，Consumer0、Consumer1 同时订阅了主题 A 和 B，可能造成消息分配不对等问题，当消费者组内订阅的主题越多，分区分配可能越不均衡。</p><img src="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/05%20kafka/00%20kafka%E5%9F%BA%E7%A1%80/13.jpg" class=""><p><strong>Offset 的维护</strong></p><p>由于 Consumer 在消费过程中可能会出现断电宕机等故障，Consumer 恢复后，需要从故障前的位置继续消费。</p><p>所以 Consumer 需要实时记录自己消费到了哪个 Offset，以便故障恢复后继续消费。</p><p>Kafka 0.9 版本之前，Consumer 默认将 Offset 保存在 Zookeeper 中，从 0.9 版本开始，Consumer 默认将 Offset 保存在 Kafka 一个内置的 Topic 中，该 Topic 为 __consumer_offsets。</p><h1 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h1><p>上面和大家一起深入探讨了 Kafka 的架构，比较偏重理论和基础，这是掌握 Kafka 的必要内容，接下来我会以代码和实例的方式，更新 Kafka 有关 API 以及事务、拦截器、监控等高级篇，让大家彻底理解并且会用 Kafka。</p><p>作者：臧远慧</p>]]></content>
    
    
    <categories>
      
      <category>高性能代理软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>scylladb 介绍</title>
    <link href="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/04%20scylladb&amp;&amp;cassandra/00%20scylladb/"/>
    <url>/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/04%20scylladb&amp;&amp;cassandra/00%20scylladb/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>ScyllaDB是用C++重写的Cassandra，其官网宣称其每节点每秒可处理100万TPS。ScyllaDB完全兼容Apache Cassandra，拥有比Cassandra多10X倍的吞吐量，并降低了延迟。ScyllaDB是性能优异的NoSQL列存储数据库。</p><p>ScyllaDB在垃圾收集或者Compaction的时候不需要暂停（但是通过压测和Longevity测试发现Compaction的过程中对性能还是有很大影响）。</p><p>ScyllaDB在常规生产负载的时候可以添加或删除节点（通过nodetool来同步数据）。</p><p>ScyllaDB是一个P2P的分布式系统，集群中各节点之间相互平等。其数据分布于集群中的各节点，各节点之间每秒钟交换一次信息。</p><p>其每个节点使用Commit Log提交日志捕获写操作来保持数据的正确性。数据首先被写入MemTable（内存中的数据结构）中。当MemTable满后数据被写入SSTable（存储在硬盘上的数据文件）中。</p><p>用户可以使用类似于SQL的CQL来查询数据。用户可以链接至集群中的任意节点。</p><p>在集群中，一个Keyspace代表关系数据库中的一个数据库。一个Keyspace中可以包含多个表。</p><p>参考文档： <a href="https://blog.csdn.net/mytobaby00/article/details/80375196">https://blog.csdn.net/mytobaby00/article/details/80375196</a></p><h1 id="驱动使用说明："><a href="#驱动使用说明：" class="headerlink" title="驱动使用说明："></a>驱动使用说明：</h1><p>datastax提供的cpp驱动，在 centos7 下只能安装v2.9.0 版，高于2.9.0版由于ssl原因无法编译通过，待研究解决中。<br>2.9版驱动地址： <a href="https://downloads.datastax.com/cpp-driver/centos/7/cassandra/v2.9.0/">https://downloads.datastax.com/cpp-driver/centos/7/cassandra/v2.9.0/</a></p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>官方网址：<a href="https://www.scylladb.com/download/#drivers">https://www.scylladb.com/download/#drivers</a><br>官网驱动列表：<a href="https://docs.scylladb.com/getting-started/scylla_drivers/">https://docs.scylladb.com/getting-started/scylla_drivers/</a><br>Cassandra 驱动源码地址：<a href="https://github.com/datastax/cpp-driver/">https://github.com/datastax/cpp-driver/</a><br>Cassandra 驱动rpm包地址: <a href="https://downloads.datastax.com/cpp-driver/centos/7/cassandra/">https://downloads.datastax.com/cpp-driver/centos/7/cassandra/</a><br>Cassandra 驱动依赖包地址: <a href="https://downloads.datastax.com/cpp-driver/centos/7/dependencies/libuv/">https://downloads.datastax.com/cpp-driver/centos/7/dependencies/libuv/</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>scylladb 驱动使用方法</title>
    <link href="/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/04%20scylladb&amp;&amp;cassandra/01%20scylladb%20%E9%A9%B1%E5%8A%A8%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2020/08/31/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/04%20scylladb&amp;&amp;cassandra/01%20scylladb%20%E9%A9%B1%E5%8A%A8%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>本文主要总结下 scylladb 的c/c++驱动使用详细方法与步骤，便于快速进行开发。</p><h2 id="1-基本使用步骤"><a href="#1-基本使用步骤" class="headerlink" title="1. 基本使用步骤"></a>1. 基本使用步骤</h2><h3 id="创建-cluster"><a href="#创建-cluster" class="headerlink" title="创建 cluster"></a>创建 cluster</h3><ol><li>创建方法：<br> CassCluster * cluster = cass_cluster_new();<br> cass_cluster_free(cluster); //不用时释放申请的资源</li><li>对cluster进行参数设置</li></ol><p>根据需要对cluster 进行各种相关参数的设置，主要进行以下设置</p><figure class="highlight reasonml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml">cass<span class="hljs-constructor">_cluster_set_port(<span class="hljs-params">cluster</span>, <span class="hljs-params">port</span>)</span>;  <span class="hljs-comment">//设置集群连接的端口号</span><br>cass<span class="hljs-constructor">_cluster_set_contact_points(<span class="hljs-params">cluster</span>, <span class="hljs-params">addr</span>)</span>; <span class="hljs-comment">//设置集群连接地址，只需要指定一个地址即可</span><br>cass<span class="hljs-constructor">_cluster_set_credentials(<span class="hljs-params">cluster</span>, <span class="hljs-params">user</span>, <span class="hljs-params">pass</span>)</span>; <span class="hljs-comment">//设置集群连接时的认证信息(用户名、密码)</span><br>cass<span class="hljs-constructor">_cluster_set_num_threads_io(<span class="hljs-params">cluster</span>, <span class="hljs-params">num</span>)</span>; <span class="hljs-comment">//设置处理io的线程数，，默认2个</span><br>cass<span class="hljs-constructor">_cluster_set_core_connections_per_host(<span class="hljs-params">cluster</span>, <span class="hljs-params">count</span>)</span>; <span class="hljs-comment">// 设置集群中每个服务端的连接数，默认为1个</span><br></code></pre></td></tr></table></figure><p>总的io连接数=io线程数 × 每个服务端的连接数 × 集群服务端个数</p><h3 id="创建-session"><a href="#创建-session" class="headerlink" title="创建 session"></a>创建 session</h3><p>CassSession维护每个节点的连接以及可调整的I / O线程池，以根据负载平衡策略进行查询。 因为CassSession是线程安全的，所以通常建议您为每个 keyspace 创建一个会话，并在应用程序线程之间共享它。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">CassSession<span class="hljs-operator"> * </span>session = cass<span class="hljs-constructor">_session_new()</span>;<br>cass<span class="hljs-constructor">_session_free(<span class="hljs-params">session</span>)</span>;  <span class="hljs-comment">//不用时释放申请的资源</span><br></code></pre></td></tr></table></figure><h3 id="执行操作语句"><a href="#执行操作语句" class="headerlink" title="执行操作语句"></a>执行操作语句</h3><p>执行操作主要按以下步骤进行处理</p><ol><li>创建操作执行对象<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">CassStatement<span class="hljs-operator"> * </span>statement = cass<span class="hljs-constructor">_statement_new(<span class="hljs-params">qstr</span>.<span class="hljs-params">c_str</span>()</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure>第一个参数为要执行的操作语句，第二个参数代表要使用的占位符个数，在批量循环处理的时候使用占位符时使用，</li><li>执行具体操作语句<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">CassFuture<span class="hljs-operator"> * </span>futrue = cass<span class="hljs-constructor">_session_execute(<span class="hljs-params">session</span>, <span class="hljs-params">statement</span>)</span>;<br></code></pre></td></tr></table></figure></li><li>等待执行结果<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">cass<span class="hljs-constructor">_future_wait(<span class="hljs-params">future</span>)</span>;<br></code></pre></td></tr></table></figure></li><li>判定执行结果<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> (CASS_OK != cass_future_error_code(future)) &#123;<br><span class="hljs-regexp">//</span> 异常处理<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-regexp">//</span> 成功执行相关语句<br>&#125;<br></code></pre></td></tr></table></figure></li><li>释放执行资源<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">cass<span class="hljs-constructor">_statement_free(<span class="hljs-params">statement</span>)</span>;<br>cass<span class="hljs-constructor">_future_free(<span class="hljs-params">future</span>)</span>;<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-封装库示例"><a href="#2-封装库示例" class="headerlink" title="2. 封装库示例"></a>2. 封装库示例</h2><p>头文件db_scylla.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cassandra.h&gt;</span></span><br><br><span class="hljs-keyword">namespace</span> DB &#123;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ed_error</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">scylla_obj</span></span><br><span class="hljs-class">&#123;</span> <span class="hljs-comment">//数据库查询查询传递对象</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">scylla_obj</span>() &#123;&#125;<br>    ~<span class="hljs-built_in">scylla_obj</span> () &#123;&#125;<br><br><span class="hljs-keyword">public</span>:<br>    std::string  uri_;                          <span class="hljs-comment">//uri</span><br>    std::vector&lt;std::string&gt; vidc_;             <span class="hljs-comment">//idc列表</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">record_scylla</span> :</span> <span class="hljs-keyword">public</span> record_base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">record_scylla</span>();<br>    ~<span class="hljs-built_in">record_scylla</span>();<br><br><span class="hljs-keyword">public</span>:<br>    std::string  uri_;                           <span class="hljs-comment">//uri</span><br>    std::string  vidc_;                          <span class="hljs-comment">//vidc</span><br>    std::string  cache_;                         <span class="hljs-comment">//cache</span><br>    std::string  zone_;                          <span class="hljs-comment">//zone</span><br>    <span class="hljs-keyword">int</span>     type_;                          <span class="hljs-comment">//type</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">db_scylla</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">db_scylla</span> ();<br>    ~<span class="hljs-built_in">db_scylla</span> ();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 打开数据库</span><br><span class="hljs-comment">     * @param addr 要打开的地址</span><br><span class="hljs-comment">     * @param port 要打开的端口号</span><br><span class="hljs-comment">     * @return true 成功打开，false 打开失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">open</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * addr, <span class="hljs-keyword">int</span> port)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询内容</span><br><span class="hljs-comment">     * @param obj 要查询的信息</span><br><span class="hljs-comment">     * @param bhot 是否是查询热点数据</span><br><span class="hljs-comment">     * @param vec 返回查询结果</span><br><span class="hljs-comment">     * @param err 错误时返回错误详细信息</span><br><span class="hljs-comment">     * @return true 成功查询，false 未查询到</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">const</span> scylla_obj &amp; obj, <span class="hljs-keyword">bool</span> bhot,</span></span><br><span class="hljs-params"><span class="hljs-function">            std::vector&lt;record_scylla&gt; &amp; vec, ed_error * err)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量插入数据</span><br><span class="hljs-comment">     * @param vec 要插入的数据总量</span><br><span class="hljs-comment">     * @param ttl 过期时间 &lt;=0 则永不过期，单位秒</span><br><span class="hljs-comment">     * @param err 出错时返回错误详细信息</span><br><span class="hljs-comment">     * @return  成功插入记录数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::vector&lt;record_scylla&gt; &amp; vec,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ttl, ed_error * err)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除数据</span><br><span class="hljs-comment">     * @param vec 要删除的记录</span><br><span class="hljs-comment">     * @param err 出错时返回错误详细信息</span><br><span class="hljs-comment">     * @return 成功删除的记录数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::vector&lt;record_scylla&gt; &amp; vec, ed_error * err)</span></span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置认证的用户名和密码</span><br><span class="hljs-comment">     * @param user 用户名</span><br><span class="hljs-comment">     * @param pass 密码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_auth</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * user, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * pass)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置连接超时</span><br><span class="hljs-comment">     * @param ms_timeout 超时时间，单位ms</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_conn_timeout</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ms_timeout)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置读写超时</span><br><span class="hljs-comment">     * @param timeout 超时时间，单位ms</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_rw_timeout</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ms_timeout)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置scyllad 处理io的线程数</span><br><span class="hljs-comment">     * @param cn 线程数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_io_thread_num</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cn)</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建session连接</span><br><span class="hljs-comment">     * @return 非NULL 成功连接，返回连接对象，NULL 连接失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">CassSession* <span class="hljs-title">create_connect_session</span><span class="hljs-params">(ed_error *err)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取查询的字符串信息</span><br><span class="hljs-comment">     * @param obj 要查询的对象信息</span><br><span class="hljs-comment">     * @param bhot 是否是查询热点数据</span><br><span class="hljs-comment">     * @param str 返回查询字符串</span><br><span class="hljs-comment">     * @param cloNum 返回查询的字段个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_query_string</span><span class="hljs-params">(<span class="hljs-keyword">const</span> scylla_obj &amp; obj, <span class="hljs-keyword">bool</span> bhot, acl::string &amp; str)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从row中解析一条记录到vec中</span><br><span class="hljs-comment">     * @param row 要解析的行</span><br><span class="hljs-comment">     * @param bhot 是否是查询热点数据</span><br><span class="hljs-comment">     * @param vec 存储解析结果</span><br><span class="hljs-comment">     * @return true 成功解析，false 解析失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">parse_one_record</span><span class="hljs-params">(<span class="hljs-keyword">const</span> CassRow* row, <span class="hljs-keyword">bool</span> bhot,</span></span><br><span class="hljs-params"><span class="hljs-function">            std::vector&lt;record_scylla&gt; &amp; vec)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取其中某一列的值</span><br><span class="hljs-comment">     * @param row 行信息</span><br><span class="hljs-comment">     * @param cname 列名</span><br><span class="hljs-comment">     * @param value 返回获取到的value</span><br><span class="hljs-comment">     * @return true 成功获取，false 获取失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">get_col_value</span><span class="hljs-params">(<span class="hljs-keyword">const</span> CassRow* row, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * cname,</span></span><br><span class="hljs-params"><span class="hljs-function">            std::string &amp; value)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">get_col_value</span><span class="hljs-params">(<span class="hljs-keyword">const</span> CassRow* row, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * cname, <span class="hljs-keyword">int</span> &amp; value)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取删除条件字符串</span><br><span class="hljs-comment">     * @param key 添加的条件字符串</span><br><span class="hljs-comment">     * @param key_title 添加时使用的关键字</span><br><span class="hljs-comment">     * @param all 返回添加后的结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_remove_cond_str</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string &amp; key,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * key_title, std::string &amp; all)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_remove_cond_int</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * key_title, std::string &amp; all)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从连接池池中获取一个连接</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">CassSession * <span class="hljs-title">get_session</span><span class="hljs-params">(ed_error * err)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 归还使用后的session</span><br><span class="hljs-comment">     * @param session 要归还的session</span><br><span class="hljs-comment">     * @param bok false session 异常，true 正常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">put_session</span><span class="hljs-params">(CassSession * session, <span class="hljs-keyword">bool</span> bok)</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> port_;                          <span class="hljs-comment">//端口号</span><br>    <span class="hljs-keyword">int</span> conn_timeout_;                  <span class="hljs-comment">//连接超时</span><br>    <span class="hljs-keyword">int</span> rw_timeout_;                    <span class="hljs-comment">//读写超时</span><br>    <span class="hljs-keyword">int</span> thread_num_;                    <span class="hljs-comment">//处理io线程数</span><br>    std::string addr_;                  <span class="hljs-comment">//连接地址</span><br>    std::string user_;                  <span class="hljs-comment">//用户名</span><br>    std::string pass_;                  <span class="hljs-comment">//密码</span><br>    CassSession * session_;<br>#    QLock lock_;                        <span class="hljs-comment">// pool_ 实际应用时需要考虑加 锁</span><br>&#125;;<br><br>&#125; <span class="hljs-comment">/* DB */</span><br><br></code></pre></td></tr></table></figure><p>db_scylla.cpp</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdafx.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;db_scylla.h&quot;</span></span><br><br><span class="hljs-keyword">namespace</span> DB &#123;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * CONST_COL_URI = <span class="hljs-string">&quot;uri&quot;</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * CONST_COL_VIDC = <span class="hljs-string">&quot;vidc&quot;</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * CONST_COL_CACHE = <span class="hljs-string">&quot;cache&quot;</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * CONST_COL_TYPE = <span class="hljs-string">&quot;typ&quot;</span>;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * CONST_COL_ZONE = <span class="hljs-string">&quot;zone&quot;</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * CONST_COL_LEVEL = <span class="hljs-string">&quot;level&quot;</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * KEYSPACE_TABLE=<span class="hljs-string">&quot;keyspace.test_table&quot;</span>;<br><br>db_scylla::<span class="hljs-built_in">db_scylla</span>()<br>: <span class="hljs-built_in">port_</span>(<span class="hljs-number">9042</span>)<br>, <span class="hljs-built_in">conn_timeout_</span>(<span class="hljs-number">2000</span>)<br>, <span class="hljs-built_in">rw_timeout_</span>(<span class="hljs-number">2000</span>)<br>, <span class="hljs-built_in">thread_num_</span>(<span class="hljs-number">10</span>)<br>, <span class="hljs-built_in">cluster_</span>(<span class="hljs-literal">NULL</span>)<br>, <span class="hljs-built_in">session_</span>(<span class="hljs-literal">NULL</span>)<br>&#123;<br>&#125;<br><br>db_scylla::~<span class="hljs-built_in">db_scylla</span>() &#123;<br>    <span class="hljs-keyword">if</span>(cluster_) &#123;<br>        <span class="hljs-built_in">cass_cluster_free</span>(cluster_);<br>    &#125;<br><span class="hljs-keyword">if</span>(session_) &#123;<br><span class="hljs-built_in">cass_session_free</span>(session_);<br>session_ = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">db_scylla::open</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * addr, <span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span>==addr || port&gt;<span class="hljs-number">65535</span> || port&lt;=<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open scylladb failed addr=%s, port=%d\n&quot;</span>,<br>                <span class="hljs-literal">NULL</span>==addr?<span class="hljs-string">&quot;NULL&quot;</span>:addr, port);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    cluster_ = <span class="hljs-built_in">cass_cluster_new</span>();<br>    <span class="hljs-built_in">cass_cluster_set_port</span>(cluster_, port);<br>    <span class="hljs-built_in">cass_cluster_set_contact_points</span>(cluster_, addr);<br>    <span class="hljs-built_in">cass_cluster_set_credentials</span>(cluster_, user_.<span class="hljs-built_in">c_str</span>(), pass_.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-built_in">cass_cluster_set_num_threads_io</span>(cluster_, thread_num_); <span class="hljs-comment">//处理请求的线程数</span><br>    <span class="hljs-comment">//cass_cluster_set_max_connections_per_host(cluster_, 50); //被废弃可不用了</span><br>    <span class="hljs-comment">//cass_cluster_set_core_connections_per_host(cluster_, 1); //每个线程的连接, 不用设置太多，默认的就够</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">db_scylla::get_remove_cond_str</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::string &amp; key,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * key_title, std::string &amp; all)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(key.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    acl::string tmp;<br>    tmp.format(<span class="hljs-string">&quot;%s=&#x27;%s&#x27;&quot;</span>,key_title, key.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">false</span> == all.<span class="hljs-built_in">empty</span>()) &#123;<br>        all.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot; AND &quot;</span>);<br>    &#125;<br>    all.<span class="hljs-built_in">append</span>(tmp.<span class="hljs-built_in">c_str</span>());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">db_scylla::get_remove_cond_int</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * key_title, std::string &amp; all)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(key&lt;<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    acl::string tmp;<br>    tmp.format(<span class="hljs-string">&quot;%s=%d&quot;</span>,key_title, key);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">false</span> == all.<span class="hljs-built_in">empty</span>()) &#123;<br>        all.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot; AND &quot;</span>);<br>    &#125;<br>    all.<span class="hljs-built_in">append</span>(tmp.<span class="hljs-built_in">c_str</span>());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">db_scylla::remove</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::vector&lt;record_scylla&gt; &amp; vec, ed_error * err)</span> </span>&#123;<br>    <span class="hljs-keyword">size_t</span> iok = <span class="hljs-number">0</span>;<br>    CassSession * session = <span class="hljs-built_in">get_session</span>(err);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span>==session || vec.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">return</span> iok;<br>    &#125;<br><br>    CassFuture* futures[ vec.<span class="hljs-built_in">size</span>() ];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">size_t</span> i=<span class="hljs-number">0</span>; i&lt;vec.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        std::string strtmp;<br>        <span class="hljs-built_in">get_remove_cond_str</span>(vec[i].uri_, CONST_COL_URI, strtmp);<br>        <span class="hljs-built_in">get_remove_cond_str</span>(vec[i].vidc_, CONST_COL_VIDC, strtmp);<br>        <span class="hljs-built_in">get_remove_cond_str</span>(vec[i].cache_, CONST_COL_CACHE, strtmp);<br>        <span class="hljs-built_in">get_remove_cond_int</span>(vec[i].type_, CONST_COL_TYPE, strtmp);<br><br>        acl::string qstr;<br>        qstr.format(<span class="hljs-string">&quot;DELETE FROM cdn_global_index.uri_index WHERE %s ;&quot;</span>, strtmp.<span class="hljs-built_in">c_str</span>());<br>        CassStatement * statement = <span class="hljs-built_in">cass_statement_new</span>(qstr.<span class="hljs-built_in">c_str</span>(), <span class="hljs-number">0</span>);<br>        futures[i] = <span class="hljs-built_in">cass_session_execute</span>(session, statement);<br>        <span class="hljs-built_in">cass_statement_free</span>(statement);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i=<span class="hljs-number">0</span>; i&lt;vec.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        CassFuture* future = futures[i];<br>        <span class="hljs-built_in">cass_future_wait</span>(future);<br>        CassError rc = <span class="hljs-built_in">cass_future_error_code</span>(future);<br>        <span class="hljs-keyword">if</span> (rc != CASS_OK) &#123;<br>            <span class="hljs-built_in">ADD_ED_ERROR</span>(err, ERR_SDB_DELETE, <span class="hljs-string">&quot;%s failed. err=%s&quot;</span>, vec[i].uri_.<span class="hljs-built_in">c_str</span>(),<br>                    <span class="hljs-built_in">cass_error_desc</span>(rc));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            iok++;<br>        &#125;<br>        <span class="hljs-built_in">cass_future_free</span>(future);<br>    &#125;<br>    <span class="hljs-built_in">put_session</span>(session, <span class="hljs-number">0</span>==iok?<span class="hljs-literal">false</span>:<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> iok;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">size_t</span>  <span class="hljs-title">db_scylla::insert</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::vector&lt;record_scylla&gt; &amp; vec, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ttl,</span></span><br><span class="hljs-params"><span class="hljs-function">        ed_error * err)</span> </span>&#123;<br>    <span class="hljs-keyword">size_t</span> iok = <span class="hljs-number">0</span>;<br>    CassSession * session = <span class="hljs-built_in">get_session</span>(err);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span>==session || vec.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">return</span> iok;<br>    &#125;<br>    acl::string qstr;<br>    <span class="hljs-keyword">if</span>(ttl&gt;<span class="hljs-number">0</span>) &#123;<br>        qstr.format(<span class="hljs-string">&quot;INSERT INTO %s (%s, %s, %s, %s) VALUES(?,?,?,?) USING TTL %lld;&quot;</span>,<br>                KEYSPACE_TABLE, CONST_COL_URI, CONST_COL_VIDC, CONST_COL_CACHE, CONST_COL_TYPE, ttl);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        qstr.format(<span class="hljs-string">&quot;INSERT INTO %s (%s, %s, %s, %s) VALUES(?,?,?,?) ;&quot;</span>,<br>                KEYSPACE_TABLE, CONST_COL_URI, CONST_COL_VIDC, CONST_COL_CACHE, CONST_COL_TYPE);<br>    &#125;<br>    CassFuture* futures[ vec.<span class="hljs-built_in">size</span>() ];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">size_t</span> i=<span class="hljs-number">0</span>; i&lt;vec.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        CassStatement * statement = <span class="hljs-built_in">cass_statement_new</span>(qstr.<span class="hljs-built_in">c_str</span>(), <span class="hljs-number">4</span>);<br>        <span class="hljs-built_in">cass_statement_bind_string</span>(statement, <span class="hljs-number">0</span>, vec[i].uri_.<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-built_in">cass_statement_bind_string</span>(statement, <span class="hljs-number">1</span>, vec[i].vidc_.<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-built_in">cass_statement_bind_string</span>(statement, <span class="hljs-number">2</span>, vec[i].cache_.<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-built_in">cass_statement_bind_int32</span>(statement, <span class="hljs-number">3</span>, vec[i].type_);<br><br>        futures[i] = <span class="hljs-built_in">cass_session_execute</span>(session, statement);<br>        <span class="hljs-built_in">cass_statement_free</span>(statement);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i=<span class="hljs-number">0</span>; i&lt;vec.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        CassFuture* future = futures[i];<br>        <span class="hljs-built_in">cass_future_wait</span>(future);<br>        CassError rc = <span class="hljs-built_in">cass_future_error_code</span>(future);<br>        <span class="hljs-keyword">if</span> (rc != CASS_OK) &#123;<br>            <span class="hljs-built_in">ADD_ED_ERROR</span>(err, ERR_SDB_INSERT, <span class="hljs-string">&quot;%s failed. err=%s&quot;</span>, vec[i].uri_.<span class="hljs-built_in">c_str</span>(),<br>                    <span class="hljs-built_in">cass_error_desc</span>(rc));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            iok++;<br>        &#125;<br>        <span class="hljs-built_in">cass_future_free</span>(future);<br>    &#125;<br>    <span class="hljs-built_in">put_session</span>(session, <span class="hljs-number">0</span>==iok?<span class="hljs-literal">false</span>:<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> iok;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">db_scylla::query</span><span class="hljs-params">(<span class="hljs-keyword">const</span> scylla_obj &amp; obj, <span class="hljs-keyword">bool</span> bhot,</span></span><br><span class="hljs-params"><span class="hljs-function">        std::vector&lt;record_scylla&gt; &amp; vec, ed_error * err)</span> </span>&#123;<br>    CassSession * session = <span class="hljs-built_in">get_session</span>(err);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span>==session) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    CassError rc = CASS_OK;<br>    acl::string qstr;<br>    <span class="hljs-built_in">get_query_string</span>(obj, bhot, qstr);<br>    CassStatement * statement = <span class="hljs-built_in">cass_statement_new</span>(qstr.<span class="hljs-built_in">c_str</span>(), <span class="hljs-number">0</span>);<br>    CassFuture * future = <span class="hljs-built_in">cass_session_execute</span>(session, statement);<br>    <span class="hljs-keyword">if</span>(CASS_OK!=(rc=<span class="hljs-built_in">cass_future_error_code</span>(future))) &#123;<br>        <span class="hljs-built_in">ADD_ED_ERROR</span>(err, ERR_SDB_QUERY, <span class="hljs-string">&quot;query cass_future_wait failed. err=%s&quot;</span>,<br>                <span class="hljs-built_in">cass_error_desc</span>(rc));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">const</span> CassResult* result = <span class="hljs-built_in">cass_future_get_result</span>(future);<br>        CassIterator* iterator = <span class="hljs-built_in">cass_iterator_from_result</span>(result);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">cass_iterator_next</span>(iterator)) &#123;<br>            <span class="hljs-keyword">const</span> CassRow* row = <span class="hljs-built_in">cass_iterator_get_row</span>(iterator);<br>            <span class="hljs-built_in">parse_one_record</span>(row, bhot, vec);<br>        &#125;<br>        <span class="hljs-built_in">cass_result_free</span>(result);<br>        <span class="hljs-built_in">cass_iterator_free</span>(iterator);<br>    &#125;<br><br>    <span class="hljs-built_in">cass_future_free</span>(future);<br>    <span class="hljs-built_in">cass_statement_free</span>(statement);<br>    <span class="hljs-built_in">put_session</span>(session, rc==CASS_OK);<br>    <span class="hljs-keyword">return</span> rc==CASS_OK;<br>&#125;<br><br><br><span class="hljs-function">CassSession * <span class="hljs-title">db_scylla::get_session</span><span class="hljs-params">(ed_error * err)</span> </span>&#123;<br>    lock_.<span class="hljs-built_in">lock</span>();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span>==session_) &#123;<br>        session_ = <span class="hljs-built_in">create_connect_session</span>(err);<br>    &#125;<br>    lock_.<span class="hljs-built_in">unlock</span>();<br>    <span class="hljs-keyword">return</span> session_;<br>    CassSession * session = <span class="hljs-literal">NULL</span>;<br>    lock_.<span class="hljs-built_in">lock</span>();<br>    <span class="hljs-keyword">if</span>(pool_.<span class="hljs-built_in">empty</span>()) &#123;<br>        lock_.<span class="hljs-built_in">unlock</span>();<br>        session = <span class="hljs-built_in">create_connect_session</span>(err);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        session = pool_.<span class="hljs-built_in">front</span>();<br>        pool_.<span class="hljs-built_in">pop_front</span>();<br>        lock_.<span class="hljs-built_in">unlock</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> session;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">db_scylla::put_session</span><span class="hljs-params">(CassSession * session, <span class="hljs-keyword">bool</span> bok)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(bok) &#123;<br>        lock_.<span class="hljs-built_in">lock</span>();<br>        pool_.<span class="hljs-built_in">push_back</span>(session);<br>        lock_.<span class="hljs-built_in">unlock</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">cass_session_free</span>(session);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">db_scylla::set_auth</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * user, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * pass)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span>==pass || <span class="hljs-literal">NULL</span>==user) &#123;<br>        <span class="hljs-built_in">logger_error</span>(<span class="hljs-string">&quot;user or pass is NULL.&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    user_ = user;<br>    pass_ = pass;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">db_scylla::set_conn_timeout</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ms_timeout)</span> </span>&#123;<br>    conn_timeout_ = ms_timeout;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">db_scylla::set_rw_timeout</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ms_timeout)</span> </span>&#123;<br>    rw_timeout_ = ms_timeout;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">db_scylla::set_io_thread_num</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cn)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(cn&gt;<span class="hljs-number">0</span> &amp;&amp; cn&lt;<span class="hljs-number">1024</span>) &#123;<br>        thread_num_ = cn;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">CassSession* <span class="hljs-title">db_scylla::create_connect_session</span><span class="hljs-params">(ed_error* err)</span></span>&#123;<br>    CassSession* session = <span class="hljs-built_in">cass_session_new</span>();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span>==session) &#123;<br>        <span class="hljs-built_in">ADD_ED_ERROR</span>(err, ERR_SDB_CREATE_SESSION, <span class="hljs-string">&quot;create session failed.&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    CassFuture* future = <span class="hljs-built_in">cass_session_connect</span>(session, cluster_);<br>    <span class="hljs-built_in">cass_future_wait</span>(future);<br>    CassError rc = <span class="hljs-built_in">cass_future_error_code</span>(future);<br>    <span class="hljs-keyword">if</span> (rc != CASS_OK) &#123;<br>        <span class="hljs-built_in">ADD_ED_ERROR</span>(err, ERR_SDB_CREATE_SESSION, <span class="hljs-string">&quot;create session failed. err=%s&quot;</span>,<br>                <span class="hljs-built_in">cass_error_desc</span>(rc));<br>        <span class="hljs-built_in">cass_session_free</span>(session);<br>        session = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-built_in">cass_future_free</span>(future);<br>    <span class="hljs-keyword">return</span> session;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">db_scylla::get_query_string</span><span class="hljs-params">(<span class="hljs-keyword">const</span> scylla_obj &amp; obj, <span class="hljs-keyword">bool</span> bhot,</span></span><br><span class="hljs-params"><span class="hljs-function">        acl::string &amp; str)</span> </span>&#123;<br>    std::string tmpstr;<br>    <span class="hljs-keyword">size_t</span> maxPos = obj.vidc_.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">size_t</span> i=<span class="hljs-number">0</span>; i&lt;obj.vidc_.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        tmpstr.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;&#x27;&quot;</span>).<span class="hljs-built_in">append</span>(obj.vidc_[i]).<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;&#x27;&quot;</span>);<br>        <span class="hljs-keyword">if</span>(i!=maxPos) &#123;<br>            tmpstr.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(bhot) &#123;<br>        <span class="hljs-keyword">if</span>(tmpstr.<span class="hljs-built_in">empty</span>()) &#123;<br>            str.format(<span class="hljs-string">&quot;SELECT %s,%s FROM %s WHERE uri=&#x27;%s&#x27;&quot;</span>,<br>                    CONST_COL_ZONE, CONST_COL_LEVEL, KEYSPACE_TABLE, obj.uri_.<span class="hljs-built_in">c_str</span>());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            str.format(<span class="hljs-string">&quot;SELECT %s,%s FROM %s WHERE uri=&#x27;%s&#x27; AND zone in(%s)&quot;</span>,<br>                    CONST_COL_ZONE, CONST_COL_LEVEL, KEYSPACE_TABLE, <br>                    obj.uri_.<span class="hljs-built_in">c_str</span>(), tmpstr.<span class="hljs-built_in">c_str</span>());<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>(tmpstr.<span class="hljs-built_in">empty</span>()) &#123;<br>            str.format(<span class="hljs-string">&quot;SELECT %s,%s,%s,%s FROM %s WHERE uri=&#x27;%s&#x27;&quot;</span>,<br>                    CONST_COL_URI, CONST_COL_VIDC, CONST_COL_CACHE, CONST_COL_TYPE,<br>                    KEYSPACE_TABLE, obj.uri_.<span class="hljs-built_in">c_str</span>());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            str.format(<span class="hljs-string">&quot;SELECT %s,%s,%s,%s FROM %s WHERE uri=&#x27;%s&#x27; AND vidc in(%s)&quot;</span>,<br>                    CONST_COL_URI, CONST_COL_VIDC, CONST_COL_CACHE, CONST_COL_TYPE,<br>                    KEYSPACE_TABLE, obj.uri_.<span class="hljs-built_in">c_str</span>(), tmpstr.<span class="hljs-built_in">c_str</span>());<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">db_scylla::parse_one_record</span><span class="hljs-params">(<span class="hljs-keyword">const</span> CassRow* row, <span class="hljs-keyword">bool</span> bhot,</span></span><br><span class="hljs-params"><span class="hljs-function">        std::vector&lt;record_scylla&gt; &amp; vec)</span> </span>&#123;<br>    <span class="hljs-keyword">bool</span> bret = <span class="hljs-literal">true</span>;<br>    record_scylla record;<br>    <span class="hljs-keyword">if</span>(bhot) &#123;<br>        <span class="hljs-built_in">get_col_value</span>(row, CONST_COL_ZONE, record.vidc_); <span class="hljs-comment">//将zone 存放到vidc_中</span><br>        <span class="hljs-built_in">get_col_value</span>(row, CONST_COL_LEVEL, record.type_); <span class="hljs-comment">//将level 存放到type中</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">get_col_value</span>(row, CONST_COL_URI, record.uri_);<br>        <span class="hljs-built_in">get_col_value</span>(row, CONST_COL_VIDC, record.vidc_);<br>        <span class="hljs-built_in">get_col_value</span>(row, CONST_COL_CACHE, record.cache_);<br>        <span class="hljs-comment">//    get_col_value(row, &quot;zone&quot;, record.zone_);</span><br>        <span class="hljs-built_in">get_col_value</span>(row, CONST_COL_TYPE, record.type_);<br>    &#125;<br>    vec.<span class="hljs-built_in">push_back</span>(record);<br>    <span class="hljs-keyword">return</span> bret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">db_scylla::get_col_value</span><span class="hljs-params">(<span class="hljs-keyword">const</span> CassRow* row, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * cname,</span></span><br><span class="hljs-params"><span class="hljs-function">        std::string &amp; value)</span> </span>&#123;<br>    <span class="hljs-keyword">bool</span> bret = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* row_key;<br>    <span class="hljs-keyword">size_t</span> row_key_length;<br>    <span class="hljs-keyword">if</span>(CASS_OK==<span class="hljs-built_in">cass_value_get_string</span>(<br>                <span class="hljs-built_in">cass_row_get_column_by_name</span>(row, cname),<br>                &amp;row_key, &amp;row_key_length)) &#123;<br>        value = row_key;<br>        bret = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> bret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">db_scylla::get_col_value</span><span class="hljs-params">(<span class="hljs-keyword">const</span> CassRow* row, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * cname,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">int</span> &amp; value)</span> </span>&#123;<br>    <span class="hljs-keyword">bool</span> bret = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(CASS_OK==<span class="hljs-built_in">cass_value_get_int32</span>(<span class="hljs-built_in">cass_row_get_column_by_name</span>(row, cname),<br>                &amp;value)) &#123;<br>        bret = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> bret;<br>&#125;<br><br>&#125; <span class="hljs-comment">/* DB */</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>typedef 精髓</title>
    <link href="/2020/08/29/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/04typedef%20%E7%B2%BE%E9%AB%93/"/>
    <url>/2020/08/29/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/04typedef%20%E7%B2%BE%E9%AB%93/</url>
    
    <content type="html"><![CDATA[<p>本文转载自《<a href="https://tonybai.com/2008/05/02/also-talk-about-typedef/%E3%80%8B">https://tonybai.com/2008/05/02/also-talk-about-typedef/》</a></p><h2 id="核心阐述"><a href="#核心阐述" class="headerlink" title="核心阐述"></a>核心阐述</h2><p>C语言语法简单，但内涵却博大精深；如果在学习时只是止步于表面，那么往往后期会遇到很多困难。typedef是C语言中一个很好用的工具，大量存在于已有代码中，特别值得一提的是：C++标准库实现中更是对typedef有着大量的使用。但很多初学者对其的理解仅局限于：typedef用来定义一个已有类型的”别名(alias)”。正是因为有了这样的理解，才有了后来初学者在typedef int myint和typedef myint int之间的犹豫不决。很多国内大学的C语言课之授课老师也都是如是说的，或者老师讲的不够透彻，导致学生们都是如是理解的。我这里想结合C语言标准文档以及一些代码实例，也说说typedef。</p><figure class="highlight abnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs abnf">int    *p<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这样的代码是C语言中最最基础的一个语句了，大家都知道这个语句声明了一个变量p，其类型是指向整型的指针(pointer to int)；如果在这个声明的前面加上一个typedef后，整个语义(semantics)又会是如何改变的呢？</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">typedef</span>  <span class="hljs-built_in">int</span>    *p;<br></code></pre></td></tr></table></figure><p>我们先来看看C99标准中关于typedef是如何诠释的？C99标准中这样一小段精辟的描述：”In a declaration whose storage-class specifier is typedef, each declarator defines an identifier to be a typedef name that denotes the type specified for the identifier in the way described in xx”。</p><p>参照这段描述，并拿<code>typedef int *p</code>作为例子来理解：</p><div class="code-wrapper"><pre><code class="hljs">在一个声明中，如果有存储类说明符typedef的修饰，标识符p将被定义为了一个typedef name，这个typedef name表示(denotes)一个类型，什么类型呢？就是int *p这个声明(declarator)中标识符(indentifier)p的类型(int*)。</code></pre></div><p>再比对一下两个声明：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span>    *p;<br><span class="hljs-keyword">typedef</span>  <span class="hljs-built_in">int</span>    *p;<br></code></pre></td></tr></table></figure><p>是不是有点”茅舍顿开”的感觉，<code>int *p</code>中, <code>p</code>是一个变量，其类型为<code>pointer to int</code>；在<code>int *p</code>前面增加一个 <code>typedef</code>后，<code>p</code>变为一个<code>typedef-name</code>，这个 <code>typedef-name</code> 所表示的类型就是 <code>int *p</code> 声明式中 <code>p</code> 的类型<code>(int*)</code>。<br>说句白话，<code>typedef</code> 让 <code>p</code> 去除了普通变量的身份，摇身一变，变成了 <code>p</code> 的类型的一个<code>typedef-name</code>了。</p><p>为了巩固上面的理解，我们再来看看”C语言参考手册(C: A Reference Manual)”中的说法：任何 <code>declarator</code> (如<code>typedef int   *p</code> )中的indentifier(如p)定义为<code>typedef-name</code>， 其(指代p)表示的类型是declarator为正常变量声明(指代int  <em>p)的那个标识符(指代p)的类型(int</em>)。有些绕嘴，不过有例子支撑：</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p><code>typedef double MYDOUBLE;</code></p><p>分析:<br>去掉 <code>typedef</code> , 得到正常变量声明=&gt; <code>double MYDOUBLE;</code>,<br>变量<code>MYDOUBLE</code> 的类型为 <code>double</code>;<br>由此可推导出 =&gt; <code>typedef double MYDOUBLE;</code> 中 <code>MYDOUBLE</code> 是类型 <code>double</code> 的一个 <code>typedef-name</code>。</p><p>如： MYDOUBLE    d; // 说明 <code>d</code> 是一个 <code>double</code> 类型的变量</p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p><code>typedef double *Dp;</code></p><p>分析:<br>去掉 <code>typedef</code>, 得到正常变量声明 <code>double *Dp;</code>,<br>变量 <code>Dp</code> 的类型为 <code>double*</code>，即 <code>pointer to double;</code><br>由此可推导出 =&gt; <code>typedef double *Dp;</code> 中 <code>Dp</code> 是类型 <code>double*</code> 的一个 <code>typedef-name</code>。</p><p>如： Dp    dptr;   // dptr是一个pointer to double的变量， 和double * dptr; 是同等含义</p><h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><p><code>typedef int* Func(int);</code></p><p>分析:<br>去掉 <code>typedef</code>, 得到正常变量声明 <code>int* Func(int);</code>,<br>变量 <code>Func</code> 的类型为一个函数标识符，该函数返回值类型为 <code>int*</code>，参数类型为 <code>int</code> ;<br>由此可推导出 =&gt; <code>typedef int* Func(int)</code> 中 <code>Func</code> 是<u>函数类型</u>(函数返回值类型为int*，参数类型为int)的一个 <code>typedef-name</code>。</p><p>如： Func  *fptr;  // fptr是一个pointer to function with one int parameter, returning a pointer to int<br>如： Func     f;   这样的声明意义就不大了。</p><h3 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h3><p><code>typedef int (*PFunc)(int);</code></p><p>分析:<br>去掉 <code>typedef</code>,得到正常变量声明 =&gt; int (*PFunc)(int);<br>变量<code>PFunc</code> 的类型为一个函数指针，指向的返回值类型为 <code>int</code>，<code>参数类型为int</code>的函数原型;</p><p>由此可推导出 =&gt; “typedef int (*PFunc)(int)”中PFunc是函数指针类型(该指针类型指向返回值类型为int，参数类型为int的函数)的一个typedef-name。</p><p>PFunc     fptr; &lt;=&gt; fptr是一个pointer to function with one int parameter, returning int</p><h3 id="示例5"><a href="#示例5" class="headerlink" title="示例5"></a>示例5</h3><p><code>typedef    int   A[5];</code></p><p>分析:<br>去掉 <code>typedef</code>,得到正常变量声明 =&gt; int   A[5];<br>变量A的类型为一个含有5个元素的整型数组；</p><p>由此可推导出 =&gt; “typedef    int   A[5]“中A是含有5个元素的数组类型的一个typedef-name。</p><p>A   a = {3, 4, 5, 7, 8};<br>A   b = { 3, 4, 5, 7, 8, 9}; /* 会给出Warning: excess elements in array initializer */</p><h3 id="示例6"><a href="#示例6" class="headerlink" title="示例6"></a>示例6</h3><p><code>typedef    int   (*A)[5]; </code> (注意与typedef    int*    A[5]; 区分)</p><p>分析:<br>去掉 <code>typedef</code>,得到正常变量声明 =&gt; int   (*A)[5];<br>变量A的类型为pointer to an array with 5 int elements；</p><p>由此可推导出 =&gt; “typedef    int   (*A)[5]“中A是”pointer to an array with 5 int elements”的一个typedef-name。</p><p>int   c[5] = {3, 4, 5, 7, 8};<br>A    a = &c;<br>printf(“%d\n”, (<em>a)[0]); /</em> output: 3 */</p><p>如果这样赋值：<br>int   c[6] = {3, 4, 5, 7, 8, 9};<br>A    a = &c; /* 会有Warning: initialization from incompatible pointer type */</p><h3 id="示例7"><a href="#示例7" class="headerlink" title="示例7"></a>示例7</h3><p><code>typedef struct _Foo_t Foo_t;</code></p><p>分析:<br>去掉 <code>typedef</code>,得到正常变量声明 =&gt; struct _Foo_t Foo_t;<br>变量Foo_t的类型为struct _Foo_t;</p><p>由此可推导出 =&gt; “typedef struct _Foo_t Foo_t”中Foo_t是”struct _Foo_t”的一个typedef-name。</p><h3 id="示例8"><a href="#示例8" class="headerlink" title="示例8"></a>示例8</h3><p><code>typedef   struct &#123; … // &#125;   Foo_t;</code></p><p>分析:<br>去掉 <code>typedef</code>,得到正常变量声明 =&gt; struct { … // }   Foo_t;<br>变量Foo_t的类型为struct { … // } ;</p><p>由此可推导出 =&gt;  “typedef   struct { … // }   Foo_t “中Foo_t是”struct { … // }”的一个typedef-name。这里struct {…//}是一个无”标志名称(tag name)”的结构体声明。</p><h3 id="示例9"><a href="#示例9" class="headerlink" title="示例9"></a>示例9</h3><p><code>typedef      struct &#123; … // &#125;   Foo_t[1];</code></p><p>分析：<br>去掉 <code>typedef</code>, 得到正常变量声明 =&gt; struct { … // }   Foo_t[1];<br>变量Foo_t的类型为包含一个元素的struct { … // }类别的数组类型;</p><p>由此可推导出 =&gt; 这样一来，Foo_t在typedef定义后实际上就变成了一个struct { … // }数组类型。要问实际编程中会这么用typedef吗？你还别说，这还是C语言常用的一个小技巧，如果你有机会看到jmp_buf的类型定义，你就会发现jmp_buf在很多系统实现中也是如此定义的，大约类似：typedef struct XX {…} jmp_buf[1]; 这样做的目的大致是这样的：如果你在函数里定义了一个char a[n]；那么a和&amp;a作为参数传入某个函数时是等价的。看似传值，实则传址，在被调用函数中通过参数可直接修改数组a的元素的内容。另外这么做的目的是否是为了让代码更符合某些人的口味我还不得而知。</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>1、”ISOIEC-98991999(E)–Programming Languages–C”之Page 123;<br>2、C语言参考手册(中文版) 之 Page 119</p>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux中线程与CPU核的绑定</title>
    <link href="/2020/08/28/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/03Linux%E4%B8%AD%E7%BA%BF%E7%A8%8B%E4%B8%8ECPU%E6%A0%B8%E7%9A%84%E7%BB%91%E5%AE%9A/"/>
    <url>/2020/08/28/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/03Linux%E4%B8%AD%E7%BA%BF%E7%A8%8B%E4%B8%8ECPU%E6%A0%B8%E7%9A%84%E7%BB%91%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<p>不管是线程还是进程，都是通过设置亲和性(affinity)来达到目的。对于进程一般是使用 <code>sched_setaffinity</code> 这个函数来实现.</p><p>与进程的情况相似，线程亲和性的设置和获取主要通过下面两个函数来实现：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> pthread<span class="hljs-constructor">_setaffinity_np(<span class="hljs-params">pthread_t</span> <span class="hljs-params">thread</span>, <span class="hljs-params">size_t</span> <span class="hljs-params">cpusetsize</span>， <span class="hljs-params">const</span> <span class="hljs-params">cpu_set_t</span> <span class="hljs-operator">*</span><span class="hljs-params">cpuset</span>)</span>;<br><span class="hljs-built_in">int</span> pthread<span class="hljs-constructor">_getaffinity_np(<span class="hljs-params">pthread_t</span> <span class="hljs-params">thread</span>, <span class="hljs-params">size_t</span> <span class="hljs-params">cpusetsize</span>,  <span class="hljs-params">cpu_set_t</span> <span class="hljs-operator">*</span><span class="hljs-params">cpuset</span>)</span>;<br></code></pre></td></tr></table></figure><p>从函数名以及参数名都很明了，唯一需要点解释下的可能就是cpu_set_t这个结构体了。这个结构体的理解类似于select中的fd_set，可以理解为cpu集，也是通过约定好的以下宏来进行清除、设置以及判断：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CPU_ZERO</span> <span class="hljs-params">(<span class="hljs-keyword">cpu_set_t</span> *set)</span></span>;  <span class="hljs-comment">//初始化，设为空      </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CPU_SET</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> cpu, <span class="hljs-keyword">cpu_set_t</span> *set)</span></span>; <span class="hljs-comment">//将某个cpu加入cpu集中        </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CPU_CLR</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> cpu, <span class="hljs-keyword">cpu_set_t</span> *set)</span></span>; <span class="hljs-comment">//将某个cpu从cpu集中移出        </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CPU_ISSET</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> cpu, <span class="hljs-keyword">const</span> <span class="hljs-keyword">cpu_set_t</span> *set)</span></span>; <span class="hljs-comment">//判断某个cpu是否已在cpu集中设置了 </span><br></code></pre></td></tr></table></figure><p>cpu集可以认为是一个掩码，每个设置的位都对应一个可以合法调度的 cpu，而未设置的位则对应一个不可调度的 CPU。换而言之，线程都被绑定了，只能在那些对应位被设置了的处理器上运行。通常，掩码中的所有位都被置位了，也就是可以在所有的cpu中调度。 </p><p>以下为测试代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sched.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">myfun</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *arg)</span> </span>&#123;<br>    <span class="hljs-keyword">cpu_set_t</span> mask;<br>    <span class="hljs-keyword">cpu_set_t</span> get;<br>    <span class="hljs-keyword">char</span> buf[<span class="hljs-number">256</span>];<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">int</span> j;<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-built_in">sysconf</span>(_SC_NPROCESSORS_CONF);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;system has %d processor(s)\n&quot;</span>, num);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>        <span class="hljs-built_in">CPU_ZERO</span>(&amp;mask);<br>        <span class="hljs-built_in">CPU_SET</span>(i, &amp;mask);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pthread_setaffinity_np</span>(<span class="hljs-built_in">pthread_self</span>(), <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(mask), &amp;mask) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;set thread affinity failed\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">CPU_ZERO</span>(&amp;get);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pthread_getaffinity_np</span>(<span class="hljs-built_in">pthread_self</span>(), <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(get), &amp;get) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;get thread affinity failed\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; num; j++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">CPU_ISSET</span>(j, &amp;get)) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread %d is running in processor %d\n&quot;</span>, (<span class="hljs-keyword">int</span>)<span class="hljs-built_in">pthread_self</span>(), j);<br>            &#125;<br>        &#125;<br>        j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (j++ &lt; <span class="hljs-number">100000000</span>) &#123;<br>            <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buf));<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">pthread_exit</span>(<span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">pthread_t</span> tid;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pthread_create</span>(&amp;tid, <span class="hljs-literal">NULL</span>, (<span class="hljs-keyword">void</span> *)myfun, <span class="hljs-literal">NULL</span>) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;thread create failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">pthread_join</span>(tid, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 内置的SimpleHTTPServer使用指南</title>
    <link href="/2020/08/27/04DevOps/08%20Python%20%E5%86%85%E7%BD%AE%E7%9A%84SimpleHTTPServer%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2020/08/27/04DevOps/08%20Python%20%E5%86%85%E7%BD%AE%E7%9A%84SimpleHTTPServer%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>Python内置了一个简单的HTTP服务器，只需要在命令行下面敲一行命令，一个HTTP服务器就起来了：(假设我们需要共享我们的目录 /home/haoel 而IP地址是192.168.1.1）</p><figure class="highlight powershell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> /home/haoel<br><span class="hljs-variable">$</span> python <span class="hljs-literal">-m</span> SimpleHTTPServer <span class="hljs-number">8888</span><br></code></pre></td></tr></table></figure><p>后面的8888端口是可选的，不填会采用缺省端口8000。注意，这会将当前所在的文件夹设置为默认的Web目录</p><p>如果你只想让这个HTTP服务器服务于本地环境，那么，你需要定制一下你的Python的程序，下面是一个示例：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-built_in">import</span> sys <br><span class="hljs-built_in">import</span> BaseHTTPServer <br>from SimpleHTTPServer <span class="hljs-built_in">import</span> SimpleHTTPRequestHandler <br><span class="hljs-attr">HandlerClass</span> = SimpleHTTPRequestHandler <br><span class="hljs-attr">ServerClass</span> = BaseHTTPServer.HTTPServer <br><span class="hljs-attr">Protocol</span> = <span class="hljs-string">&quot;HTTP/1.0&quot;</span><br>  <br><span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>:]: <br>  <span class="hljs-attr">port</span> = int(sys.argv[<span class="hljs-number">1</span>]) <br><span class="hljs-keyword">else</span>: <br>  <span class="hljs-attr">port</span> = <span class="hljs-number">8000</span><br><span class="hljs-attr">server_address</span> = (&#x27;<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>&#x27;, port) <br>  <br>HandlerClass.<span class="hljs-attr">protocol_version</span> = Protocol <br><span class="hljs-attr">httpd</span> = ServerClass(server_address, HandlerClass) <br>  <br><span class="hljs-attr">sa</span> = httpd.socket.getsockname() <br>print <span class="hljs-string">&quot;Serving HTTP on&quot;</span>, sa[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;port&quot;</span>, sa[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;...&quot;</span><br>httpd.serve_forever()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DNS协议介绍</title>
    <link href="/2020/08/26/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/01DNS%E5%8D%8F%E8%AE%AE/"/>
    <url>/2020/08/26/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/01DNS%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="DNS报文格式"><a href="#DNS报文格式" class="headerlink" title=" DNS报文格式"></a><span id=dformat> DNS报文格式</span></h1><p>整个报文的格式如下，包括了五部分组成。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+---------------------+</span><br><span class="hljs-section">|        Header       | 报文头</span><br><span class="hljs-section">+---------------------+</span><br><span class="hljs-section">|       Question      | 查询请求</span><br><span class="hljs-section">+---------------------+</span><br><span class="hljs-section">|        Answer       | 应答</span><br><span class="hljs-section">+---------------------+</span><br><span class="hljs-section">|      Authority      | 授权应答</span><br><span class="hljs-section">+---------------------+</span><br><span class="hljs-section">|      Additional     | 附加信息</span><br><span class="hljs-section">+---------------------+</span><br></code></pre></td></tr></table></figure><p>详细介绍如下。</p><ul><li>Header 必选，定义了报文是请求还是应答、错误码以及其它的一些标志位；</li><li>Question 描述了查询的请求报文，包括查询类型(QTYPE)、查询类(QCLASS) 以及查询的域名(QNAME)；</li></ul><p>剩下的3个段包含相同的格式:一系列可能为空的<a href="#rr">资源记录(RR)</a>。 Answer段包含回答问题的RR列表；Authority段包含授权域名服务器的RR列表； <span id=additional> Additional</span>段包含和请求相关的RR列表，但这些附件的RR不是必须回答的。</p><h2 id="报文头-Header"><a href="#报文头-Header" class="headerlink" title="报文头(Header)"></a>报文头(Header)</h2><p>DNS的报文头由固定的12个字节构成。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--+<br><span class="hljs-section">|                      ID                       |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-section">|QR|  Opcode   |AA|TC|RD|RA|   Z    |   RCODE   |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-section">|                    QDCOUNT                    |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-section">|                    ANCOUNT                    |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-section">|                    NSCOUNT                    |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-section">|                    ARCOUNT                    |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></code></pre></td></tr></table></figure><p>字段介绍如下：</p><table><thead><tr><th>字段简写</th><th>字段长度</th><th>说明</th></tr></thead><tbody><tr><td>ID</td><td>16 bits无符号整数</td><td>客户端设置，响应报文会原样带回，用于客户端区分不同的请求应答；</td></tr><tr><td>QR</td><td>1 bit</td><td>区分是请求还是应答<br>0 请求<br>1 应答</td></tr><tr><td>Opcode</td><td>4 bits</td><td>设置查询的种类，响应报文会原样带回.<br> 0 标准查询 QUERY；<br> 1 反向查询 IQUERY；<br> 2 服务器状态查询 STATUS；<br> 3~15 保留；</td></tr><tr><td>AA</td><td>1bit</td><td>授权应答 AuthoritativeAnswer，响应报文生效，用于标示服务器响应报文是否为授权服务器返回的结果，可能是在本地 Cache 的缓存；</td></tr><tr><td>TC</td><td>1bit</td><td>截断 TrunCation，报文因为超过了允许的长度，导致被截断；</td></tr><tr><td>RD</td><td>1bit</td><td>用于请求报文，代表期望是否使用递归查询；<br>0 不使用递归查询<br>1 使用递归查询</td></tr><tr><td>RA</td><td>1bit</td><td>用于响应报文中，表示服务端是否支持递归查询<br>0 不支持递归<br>1 支持递归</td></tr><tr><td>RCODE</td><td>4 bits</td><td>应答码 ResponseCode，会在响应报文中设置。<br> 0 没有错误；<br> 1 报文格式错误(Format Error)，服务器解析请求报文时报错<br> 2 服务器失败(Server Failure)，因为服务器的原因导致没办法处理这个请求<br> 3 名字错误(Name Error)，只对授权域名解析服务器有意义，解析的域名不存在<br>  4 没有实现(Not Implemented)，域名服务器不支持查询类型<br>  5 拒绝(Refused)，由于服务器设置的策略拒绝给出应答，通常是安全的配置；<br>  6-15 保留值，暂未使用。</td></tr><tr><td>QDCOUNT</td><td>16 bits 无符号整数</td><td>请求段中的<a href="#rr">RR</a>数</td></tr><tr><td>ANCOUNT</td><td>16 bits 无符号整数</td><td>应答段中的<a href="#rr">RR</a>数,</td></tr><tr><td>NSCOUNT</td><td>16 bits 无符号整数</td><td>报文授权段中的授权<a href="#rr">RR</a>数</td></tr><tr><td>ARCOUNT</td><td>16 bits 无符号整数</td><td>报文附加段中的附加<a href="#rr">RR</a>数</td></tr></tbody></table><h2 id="查询请求-Question"><a href="#查询请求-Question" class="headerlink" title="查询请求(Question)"></a>查询请求(Question)</h2><p>用来标识，查询的请求参数，同时需要在头中设置 <code>QDCOUNT</code> 这个字段。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--+<br>|                                               |<br>/                     QNAME                     /<br><span class="hljs-section">/                                               /</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-section">|                     QTYPE                     |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-section">|                     QCLASS                    |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></code></pre></td></tr></table></figure><p>字段含义如下:</p><table><thead><tr><th>字段名</th><th>长度</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>QNAME</td><td>最大255字节</td><td>标签字符串</td><td>域名被编码为一些labels序列，每个labels包含一个字节表示后续字符串长度，以及这个字符串，以0长度和空字符串来表示域名结束。注意这个字段可能为奇数字节，不需要进行边界填充对齐。</td></tr><tr><td>QTYPE</td><td>2字节</td><td>无符号整数</td><td>表示查询类型, 取值可以为任何可用的类型值，该字段的值包括对<a href="#rr_type">TYPE</a>字段有效的所有代码，以及一些更通用的代码，这些代码可以匹配一种以上的RR, 以及通配码来表示所有的RR记录。</td></tr><tr><td>QCLASS</td><td>2 字节</td><td>无符号整数</td><td>表示查询的协议类，<br> 0 保留 <br> 1 Internet (IN)<br> 2  未使用<br> 3 Chaos (CH) <br> 4 Hesiod (HS) <br> 5-253 未使用<br> 254 QCLASS NONE <br> 255 QCLASS * (ANY)</td></tr></tbody></table><h1 id="DNS-RR介绍"><a href="#DNS-RR介绍" class="headerlink" title="DNS RR介绍"></a><span id="rr">DNS RR介绍</span></h1><p>DNS资源记录（Resource Record，简称RR）</p><p>DNS server 内的每一个域名都有自己的域文件(zone file)，zone file 是由多个记录组成的，每一个记录就被称为资源记录(Resource Record，简称RR)。</p><h2 id="RR-记录格式"><a href="#RR-记录格式" class="headerlink" title="RR 记录格式"></a><span id="rr_format">RR 记录格式</span></h2><p>所有的RR具有以下相同的格式</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br>|                                               |<br>/                                               /<br>/                      NAME                     /<br><span class="hljs-section">|                                               |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-section">|                      TYPE                     |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-section">|                     CLASS                     |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br>|                      TTL                      |<br><span class="hljs-section">|                                               |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br>|                   RDLENGTH                    |<br><span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--|<br>/                     RDATA                     /<br><span class="hljs-section">/                                               /</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></code></pre></td></tr></table></figure><p>各个字段说明如下：</p><table><thead><tr><th>字段名</th><th>长度</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>NAME</td><td>最大255字节</td><td>标签字符串</td><td>不定长与之前QNAME相同,这里会使用省略字段<br>为了压缩消息总长度此内容可能会采用<a href="#compress">消息压缩</a>方式存储。</td></tr><tr><td>TYPE</td><td>2字节</td><td>无符号整数</td><td>资源类型，是QTYPE的子集</td></tr><tr><td>CLASS</td><td>2字节</td><td>无符号整数</td><td>与之前的QCLASS相同</td></tr><tr><td>TTL</td><td>4字节</td><td>有符号整数</td><td>它指定在再次查询信息源之前可以缓存资源记录的时间间隔。零值被解释为表示RR仅可用于进行中的事务，不应缓存。例如，SOA记录始终以零TTL分发，以禁止缓存。零值也可以用于易失性数据。</td></tr><tr><td>RDLENGTH</td><td>2字节</td><td>无符号整数</td><td>后面跟随的RDATA的长度</td></tr><tr><td>RDATA</td><td></td><td></td><td>真实的数据内容</td></tr></tbody></table><h3 id="消息压缩"><a href="#消息压缩" class="headerlink" title="消息压缩"></a><span id="compress">消息压缩</span></h3><p>为了减小dns消息的大小，dns协议中针对域名采用了一种压缩方案，消除了消息中重复的域名。压缩方式为：使用2个字节的指针来指向消息中已经存在相同域名的位置。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--+<br><span class="hljs-section">| 1  1|                OFFSET                   |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></code></pre></td></tr></table></figure><p>第一个字节的前2个bit为11时表示此域名采用的压缩格式，后面的OFFSET (14 bit) 是当前域名所在的位置相对于DNS消息开始的偏移量。<br>  如：之前的header数组中出现过3www6google3com0,且处的位置为12,这里就可以用1100 000c 两个字节来代替3www6google3com0表示的16个字节</p><h3 id="TYPE值说明"><a href="#TYPE值说明" class="headerlink" title="TYPE值说明"></a><span id="rr_type">TYPE值说明</span></h3><h4 id="标准RR类型介绍"><a href="#标准RR类型介绍" class="headerlink" title="标准RR类型介绍"></a>标准RR类型介绍</h4><table><thead><tr><th align="center">类型</th><th>数值</th><th align="center">RFC来源</th><th align="left">描述</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">A</td><td>1</td><td align="center"><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td align="left">IP 地址记录</td><td align="left">传回一个 32 比特的 IPv4 地址，最常用于映射主机名称到IP地址，但也用于 DNSBL（<a href="https://tools.ietf.org/html/rfc1101">RFC 1101</a>）等。</td></tr><tr><td align="center">AAAA</td><td>28</td><td align="center"><a href="https://tools.ietf.org/html/rfc3596">RFC 3596</a></td><td align="left">IPv6 IP 地址记录</td><td align="left">传回一个 128 比特的 IPv6 地址，最常用于映射主机名称到 IP 地址。</td></tr><tr><td align="center">AFSDB</td><td>18</td><td align="center"><a href="https://tools.ietf.org/html/rfc1183">RFC 1183</a></td><td align="left">AFS文件系统</td><td align="left">（Andrew File System）数据库核心的位置，于域名以外的 AFS 客户端常用来联系 AFS 核心。这个记录的子类型是被过时的<a href="https://zh.wikipedia.org/wiki/DCE/DFS">DCE/DFS</a>（DCE Distributed File System）所使用。</td></tr><tr><td align="center">APL</td><td>42</td><td align="center"><a href="https://tools.ietf.org/html/rfc3123">RFC 3123</a></td><td align="left">地址前缀列表</td><td align="left">指定地址列表的范围，例如：CIDR 格式为各个类型的地址（试验性）。</td></tr><tr><td align="center">CAA</td><td>257</td><td align="center"><a href="https://tools.ietf.org/html/rfc6844">RFC 6844</a></td><td align="left">权威认证授权</td><td align="left"><a href="https://zh.wikipedia.org/wiki/DNS%E8%AF%81%E4%B9%A6%E9%A2%81%E5%8F%91%E6%9C%BA%E6%9E%84%E6%8E%88%E6%9D%83">DNS认证机构授权</a>，限制主机/域的可接受的CA</td></tr><tr><td align="center">CDNSKEY</td><td>60</td><td align="center"><a href="https://tools.ietf.org/html/rfc7344">RFC 7344</a></td><td align="left">子关键记录</td><td align="left">关键记录记录的子版本，用于转移到父级</td></tr><tr><td align="center">CDS</td><td>59</td><td align="center"><a href="https://tools.ietf.org/html/rfc7344">RFC 7344</a></td><td align="left">子委托签发者</td><td align="left">委托签发者记录的子版本，用于转移到父级</td></tr><tr><td align="center">CERT</td><td>37</td><td align="center"><a href="https://tools.ietf.org/html/rfc4398">RFC 4398</a></td><td align="left">证书记录</td><td align="left">存储 PKIX、SPKI、PGP等。</td></tr><tr><td align="center">CNAME</td><td>5</td><td align="center"><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td align="left">规范名称记录</td><td align="left">一个主机名字的别名：域名系统将会继续尝试查找新的名字。</td></tr><tr><td align="center">DHCID</td><td>49</td><td align="center"><a href="https://tools.ietf.org/html/rfc4701">RFC 4701</a></td><td align="left">DHCP（动态主机设置协议）识别码</td><td align="left">用于将 FQDN 选项结合至 DHCP。</td></tr><tr><td align="center">DLV</td><td>32769</td><td align="center"><a href="https://tools.ietf.org/html/rfc4431">RFC 4431</a></td><td align="left">DNSSEC（域名系统安全扩展）来源验证记录</td><td align="left">为不在DNS委托者内发布DNSSEC的信任锚点，与 DS 记录使用相同的格式，<a href="https://tools.ietf.org/html/rfc5074">RFC 5074</a>介绍了如何使用这些记录。</td></tr><tr><td align="center">DNAME</td><td>39</td><td align="center"><a href="https://tools.ietf.org/html/rfc2672">RFC 2672</a></td><td align="left">代表名称</td><td align="left">DNAME 会为名称和其子名称产生别名，与 CNAME 不同，在其标签别名不会重复。但与 CNAME 记录相同的是，DNS将会继续尝试查找新的名字。</td></tr><tr><td align="center">DNSKEY</td><td>48</td><td align="center"><a href="https://tools.ietf.org/html/rfc4034">RFC 4034</a></td><td align="left">DNS 关键记录</td><td align="left">于DNSSEC内使用的关键记录，与 KEY 使用相同格式。</td></tr><tr><td align="center">DS</td><td>43</td><td align="center"><a href="https://tools.ietf.org/html/rfc4034">RFC 4034</a></td><td align="left">委托签发者</td><td align="left">此记录用于鉴定DNSSEC已授权区域的签名密钥。</td></tr><tr><td align="center">HIP</td><td>55</td><td align="center"><a href="https://tools.ietf.org/html/rfc5205">RFC 5205</a></td><td align="left">主机鉴定协议</td><td align="left">将端点标识符及IP 地址定位的分开的方法。</td></tr><tr><td align="center">IPSECKEY</td><td>45</td><td align="center"><a href="https://tools.ietf.org/html/rfc4025">RFC 4025</a></td><td align="left">IPSEC 密钥</td><td align="left">与 IPSEC 同时使用的密钥记录。</td></tr><tr><td align="center">KEY</td><td>25</td><td align="center"><a href="https://tools.ietf.org/html/rfc2535">RFC 2535</a> 和 <a href="https://tools.ietf.org/html/rfc2930">RFC 2930</a></td><td align="left">关键记录</td><td align="left">只用于 SIG(0)（<a href="https://tools.ietf.org/html/rfc2931">RFC 2931</a>）及 TKEY（<a href="https://tools.ietf.org/html/rfc2930">RFC 2930</a>。<a href="https://tools.ietf.org/html/rfc3455">RFC 3455</a> 否定其作为应用程序键及限制DNSSEC的使用。<a href="https://tools.ietf.org/html/rfc3755">RFC 3755</a> 指定了 DNSKEY 作为DNSSEC的代替。</td></tr><tr><td align="center">LOC</td><td>29</td><td align="center"><a href="https://tools.ietf.org/html/rfc1876">RFC 1876</a></td><td align="left">位置记录</td><td align="left">将一个域名指定地理位置。</td></tr><tr><td align="center">MX</td><td>15</td><td align="center"><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td align="left">电邮交互记录</td><td align="left">引导域名到该域名的邮件传输代理（MTA, Message Transfer Agents）列表。</td></tr><tr><td align="center">NAPTR</td><td>35</td><td align="center"><a href="https://tools.ietf.org/html/rfc3403">RFC 3403</a></td><td align="left">命名管理指针</td><td align="left">允许基于正则表达式的域名重写使其能够作为 URI 、进一步域名查找等。</td></tr><tr><td align="center">NS</td><td>2</td><td align="center"><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td align="left">名称服务器记录</td><td align="left">委托 DNS 域（DNS zone）使用已提供的权威域名服务器。</td></tr><tr><td align="center">NSEC</td><td>47</td><td align="center"><a href="https://tools.ietf.org/html/rfc4034">RFC 4034</a></td><td align="left">下一代安全记录</td><td align="left">DNSSEC 的一部分; 用来验证一个未存在的服务器，使用与 NXT（已过时）记录的格式。</td></tr><tr><td align="center">NSEC3</td><td>50</td><td align="center"><a href="https://tools.ietf.org/html/rfc5155">RFC 5155</a></td><td align="left">NSEC 记录第三版</td><td align="left">用作允许未经允许的区域行走以证明名称不存在性的 DNSSEC 扩展。</td></tr><tr><td align="center">NSEC3PARAM</td><td>51</td><td align="center"><a href="https://tools.ietf.org/html/rfc5155">RFC 5155</a></td><td align="left">NSEC3 参数</td><td align="left">与 NSEC3 同时使用的参数记录。</td></tr><tr><td align="center">OPENPGPKEY</td><td>61</td><td align="center"><a href="https://tools.ietf.org/html/rfc7929">RFC 7929</a></td><td align="left">OpenPGP公钥记录</td><td align="left">基于DNS的域名实体认证方法，用于使用OPENPGPKEY DNS资源记录在特定电子邮件地址的DNS中发布和定位OpenPGP公钥。</td></tr><tr><td align="center">PTR</td><td>12</td><td align="center"><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td align="left">指针记录</td><td align="left">引导至一个规范名称（Canonical Name）。与 CNAME 记录不同，DNS“不会”进行进程，只会传回名称。最常用来运行反向 DNS 查找，其他用途包括引作DNS-SD。</td></tr><tr><td align="center">RRSIG</td><td>46</td><td align="center"><a href="https://tools.ietf.org/html/rfc4034">RFC 4034</a></td><td align="left">DNSSEC 证书</td><td align="left">DNSSEC 安全记录集证书，与 SIG 记录使用相同的格式。</td></tr><tr><td align="center">RP</td><td>17</td><td align="center"><a href="https://tools.ietf.org/html/rfc1183">RFC 1183</a></td><td align="left">负责人</td><td align="left">有关域名负责人的信息，电邮地址的 <strong>@</strong> 通常写为 <strong>a</strong>。</td></tr><tr><td align="center">SIG</td><td>24</td><td align="center"><a href="https://tools.ietf.org/html/rfc2535">RFC 2535</a></td><td align="left">证书</td><td align="left">SIG(0)（<a href="https://tools.ietf.org/html/rfc2931">RFC 2931</a>）及 TKEY（<a href="https://tools.ietf.org/html/rfc2930">RFC 2930</a>）使用的证书。<a href="https://tools.ietf.org/html/rfc3755">RFC 3755</a> designated RRSIG as the replacement for SIG for use within DNSSEC.</td></tr><tr><td align="center">SOA</td><td>6</td><td align="center"><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td align="left">权威记录的起始</td><td align="left">指定有关DNS区域的权威性信息，包含主要名称服务器、域名管理员的电邮地址、域名的流水式编号、和几个有关刷新区域的定时器。</td></tr><tr><td align="center">SPF</td><td>99</td><td align="center"><a href="https://tools.ietf.org/html/rfc4408">RFC 4408</a></td><td align="left">SPF 记录</td><td align="left">作为 SPF 协议的一部分，优先作为先前在 TXT 存储 SPF 数据的临时做法，使用与先前在 TXT 存储的格式。</td></tr><tr><td align="center">SRV</td><td>33</td><td align="center"><a href="https://tools.ietf.org/html/rfc2782">RFC 2782</a></td><td align="left">服务定位器</td><td align="left">广义为服务定位记录，被新式协议使用而避免产生特定协议的记录，例如：MX 记录。</td></tr><tr><td align="center">SSHFP</td><td>44</td><td align="center"><a href="https://tools.ietf.org/html/rfc4255">RFC 4255</a></td><td align="left">SSH 公共密钥指纹</td><td align="left">DNS 系统用来发布SSH公共密钥指纹的资源记录，以用作辅助验证服务器的真实性。</td></tr><tr><td align="center">TA</td><td>32768</td><td align="center">无</td><td align="left">DNSSEC 信任当局</td><td align="left">DNSSEC 一部分无签订 DNS 根目录的部署提案，，使用与 DS 记录相同的格式。</td></tr><tr><td align="center">TKEY</td><td>249</td><td align="center"><a href="https://tools.ietf.org/html/rfc2930">RFC 2930</a></td><td align="left">秘密密钥记录</td><td align="left">为 TSIG 提供密钥材料的其中一类方法，that is 在公共密钥下加密的 accompanying KEY RR。</td></tr><tr><td align="center">TSIG</td><td>250</td><td align="center"><a href="https://tools.ietf.org/html/rfc2845">RFC 2845</a></td><td align="left">交易证书</td><td align="left">用以认证动态更新（Dynamic DNS）是来自合法的客户端，或与 DNSSEC 一样是验证回应是否来自合法的递归名称服务器。</td></tr><tr><td align="center">TXT</td><td>16</td><td align="center"><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td align="left">文本记录</td><td align="left">最初是为任意可读的文本 DNS 记录。自1990年起，些记录更经常地带有机读数据，以 <a href="https://tools.ietf.org/html/rfc1464">RFC 1464</a>指定：opportunistic encryption、Sender Policy Framework（虽然这个临时使用的 TXT 记录在 SPF 记录推出后不被推荐）、DomainKeys、DNS-SD等。</td></tr><tr><td align="center">URI</td><td>256</td><td align="center"><a href="https://tools.ietf.org/html/rfc7553">RFC 7553</a></td><td align="left">统一资源标识符</td><td align="left">可用于发布从主机名到URI的映射。</td></tr><tr><td align="center"><a href="https://en.wikipedia.org/w/index.php?title=ZONEMD_record&action=edit&redlink=1">ZONEMD</a></td><td>63</td><td align="center">RFC 8976</td><td align="left">DNS 区域消息摘要</td><td align="left">在<a href="https://en.wikipedia.org/wiki/Cryptographic_message_digest">静态</a>DNS 区域数据上提供<a href="https://en.wikipedia.org/wiki/Cryptographic_message_digest">加密消息摘要</a></td></tr><tr><td align="center">SVCB</td><td>64</td><td align="center"><a href="https://datatracker.ietf.org/doc/draft-ietf-dnsop-svcb-https/00/?include_text=1">IETF 草案</a></td><td align="left">服务绑定</td><td align="left">为需要解析许多资源以访问域的客户端提高性能的 RR。 DNSOP 工作组和 Akamai 技术在此<a href="https://datatracker.ietf.org/doc/draft-ietf-dnsop-svcb-https/00/?include_text=1">IETF 草案中提供</a>了更多信息。</td></tr><tr><td align="center">HTTPS</td><td>65</td><td align="center"><a href="https://datatracker.ietf.org/doc/draft-ietf-dnsop-svcb-https/00/?include_text=1">IETF 草案</a></td><td align="left">HTTPS 绑定</td><td align="left">为需要解析许多资源以访问域的客户端提高性能的 RR。 DNSOP 工作组和 Akamai 技术在此<a href="https://datatracker.ietf.org/doc/draft-ietf-dnsop-svcb-https/00/?include_text=1">IETF 草案中提供</a>了更多信息。</td></tr></tbody></table><h4 id="其他或伪资源记录类型"><a href="#其他或伪资源记录类型" class="headerlink" title="其他或伪资源记录类型"></a>其他或伪资源记录类型</h4><table><thead><tr><th align="center">类型</th><th>数值</th><th align="center">RFC来源</th><th align="left">描述</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">*</td><td>255</td><td align="center"><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td align="left">所有缓存的记录</td><td align="left">传回所有服务器已知类型的记录。如果服务器未有任何关于名称的记录，该请求将被转发。而传回的记录未必完全完成，例如：当一个名称有 A 及 MX 类型的记录时，但服务器已缓存了 A 记录，就只有 A 记录会被传回。</td></tr><tr><td align="center">AXFR</td><td>252</td><td align="center"><a href="https://tools.ietf.org/html/rfc1035">RFC 1035</a></td><td align="left">全域转移</td><td align="left">由主域名服务器转移整个区域文件至二级域名服务器。</td></tr><tr><td align="center">IXFR</td><td>251</td><td align="center"><a href="https://tools.ietf.org/html/rfc1995">RFC 1995</a></td><td align="left">增量区域转移</td><td align="left">请求只有与先前流水式编号不同的特定区域的区域转移。此请求有机会被拒绝，如果权威服务器由于配置或缺乏必要的数据而无法履行请求，一个完整的（AXFR）会被发送以作回应。</td></tr><tr><td align="center"><span id=opt>OPT</span></td><td>41</td><td align="center"><a href="https://tools.ietf.org/html/rfc2671">RFC 2671</a>  已被<a href="https://tools.ietf.org/html/rfc6891">RFC 6891</a>取代</td><td align="left">选项(optinon)</td><td align="left">这是一个“伪DNS 记录类型”，用于支持EDNS(0)。EDNS根据<a href="https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-11">OPTION-CODE</a>来确定传递的附加数据类型，从而决定传递的附加数据内容</td></tr></tbody></table><h4 id="已过时的RR类型"><a href="#已过时的RR类型" class="headerlink" title="已过时的RR类型"></a>已过时的RR类型</h4><table><thead><tr><th>类型</th><th>数值</th><th>RFC来源</th><th>被淘汰RFC</th><th>描述</th></tr></thead><tbody><tr><td>A6</td><td>38</td><td>RFC 2874</td><td>RFC 6563</td><td>Defined as part of early IPv6 but downgraded to experimental by RFC 3363; later downgraded to historic by RFC 6563.</td></tr><tr><td>APL</td><td>42</td><td>RFC 3123</td><td></td><td>Specify lists of address ranges, e.g. in <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">CIDR</a> format, for various address families. Experimental.</td></tr><tr><td>EID</td><td>31</td><td>N/A</td><td></td><td>Defined by the <a href="http://www.tools.ietf.org/html/draft-ietf-nimrod-dns-00">Nimrod DNS</a> <a href="https://en.wikipedia.org/wiki/Internet_draft">internet draft</a>, but never made it to RFC status. Not in current use by any notable application</td></tr><tr><td>GPOS</td><td>27</td><td>RFC 1712</td><td></td><td>A more limited early version of the LOC record</td></tr><tr><td>L32</td><td>105</td><td>RFC 6742</td><td></td><td>未被任何值得注意的应用程序使用并标记为“实验性”</td></tr><tr><td>L64</td><td>106</td><td>RFC 6742</td><td></td><td>未被任何值得注意的应用程序使用并标记为“实验性”</td></tr><tr><td>LP</td><td>107</td><td>RFC 6742</td><td></td><td>未被任何值得注意的应用程序使用并标记为“实验性”</td></tr><tr><td>MB</td><td>7</td><td>RFC 883</td><td>Not formally obsoleted. Unlikely to be ever adopted (RFC 2505).</td><td>MB, MG, MR, and MINFO are records to publish subscriber mailing lists. MAILB is a query code which returns one of those records. The intent was for MB and MG to replace the <a href="https://en.wikipedia.org/wiki/SMTP">SMTP</a> VRFY and EXPN commands. MR was to replace the “551 User Not Local” SMTP error. Later, RFC 2505 recommended that both VRFY and EXPN be disabled, making MB and MG unnecessary. They were classified as experimental by RFC 1035.</td></tr><tr><td>MF</td><td>4</td><td>RFC 883</td><td>RFC 973</td><td>邮件目的地 (MD) 和邮件转发器 (MF) 记录；MAILA 不是实际的记录类型，而是返回 MF 和/或 MD 记录的查询类型。RFC 973 将这些记录替换为 MX 记录。</td></tr><tr><td>MG</td><td>8</td><td>RFC 883</td><td>没有正式过时。不太可能被采用（RFC 2505）。</td><td>MB、MG、MR 和 MINFO 是发布订阅者邮件列表的记录。MAILB 是一个查询代码，它返回这些记录之一。目的是让 MB 和 MG 替换<a href="https://en.wikipedia.org/wiki/SMTP">SMTP</a> VRFY 和 EXPN 命令。MR 是为了替换“551 User Not Local”SMTP 错误。后来，RFC 2505 建议禁用 VRFY 和 EXPN，使 MB 和 MG 变得不必要。它们被 RFC 1035 归类为实验性的。</td></tr><tr><td>NB</td><td>32</td><td>RFC 1002</td><td></td><td>Mistakes (from RFC 1002); the numbers are now assigned to NIMLOC and SRV.</td></tr><tr><td>NSAP-PTR</td><td>23</td><td>RFC 1706</td><td></td><td>Not in current use by any notable application</td></tr><tr><td>NXT</td><td>30</td><td>RFC 2065</td><td>RFC 3755</td><td>Part of the first version of DNSSEC (RFC 2065). NXT was obsoleted by DNSSEC updates (RFC 3755). At the same time, the domain of applicability for KEY and SIG was also limited to not include DNSSEC use.</td></tr><tr><td>PX</td><td>26</td><td>RFC 2163</td><td></td><td>Not in current use by any notable application</td></tr><tr><td>RP</td><td>17</td><td>RFC 1183</td><td></td><td>RP may be used for certain human-readable information regarding a different contact point for a specific host, subnet, or other domain level label separate than that used in the SOA record.</td></tr><tr><td>SIG</td><td>24</td><td>RFC 2065</td><td>RFC 3755</td><td>DNSSEC 第一个版本 (RFC 2065) 的一部分。NXT 已被 DNSSEC 更新 (RFC 3755) 淘汰。同时，KEY 和 SIG 的适用范围也仅限于不包括 DNSSEC 的使用。</td></tr><tr><td>X25</td><td>19</td><td>RFC 1183</td><td></td><td>Not in current use by any notable application</td></tr><tr><td>WKS</td><td>11</td><td>RFC 883, RFC 1035</td><td>Declared as “not to be relied upon” by RFC 1123 (more in RFC 1127).</td><td>Record to describe well-known services supported by a host. Not used in practice. The current recommendation and practice is to determine whether a service is supported on an IP address by trying to connect to it. SMTP is even prohibited from using WKS records in MX processing.[<a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types#cite_note-rfc1123-14">14]</a></td></tr><tr><td>SINK</td><td>40</td><td>N/A</td><td></td><td>Defined by the <a href="http://www.tools.ietf.org/html/draft-eastlake-kitchen-sink">Kitchen Sink</a> <a href="https://en.wikipedia.org/wiki/Internet_draft">internet draft</a>, but never made it to RFC status</td></tr><tr><td>NID</td><td>104</td><td>RFC 6742</td><td></td><td>Not in use by any notable application and marked as “experimental”</td></tr><tr><td>UINFO</td><td>100</td><td>N/A</td><td></td><td>IANA reserved, no RFC documented them [<a href="https://web.archive.org/web/20080611185015/http://www.ops.ietf.org/lists/namedroppers/namedroppers.2004/msg00949.html">1]</a> and support was removed from <a href="https://en.wikipedia.org/wiki/BIND">BIND</a> in the early 90s.</td></tr><tr><td>HINFO</td><td>13</td><td>RFC 883</td><td>Unobsoleted by RFC 8482. Currently used by <a href="https://en.wikipedia.org/wiki/Cloudflare">Cloudflare</a> in response to queries of the type ANY.[<a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types#cite_note-CF-HINFO-15">15]</a></td><td>Record intended to provide information about host CPU type and operating system. It was intended to allow protocols to optimize processing when communicating with similar peers.</td></tr><tr><td>NINFO</td><td>56</td><td>N/A</td><td></td><td>Used to provide status information about a zone. Requested for the IETF draft “The Zone Status (ZS) DNS Resource Record” in 2008. Expired without adoption.[<a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types#cite_note-IETF-dnsext-zs-19">19]</a></td></tr><tr><td>MR</td><td>9</td><td>RFC 883</td><td>没有正式过时。不太可能被采用（RFC 2505）。</td><td>MB、MG、MR 和 MINFO 是发布订阅者邮件列表的记录。MAILB 是一个查询代码，它返回这些记录之一。目的是让 MB 和 MG 替换<a href="https://en.wikipedia.org/wiki/SMTP">SMTP</a> VRFY 和 EXPN 命令。MR 是为了替换“551 User Not Local”SMTP 错误。后来，RFC 2505 建议禁用 VRFY 和 EXPN，使 MB 和 MG 变得不必要。它们被 RFC 1035 归类为实验性的。</td></tr><tr><td>MD</td><td>3</td><td>RFC 883</td><td>RFC 973</td><td>Mail destination (MD) and mail forwarder (MF) records; MAILA is not an actual record type, but a query type which returns MF and/or MD records. RFC 973 replaced these records with the MX record.</td></tr><tr><td>NSAP</td><td>22</td><td>RFC 1706</td><td></td><td>Not in current use by any notable application</td></tr><tr><td>NBSTAT</td><td>33</td><td>RFC 1002</td><td></td><td>错误（来自 RFC 1002）；编号现在分配给 NIMLOC 和 SRV。</td></tr><tr><td>TALINK</td><td>58</td><td>N/A</td><td></td><td>Defined by the <a href="https://tools.ietf.org/html/draft-wijngaards-dnsop-trust-history-02">DNSSEC Trust Anchor History Service</a> <a href="https://en.wikipedia.org/wiki/Internet_draft">internet draft</a>, but never made it to RFC status</td></tr><tr><td>RKEY</td><td>57</td><td>N/A</td><td></td><td>Used for encryption of NAPTR records. Requested for the IETF draft “The RKEY DNS Resource Record” in 2008. Expired without adoption.[<a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types#cite_note-IETF-dnsext-rkey-20">20]</a></td></tr><tr><td>NIMLOC</td><td>32</td><td>N/A</td><td></td><td>由<a href="http://www.tools.ietf.org/html/draft-ietf-nimrod-dns-00">Nimrod DNS</a> <a href="https://en.wikipedia.org/wiki/Internet_draft">互联网草案</a>定义，但从未达到 RFC 状态。当前未由任何显着应用程序使用</td></tr><tr><td>ATMA</td><td>34</td><td>N/A</td><td></td><td>Defined by The ATM Forum Committee.[<a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types#cite_note-AF-DANS-0152-16">16]</a></td></tr><tr><td>NULL</td><td>10</td><td>RFC 883</td><td>RFC 1035</td><td>Obsoleted by RFC 1035. RFC 883 defined “completion queries” (opcode 2 and maybe 3) which used this record. RFC 1035 later reassigned opcode 2 to be “status” and reserved opcode 3.</td></tr><tr><td>MINFO</td><td>14</td><td>RFC 883</td><td>没有正式过时。不太可能被采用（RFC 2505）。</td><td>MB、MG、MR 和 MINFO 是发布订阅者邮件列表的记录。MAILB 是一个查询代码，它返回这些记录之一。目的是让 MB 和 MG 替换<a href="https://en.wikipedia.org/wiki/SMTP">SMTP</a> VRFY 和 EXPN 命令。MR 是为了替换“551 User Not Local”SMTP 错误。后来，RFC 2505 建议禁用 VRFY 和 EXPN，使 MB 和 MG 变得不必要。它们被 RFC 1035 归类为实验性的。</td></tr><tr><td>UID</td><td>101</td><td>N/A</td><td></td><td>IANA 保留，没有 RFC 记录它们[<a href="https://web.archive.org/web/20080611185015/http://www.ops.ietf.org/lists/namedroppers/namedroppers.2004/msg00949.html">1]</a>并且在 90 年代初从<a href="https://en.wikipedia.org/wiki/BIND">BIND</a>中删除了支持。</td></tr><tr><td>DOA</td><td>259</td><td>N/A</td><td></td><td>Defined by the <a href="https://tools.ietf.org/html/draft-durand-doa-over-dns-03">DOA over DNS</a> <a href="https://en.wikipedia.org/wiki/Internet_draft">internet draft</a>, but never made it to RFC status</td></tr><tr><td>ISDN</td><td>20</td><td>RFC 1183</td><td></td><td>Not in current use by any notable application</td></tr><tr><td>UNSPEC</td><td>103</td><td>N/A</td><td></td><td>IANA 保留，没有 RFC 记录它们[<a href="https://web.archive.org/web/20080611185015/http://www.ops.ietf.org/lists/namedroppers/namedroppers.2004/msg00949.html">1]</a>并且在 90 年代初从<a href="https://en.wikipedia.org/wiki/BIND">BIND</a>中删除了支持。</td></tr><tr><td>RT</td><td>21</td><td>RFC 1183</td><td></td><td>Not in current use by any notable application</td></tr><tr><td>MAILA</td><td>254</td><td>RFC 883</td><td>RFC 973</td><td>邮件目的地 (MD) 和邮件转发器 (MF) 记录；MAILA 不是实际的记录类型，而是返回 MF 和/或 MD 记录的查询类型。RFC 973 将这些记录替换为 MX 记录。</td></tr><tr><td>GID</td><td>102</td><td>N/A</td><td></td><td>IANA 保留，没有 RFC 记录它们[<a href="https://web.archive.org/web/20080611185015/http://www.ops.ietf.org/lists/namedroppers/namedroppers.2004/msg00949.html">1]</a>并且在 90 年代初从<a href="https://en.wikipedia.org/wiki/BIND">BIND</a>中删除了支持。</td></tr><tr><td>MAILB</td><td>253</td><td>RFC 883</td><td>没有正式过时。不太可能被采用（RFC 2505）。</td><td>MB、MG、MR 和 MINFO 是发布订阅者邮件列表的记录。MAILB 是一个查询代码，它返回这些记录之一。目的是让 MB 和 MG 替换<a href="https://en.wikipedia.org/wiki/SMTP">SMTP</a> VRFY 和 EXPN 命令。MR 是为了替换“551 User Not Local”SMTP 错误。后来，RFC 2505 建议禁用 VRFY 和 EXPN，使 MB 和 MG 变得不必要。它们被 RFC 1035 归类为实验性的。</td></tr><tr><td>KEY</td><td>25</td><td>RFC 2065</td><td>RFC 3755</td><td>DNSSEC 第一个版本 (RFC 2065) 的一部分。NXT 已被 DNSSEC 更新 (RFC 3755) 淘汰。同时，KEY 和 SIG 的适用范围也仅限于不包括 DNSSEC 的使用。</td></tr><tr><td>SPF</td><td>99</td><td>RFC 4408</td><td>RFC 7208</td><td>Specified as part of the <a href="https://en.wikipedia.org/wiki/Sender_Policy_Framework">Sender Policy Framework</a> protocol as an alternative to storing SPF data in TXT records, using the same format. Support for it was discontinued in RFC 7208 due to widespread lack of support.[<a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types#cite_note-IETF-RFC6686-17">17]</a>[<a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types#cite_note-IETF-RFC7208-18">18]</a></td></tr></tbody></table><h2 id="RR格式详解"><a href="#RR格式详解" class="headerlink" title="RR格式详解"></a>RR格式详解</h2><h3 id="SRV"><a href="#SRV" class="headerlink" title="SRV"></a>SRV</h3><p>DNS SRV是DNS记录中一种，用来指定服务地址。与常见的A记录、cname不同的是，SRV中除了记录<strong>服务器</strong>的地址，还记录了<strong>服务</strong>的端口，并且可以设置每个服务地址的优先级和权重。访问服务的时候，本地的DNS resolver从DNS服务器查询到一个地址列表，根据优先级和权重，从中选取一个地址作为本次请求的目标地址。</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>一个能够支持SRV的LDAP client可以通过查询域名，得知LDAP服务的IP地址和服务端口：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_ldap</span>.</span><span class="hljs-module"><span class="hljs-identifier">_tcp</span>.</span></span>example.com<br></code></pre></td></tr></table></figure><p>这个域名的格式是<a href="https://datatracker.ietf.org/doc/html/rfc2782">rfc-2782</a>中推荐的格式，_ldap表示LDAP服务，_tcp表示通过TCP协议访问LDAP服务。</p><h4 id="SRV的记录格式"><a href="#SRV的记录格式" class="headerlink" title="SRV的记录格式:"></a>SRV的记录格式:</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br>|                                               |<br>/                                               /<br>/            _Service._Proto.Name               /<br><span class="hljs-section">|                                               |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-section">|                      33                       |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-section">|                     CLASS                     |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br>|                      TTL                      |<br><span class="hljs-section">|                                               |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br>|                   RDLENGTH                    |<br><span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--<span class="hljs-code">+--+</span>--|<br>/                     RDATA                     /<br><span class="hljs-section">/                                               /</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></code></pre></td></tr></table></figure><h5 id="Service-Proto-Name-格式说明"><a href="#Service-Proto-Name-格式说明" class="headerlink" title="_Service._Proto.Name 格式说明"></a>_Service._Proto.Name 格式说明</h5><table><thead><tr><th>标签名</th><th>说明</th></tr></thead><tbody><tr><td>_Service</td><td>服务名称，前缀“_”是为防止与DNS Label（普通域名）冲突。</td></tr><tr><td>_Proto</td><td>服务使用的通信协议，_TCP、_UDP、其它标准协议或者自定义的协议。前缀“_”是为防止与DNS Label（普通域名）冲突</td></tr><tr><td>Name</td><td>提供服务的域名。</td></tr><tr><td>TTL/ CLASS及RDLENGTH</td><td>参考<a href="#rr_format">《RR记录格式》</a>的标准含义</td></tr></tbody></table><h5 id="RDATA格式为"><a href="#RDATA格式为" class="headerlink" title="RDATA格式为:"></a>RDATA格式为:</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-section">|                  Priority                     |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-section">|                    Weight                     |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-section">|                    Port                       |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br>|                                               |<br>/                                               /<br>/                    Target                     /<br><span class="hljs-section">|                                               |</span><br><span class="hljs-section">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></code></pre></td></tr></table></figure><h5 id="RDATA字段含义如下："><a href="#RDATA字段含义如下：" class="headerlink" title="RDATA字段含义如下："></a>RDATA字段含义如下：</h5><table><thead><tr><th>字段名</th><th>长度</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Priority</td><td>2字节</td><td>无符号整形</td><td>该记录的优先级，数值越小表示优先级越高，范围0-65535。</td></tr><tr><td>Weight</td><td>2字节</td><td>无符号整形</td><td>该记录的权重，数值越高权重越高，范围0-65535。</td></tr><tr><td>Port</td><td>2字节</td><td>无符号整形</td><td>服务端口号，0-65535。</td></tr><tr><td>Target</td><td></td><td>标签字符串</td><td>目标主机对应的域名。 此域名必须有一个或多个地址记录(A或AAAA记录)，此域名不能是别名（在 RFC 1034 或 RFC 2181 的意义上）。 建议并不强制要求在应答数据的附加数据部分返回此地址记录数据。 除非未来的标准允许，否则此名称不能使用<a href="#compress">标签压缩</a>。<br>“.” 代表该服务在此域中绝对不可用。</td></tr></tbody></table><p>客户端查询到多条记录的时候，使用优先级最高的记录。</p><p>对相同优先级的记录，按照权重选择，记录的权重越高，被选择的可能性越高。</p><p>选择的时候，将所有记录的权重值累加，得到一个选择区间[0,sum]，每个记录在[0,sum]中占据一段连续的、长度为自身权重值区间。然后生成一个[0,sum]中的随机数，随机数落在的区间所属的记录就是被选择的记录。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li><p>在使用DNS SRV的时候，要注意DNS Client是否按照预期的方式处理收到的SRV记录。当前DNS SRV只能够负责提供服务地址列表，对这个列表如何解读，完全取决于Client的实现。</p></li><li><p><a href="https://datatracker.ietf.org/doc/html/rfc1035">rfc-1035</a>中规定，通过UDP协议传输DNS响应时，UDP报文的<strong>负载</strong>不能超过512字节，在添加SRV记录的时候，要特别注意。（通过TCP传输时没有512字节的限制）</p></li><li><p>当一个服务地址有多个相同优先级的SRV记录的时候，Client会按照这些SRV的权重分配请求。下一次向服务发起的请求可能是发送到了另一个地址。</p></li><li><p>在通过SRV记录的权重来分配请求的时候，使用的是本地缓存的DNS记录，所以不能实时地感知到服务的地址列表变化。除非将TTL设置的非常短暂，但这样将会频繁地查询DNS服务器。</p></li></ol><h4 id="示例如下"><a href="#示例如下" class="headerlink" title="示例如下"></a>示例如下</h4><img src="/2020/08/26/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/01DNS%E5%8D%8F%E8%AE%AE/srv.png" class="" title="SRV应答"><h1 id="EDNS-DNS扩展机制"><a href="#EDNS-DNS扩展机制" class="headerlink" title="EDNS( DNS扩展机制)"></a>EDNS( DNS扩展机制)</h1><p>EDNS即Extension Mechanisms for DNS。最新定义在<a href="https://tools.ietf.org/html/rfc6891">RFC 6891</a>(替换了RFC2671)向DNS添加了扩展机制。EDNS在遵循已有的<a href="#dformat">DNS报文格式</a>的基础上增加一些字段，来支持更多的DNS请求业务，许多新的DNS使用和协议扩展依赖于这些扩展的存在。</p><p>需要注意的是，像DNS服务器这样一个大型且广泛应用的系统软件，新增加扩展协议的时候一定要考虑到向后兼容性(backward compatibility)，即你增加了你这个特性的消息传输给未支持该特性的服务器时，后者依然能正确处理。</p><p>EDNS是DNS的逐跳( hop-by-hop )扩展。</p><h2 id="为什么要有EDNS？"><a href="#为什么要有EDNS？" class="headerlink" title="为什么要有EDNS？"></a>为什么要有EDNS？</h2><p>RFC2671中指出EDNS被提出来的几个理由：</p><ul><li><p>DNS协议头部的第二个16字节中都已经被用的差不多了，需要添加新的返回类型(RCODE)和标记(FLAGS)来支持其他需求；</p></li><li><p>只为标示domain类型的标签分配了两位，现在已经用掉了两位（00标示字符串类型，11表示压缩类型），后面如果有更多的标签类型则无法支持；</p></li><li><p>当初DNS协议中设计的用UDP包传输时包大小限制为512字节，现在很多主机已经具备重组大数据包的能力，所以要有一种机制来允许DNS请求方通知DNS服务器让其返回大包；</p></li></ul><p>以后我们会看到，<a href="#dnssec">DNSSEC机制(DNS Security Extensions)</a>和<a href="#ecs">ECS(edns-client-subnet)机制</a>等都需要有EDNS的支持。</p><h2 id="EDNS的内容是什么"><a href="#EDNS的内容是什么" class="headerlink" title="EDNS的内容是什么"></a>EDNS的内容是什么</h2><p>怎样在DNS消息协议的基础上再增加一些字段呢？为了保持向后兼容性，更改已有的DNS协议格式是不可能的，所以只能在DNS协议的数据部分中做文章。</p><p>由此，EDNS中引入了一种新的<a href="#opt">伪资源记录 OPT</a>（一种特殊的RR），之所以叫做伪资源记录是因为它不包含任何DNS数据，OPT RR不能被cache、不能被转发、不能被存储在zone文件中。OPT被放在DNS通信双方（requestor和responsor）DNS消息的<a href="#additional"><strong>Additional</strong></a>区域中。</p><h2 id="OPT-伪RR介绍"><a href="#OPT-伪RR介绍" class="headerlink" title="OPT 伪RR介绍"></a>OPT 伪RR介绍</h2><p>OPT RR 有时称为meta RR一般存放在<a href="#additional"><strong>Additional</strong></a>区域中。其对应的<a href="#opt">RR TYPE</a>值为41 。</p><h3 id="线状数据格式表示"><a href="#线状数据格式表示" class="headerlink" title="线状数据格式表示"></a>线状数据格式表示</h3><p>OPT RR遵循<a href="#rr_format">标准RR格式</a>，但相关的含义会和<a href="#rr_format">标准的RR格式</a>有些差别，每个字段定义如下：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+------------+--------------+------------------------------+<br>|<span class="hljs-string"> Field Name </span>|<span class="hljs-string"> Field Type   </span>|<span class="hljs-string"> Description                  </span>|<br>+------------+--------------+------------------------------+<br>|<span class="hljs-string"> NAME       </span>|<span class="hljs-string"> domain name  </span>|<span class="hljs-string"> MUST be 0 (root domain)      </span>|<span class="hljs-string"> 固定为空</span><br><span class="hljs-string"></span>|<span class="hljs-string"> TYPE       </span>|<span class="hljs-string"> u_int16_t    </span>|<span class="hljs-string"> OPT (41)                     </span>|<span class="hljs-string"> 固定为41(0x29)</span><br><span class="hljs-string"></span>|<span class="hljs-string"> CLASS      </span>|<span class="hljs-string"> u_int16_t    </span>|<span class="hljs-string"> requestor&#x27;s UDP payload size </span>|<span class="hljs-string"> </span><br><span class="hljs-string"></span>|<span class="hljs-string"> TTL        </span>|<span class="hljs-string"> u_int32_t    </span>|<span class="hljs-string"> extended RCODE and flags     </span>|<span class="hljs-string"> 扩展的DNS消息头部</span><br><span class="hljs-string"></span>|<span class="hljs-string"> RDLEN      </span>|<span class="hljs-string"> u_int16_t    </span>|<span class="hljs-string"> length of all RDATA          </span>|<br>|<span class="hljs-string"> RDATA      </span>|<span class="hljs-string"> octet stream </span>|<span class="hljs-string"> &#123;attribute,value&#125; pairs      </span>|<span class="hljs-string"> KV类型的可变部分</span><br><span class="hljs-string">+------------+--------------+------------------------------+</span><br></code></pre></td></tr></table></figure><h4 id="TTL字段说明"><a href="#TTL字段说明" class="headerlink" title="TTL字段说明"></a>TTL字段说明</h4><p>原来的TTL字段被用来存储扩展消息头部中的RCODE和flags，它的格式如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">              +0 <span class="hljs-params">(MSB)</span>                            +1 <span class="hljs-params">(LSB)</span><br>   +<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<br>0: |         EXTENDED-RCODE        |            VERSION            |<br>   +<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<br>2: | DO|                           Z                               |<br>   +<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<br></code></pre></td></tr></table></figure><p>EXTENDED-RCODE<br>      高位8个bit是扩展RCODE(返回状态码)，这8个bit加上DNS头部的4bit总共有12bit(8bit在高位),这样就可以表示更多的返回类型；<br>      Forms the upper 8 bits of extended 12-bit RCODE (together with the<br>      4 bits defined in [RFC1035].  Note that EXTENDED-RCODE value 0<br>      indicates that an unextended RCODE is in use (values 0 through<br>      15).</p><p>   VERSION<br>      表示EDNS的版本（EDNS根据支持不同的扩展内容会有很多版本）,<br>      Indicates the implementation level of the setter.  Full<br>      conformance with this specification is indicated by version ‘0’.<br>      Requestors are encouraged to set this to the lowest implemented<br>      level capable of expressing a transaction, to minimise the<br>      responder and network load of discovering the greatest common<br>      implementation level between requestor and responder.  A<br>      requestor’s version numbering strategy MAY ideally be a run-time<br>      configuration option.<br>      If a responder does not implement the VERSION level of the<br>      request, then it MUST respond with RCODE=BADVERS.  All responses<br>      MUST be limited in format to the VERSION level of the request, but<br>      the VERSION of each response SHOULD be the highest implementation<br>      level of the responder.  In this way, a requestor will learn the<br>      implementation level of a responder as a side effect of every<br>      response, including error responses and including RCODE=BADVERS.</p><h4 id="RDATA-字段说明"><a href="#RDATA-字段说明" class="headerlink" title="RDATA 字段说明"></a><span id=opt_rdata>RDATA 字段说明</span></h4><p>RDATA中可能包含零个或多个<code>option</code>。每个<code>option</code>必须视为一个位字段。每个<code>option</code>的格式如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">              +0 <span class="hljs-params">(MSB)</span>                            +1 <span class="hljs-params">(LSB)</span><br>   +<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<br>0: |                          OPTION-CODE                          |<br>   +<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<br>2: |                         OPTION-LENGTH                         |<br>   +<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<br>4: |                                                               |<br>   /                          OPTION-DATA                          /<br>   /                                                               /<br>   +<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<br></code></pre></td></tr></table></figure><p>OPTION-CODE ：由IANA分配，<a href="https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-11">参考</a></p><p>OPTION-LENGTH: OPTION-DATA的长度</p><p>OPTION-DATA: OPTION-CODE对应的内容, 具体实现依赖于具体RFC定义，如<a href="#ecs_option">ECS</a></p><h2 id="EDNS-应用实现"><a href="#EDNS-应用实现" class="headerlink" title="EDNS 应用实现"></a>EDNS 应用实现</h2><h3 id="ECS"><a href="#ECS" class="headerlink" title="ECS "></a><span id=ecs>ECS </span></h3><p>ECS即ENS Client Subnet。 是EDNS中的一个OPT，它允许递归 DNS 解析器为其代表进行DNS查询的主机或客户端指定子网。这通常旨在通过允许更好地使用基于 DNS 的负载平衡来在客户端计算机不一定靠近递归解析器时选择客户端附近的服务地址，从而帮助加快从内容传递网络传递数据的速度。</p><p>ECS 的详细内容可参考<a href="https://datatracker.ietf.org/doc/html/rfc7871">RFC7871</a>。</p><h4 id="ECS-option-数据格式"><a href="#ECS-option-数据格式" class="headerlink" title="ECS option 数据格式"></a><span id=ecs_option>ECS option 数据格式</span></h4><p>ECS基于设置<a href="#opt_rdata">OPT伪RR的RDATA</a>来实现的。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">             +0 <span class="hljs-params">(MSB)</span>                            +1 <span class="hljs-params">(LSB)</span><br>   +<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<br>0: |                          OPTION-CODE                          |<br>   +<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<br>2: |                         OPTION-LENGTH                         |<br>   +<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<br>4: |                            FAMILY                             |<br>   +<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<br>6: |     SOURCE PREFIX-LENGTH      |     SCOPE PREFIX-LENGTH       |<br>   +<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<br>8: |                           ADDRESS.<span class="hljs-string">..</span>                          /<br>   +<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<span class="hljs-params">---</span>+<br></code></pre></td></tr></table></figure><ul><li>OPTION-CODE： 长度为2个字节，固定为 8 (0x00 0x80)由 <a href="https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-11">IANA</a> 统一规定对应的编码序号。</li><li>OPTION-LENGTH：长度为2个字节，代表了后续的FAMILY、 SOURCE PREFIX-LENGTH 、SCOPE PREFIX-LENGTH  、ADDRESS等内容的总长度。</li><li>FAMILY：2个字节，标识ADDRESS的地址族，由<a href="https://www.iana.org/assignments/address-family-numbers/address-family-numbers.xhtml">IANA</a>统一确定地址族编码序号，ipv4为1，ipv6为2</li><li>SOURCE PREFIX-LENGTH：1个字节，查询中位置偏移(就是CIDR中的mask),具体请了解CIDR</li><li>SCOPE PREFIX-LENGTH ：响应返回的位置偏移,在查询中应为0</li><li>ADDRESS：就是设置的SubNet的IP地址,依据上面的FAMILY</li></ul><h3 id="DNSSEC"><a href="#DNSSEC" class="headerlink" title="DNSSEC"></a><span id=dnssec>DNSSEC</span></h3><p>DNSSEC( DNS Security Extensions) 即DNS安全扩展</p><h1 id="什么是SOA？"><a href="#什么是SOA？" class="headerlink" title="什么是SOA？"></a>什么是SOA？</h1><p>SOA，即Start Of Authority，放在 zone file 中，用于描述这个 zone 负责的 name server，version number…等资料，以及当 slave server 要备份这个 zone 时的一些参数。</p><p>每个 zone file 中必须有且仅有一条 SOARR ，并在 zone file 中作为第一条资源记录保存。</p><p>举个栗子：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs llvm">@ IN SOA lv<span class="hljs-number">3</span>ns<span class="hljs-number">1</span>.ffdns.net. webmaster.ffdns.net. (<br>    <span class="hljs-number">2009092868</span> <span class="hljs-comment">; Serial</span><br>    <span class="hljs-number">604800</span> <span class="hljs-comment">; Refresh</span><br>    <span class="hljs-number">3600</span> <span class="hljs-comment">; Retry</span><br>    <span class="hljs-number">2419200</span> <span class="hljs-comment">; Expire</span><br>    <span class="hljs-number">3600</span> ) <span class="hljs-comment">; Minimum</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>第一行：</strong><code>@</code>指代该 zone ； <code>lv3ns1.ffdns.net.</code>是该 zone 的授权主机；<code>webmaster.ffdns.net.</code>代表[<code>webmaster@ffdns.net](mailto:</code><a href="mailto:&#119;&#101;&#98;&#109;&#x61;&#x73;&#x74;&#101;&#114;&#x40;&#x66;&#102;&#100;&#x6e;&#x73;&#x2e;&#x6e;&#x65;&#x74;">&#119;&#101;&#98;&#109;&#x61;&#x73;&#x74;&#101;&#114;&#x40;&#x66;&#102;&#100;&#x6e;&#x73;&#x2e;&#x6e;&#x65;&#x74;</a>)`，即该 zone 的管理者信箱。</p><p><strong>Serial：</strong>代表 zone file 的版本，每当 zone file 内容有变动，name server 管理者就应该增加这个号码，因为 slave 会将这个号码与其 copy 的那份比对以便决定是否要再 copy 一次（即进行 zone transfer ）。</p><p><strong>Refresh：</strong> slave server 每隔这段时间(秒)，就去检查 master server 上的 serial number 。</p><p><strong>Retry：</strong>当 slave server 无法和 master 进行 serial check 时，要每隔这段时间（秒） retry 一次。</p><p><strong>Expire：</strong>当时间超过 Expire 所定的秒数而 slave server 都无法和 master 取得连络，那么 slave 会删除自己的这份 copy 。</p><p><strong>Minimum：</strong>代表这个 zone file 中所有 record 的内定的 TTL 值，也就是其它的 DNS server cache 这笔 record 时，最长不应该超过这个时间。</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/cobbliu/p/3188632.html">https://www.cnblogs.com/cobbliu/p/3188632.html</a></p><p><a href="https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-11">https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-11</a></p><p><a href="https://www.iana.org/assignments/address-family-numbers/address-family-numbers.xhtml">https://www.iana.org/assignments/address-family-numbers/address-family-numbers.xhtml</a></p><p><a href="https://asutorufa.github.io/posts/668530ca/">https://asutorufa.github.io/posts/668530ca/</a></p><p><a href="https://www.lijiaocn.com/%E6%8A%80%E5%B7%A7/2017/03/06/dns-srv.html">https://www.lijiaocn.com/%E6%8A%80%E5%B7%A7/2017/03/06/dns-srv.html</a></p>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>dns</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DNS基础</title>
    <link href="/2020/08/26/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/00DNS%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/08/26/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/00DNS%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="DNS-基础内容"><a href="#DNS-基础内容" class="headerlink" title="DNS 基础内容"></a>DNS 基础内容</h1><h2 id="什么是-DNS？"><a href="#什么是-DNS？" class="headerlink" title="什么是 DNS？"></a>什么是 DNS？</h2><p>DNS 是一个应用层协议,域名系统 (DNS) 的作用是将人类可读的域名 (如，<a href="http://www.example.com/">www.example.com</a>) 转换为机器可读的 IP 地址 (如，192.0.2.44)。DNS 协议建立在 UDP 或 TCP 协议之上，默认使用 53 号端口。客户端默认通过 UDP 协议进行通讯，但是由于广域网中不适合传输过大的 UDP 数据包，因此规定当报文长度超过了 512 字节时，应转换为使用 TCP 协议进行数据传输。<br>可能会出现如下的两种情况：</p><ul><li>客户端认为 UDP 响应包长度可能超过 512 字节，主动使用 TCP 协议；</li><li>客户端使用 UDP 协议发送 DNS 请求，服务端发现响应报文超过了 512 字节，在截断的 UDP 响应报文中将 TC 设置为 1 ，以通知客户端该报文已经被截断，客户端收到之后再发起一次 TCP 请求。</li></ul><h2 id="什么是域名？"><a href="#什么是域名？" class="headerlink" title="什么是域名？"></a>什么是域名？</h2><p>域名是由一串用点分隔符 . 组成的互联网上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的方位。域名可以说是一个 IP 地址的代称，目的是为了便于记忆后者。例如，wikipedia.org 是一个域名，和 IP 地址 208.80.152.2 相对应。人们可以直接访问 wikipedia.org 来代替 IP 地址，然后域名系统（DNS）就会将它转化成便于机器识别的 IP 地址。这样，人们只需要记忆 wikipedia.org 这一串带有特殊含义的字符，而不需要记忆没有含义的数字。</p><h2 id="DNS-的分层"><a href="#DNS-的分层" class="headerlink" title="DNS 的分层"></a>DNS 的分层</h2><p>域名系统是分层次的。</p><ul><li><p>根域：DNS域名使用中规定由尾部句点’.’来指定名称位于根或者更高层次的域层次结构,根服务器有13台。</p></li><li><p>顶级域：用来指示某个国家、地区或者组织。采用三个字符，如com -&gt; 商业公司，edu -&gt; 教育机构，net -&gt; 网络公司，gov -&gt; 非军事政府机构等等。</p></li><li><p>二级域：个人或者组织在Internet使用的注册名称。采用两个字符，如：cn -&gt; 代表中国，jp -&gt; 日本，uk -&gt; 英国，hk -&gt; 香港等等</p></li><li><p>主机：主机名处于域名空间结构中的最底层，主机名和域名结合构成FQDN，主机名是FQDN最左端的部分。</p></li></ul><p>在域名系统的层次结构中，各种域名都隶属于域名系统根域的下级。域名的第一级是顶级域，它包括通用顶级域，例如 .com、.net 和 .org；以及国家和地区顶级域，例如 .us、.cn 和 .tk。顶级域名下一层是二级域名，一级一级地往下。这些域名向人们提供注册服务，人们可以用它创建公开的互联网资源或运行网站。顶级域名的管理服务由对应的域名注册管理机构（域名注册局）负责，注册服务通常由域名注册商负责。</p><ul><li>授权型 DNS - 一种授权型 DNS 服务提供一种更新机制，供开发人员用于管理其公用 DNS 名称。然后，它响应 DNS 查询，将域名转换为 IP 地址，以便计算机可以相互通信。授权型 DNS 对域有最终授权且负责提供递归型 DNS 服务器对 IP 地址信息的响应。Amazon Route 53 是一种授权型 DNS 系统。</li><li>递归型 DNS - 客户端通常不会对授权型 DNS 服务直接进行查询。而是通常连接到称为解析程序的其他类型 DNS 服务，或递归型 DNS 服务。递归型 DNS 服务就像是旅馆的门童：尽管没有任何自身的 DNS 记录，但是可充当代表您获得 DNS 信息的中间程序。如果递归型 DNS 拥有已缓存或存储一段时间的 DNS 参考，那么它会通过提供源或 IP 信息来响应 DNS 查询。如果没有，则它会将查询传递到一个或多个授权型 DNS 服务器以查找信息。</li></ul><p><strong>记录类型</strong><br> DNS 中，常见的资源记录类型有：</p><ul><li>NS 记录（域名服务） ─ 指定解析域名或子域名的 DNS 服务器。</li><li>MX 记录（邮件交换） ─ 指定接收信息的邮件服务器。</li><li>A 记录（地址） ─ 指定域名对应的 IPv4 地址记录。</li><li>AAAA 记录（地址） ─ 指定域名对应的 IPv6 地址记录。</li><li><strong>NAME（规范）</strong> ─ 一个域名映射到另一个域名或 <code>CNAME</code> 记录（ example.com 指向 <a href="https://links.jianshu.com/go?to=http://www.example.com/">www.example.com</a> ）或映射到一个 <code>A</code>记录。</li><li>PTR 记录（反向记录） ─ PTR 记录用于定义与 IP 地址相关联的名称。 PTR 记录是 A 或 AAAA 记录的逆。 PTR 记录是唯一的，因为它们以 .arpa 根开始并被委派给 IP 地址的所有者。</li></ul><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><h3 id="域名解析的基本过程"><a href="#域名解析的基本过程" class="headerlink" title="域名解析的基本过程"></a>域名解析的基本过程</h3><p>主机名到 IP 地址的映射有两种方式：</p><ul><li>静态映射 - 在本机上配置域名和 IP 的映射，旨在本机上使用。Windows 和 Linux 的 hosts 文件中的内容就属于静态映射。</li><li>动态映射 - 建立一套域名解析系统（DNS），只在专门的 DNS 服务器上配置主机到 IP 地址的映射，网络上需要使用主机名通信的设备，首先需要到 DNS 服务器查询主机所对应的 IP 地址。</li></ul><p>通过域名去查询域名服务器，得到 IP 地址的过程叫做域名解析。在解析域名时，一般先静态域名解析，再动态解析域名。可以将一些常用的域名放入静态域名解析表中，这样可以大大提高域名解析效率。</p><img src="/2020/08/26/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/00DNS%E5%9F%BA%E7%A1%80/2.png" class="" title="域名解析过程"><p>上图展示了一个动态域名解析的流程，步骤如下：</p><ol><li><p>用户打开 Web 浏览器，在地址栏中输入 <a href="http://www.example.com/">www.example.com</a> ，然后按 Enter 键。</p></li><li><p><a href="http://www.example.com/">www.example.com</a> 的请求被路由到 DNS 解析程序，这一般由用户的 Internet 服务提供商 (ISP) 进行管理，例如有线 Internet 服<br> 务提供商、DSL 宽带提供商或公司网络。</p></li><li><p>ISP 的 DNS 解析程序将 <a href="http://www.example.com/">www.example.com</a> 的请求转发到 DNS 根名称服务器。</p></li><li><p>ISP 的 DNS 解析程序再次转发 <a href="http://www.example.com/">www.example.com</a>  的请求，这次转发到 .com 域的一个 TLD 名称服务器。.com 域的名称服务器使用与 example.com 域相关的四个 Amazon Route 53 名称服务器的名称来响应该请求。</p></li><li><p>ISP 的 DNS 解析程序选择一个 Amazon Route 53 名称服务器，并将  <a href="http://www.example.com/">www.example.com</a>  的请求转发到该名称服务器。</p></li><li><p>Amazon Route 53 名称服务器在 example.com 托管区域中查找 <a href="http://www.example.com/">www.example.com</a> 记录，获得相关值，例如，Web 服务器的 IP 地址 (192.0.2.44)，并将 IP 地址返回至 DNS 解析程序。</p></li><li><p>ISP 的 DNS 解析程序最终获得用户需要的 IP 地址。解析程序将此值返回至 Web 浏览器。DNS 解析程序还会将 example.com 的 IP 地址缓存 (存储) 您指定的时长，以便它能够在下次有人浏览 example.com 时更快地作出响应。有关更多信息，请参阅存活期 (TTL)。</p></li><li><p>Web 浏览器将 <a href="http://www.example.com/">www.example.com</a> 的请求发送到从 DNS 解析程序中获得的 IP 地址。这是您的内容所处位置，例如，在 Amazon EC2 实例中或配置为网站终端节点的 Amazon S3 存储桶中运行的 Web 服务器。</p></li><li><p>192.0.2.44 上的 Web 服务器或其他资源将 <a href="http://www.example.com/">www.example.com</a>  的 Web 页面返回到 Web 浏览器，且 Web 浏览器会显示该页面。<br> 注意：只有配置了域名服务器，才能执行域名解析。<br> 例如，在 Linux 中执行 vim /etc/resolv.conf 命令，在其中添加下面的内容来配置域名服务器地址：</p><figure class="highlight nginx"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nameserver</span> <span class="hljs-number">218.2.135.1</span><br></code></pre></td></tr></table></figure><h3 id="域名解析涉及4个DNS服务器"><a href="#域名解析涉及4个DNS服务器" class="headerlink" title="域名解析涉及4个DNS服务器"></a>域名解析涉及4个DNS服务器</h3><p>DNS recursor、根名称服务器 、TLD名称服务器、权威名称服务器</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">DNS</span> recursor: recursor可以被认为是一个图书管理员，被要求在图书馆的某个地方找到一本特定的书。DNS recursor是一个服务器，旨在通过Web浏览器等应用程序从客户端计算机接收查询。通常，recursor负责发出其他请求以满足客户端的DNS查询。<br><br>根名称服务器: 根服务器是将人类可读主机名转换（解析）为<span class="hljs-built_in">IP</span>地址的第一步。它可以被认为是图书馆中指向不同书籍书籍的索引 - 通常它可以作为对其他更具体位置的参考。<br><br><span class="hljs-symbol">TLD</span>名称服务器: 顶级域名服务器（TLD）可以被视为库中特定的书架。此名称服务器是搜索特定<span class="hljs-built_in">IP</span>地址的下一步，它托管主机名的最后一部分（在east263.com中，TLD服务器是“com”）。<br><br>权威名称服务器:  这个最终名称服务器可以被认为是书架上的字典，其中可以将特定名称翻译成其定义。权威名称服务器是名称服务器查询中的最后一站。如果权威名称服务器可以访问所请求的记录，它将把请求的主机名的<span class="hljs-built_in">IP</span>地址返回给发出初始请求的DNS Recursor（图书管理员）<br></code></pre></td></tr></table></figure></li></ol><h2 id="权威DNS服务器和递归DNS解析器的区别"><a href="#权威DNS服务器和递归DNS解析器的区别" class="headerlink" title="权威DNS服务器和递归DNS解析器的区别"></a>权威DNS服务器和递归DNS解析器的区别</h2><p>这两个概念都指的是与DNS基础结构不可分割的服务器（服务器组），但每个服务器执行不同的角色并且位于DNS查询管道内的不同位置。考虑差异的一种方法是递归解析器位于DNS查询的开头，而权威的名称服务器位于最后。</p><p><strong>递归DNS解析器</strong><br>    递归解析器是响应来自客户端的递归请求并花时间跟踪DNS记录的计算机。它通过发出一系列请求直到它到达请求记录的权威DNS名称服务器（或者如果没有找到记录则超时或返回错误）来完成此操作。幸运的是，递归DNS解析器并不总是需要发出多个请求才能跟踪响应客户端所需的记录; 缓存是一种数据持久性过程，它通过在DNS查找中提前提供请求的资源记录来帮助缩短必要的请求。</p><p><strong>权威DNS服务器</strong><br>    简而言之，权威DNS服务器是实际持有并负责DNS资源记录的服务器。这是DNS查找链底部的服务器，它将使用查询的资源记录进行响应，最终允许Web浏览器发出请求以访问访问网站或其他Web资源所需的IP地址。权威的名称服务器可以满足来自其自身数据的查询，而无需查询其他来源，因为它是某些DNS记录的最终真实来源。</p><h2 id="递归DNS查询和递归DNS解析器的差异"><a href="#递归DNS查询和递归DNS解析器的差异" class="headerlink" title="递归DNS查询和递归DNS解析器的差异"></a>递归DNS查询和递归DNS解析器的差异</h2><p><code>递归DNS查询</code>是指对需要解析查询的DNS解析器发出的请求。<code>递归DNS解析器</code>是接受递归查询并通过发出必要请求来处理响应的计算机。</p><h2 id="DNS查询的类型"><a href="#DNS查询的类型" class="headerlink" title="DNS查询的类型"></a>DNS查询的类型</h2><p>在典型的DNS查找中，会发生三种类型的查询。通过使用这些查询的组合，用于DNS解析的优化过程可以导致行进距离的减少。在理想情况下，缓存记录数据将可用，允许DNS名称服务器返回非递归查询。</p><div class="code-wrapper"><pre><code class="hljs">递归查询: 在递归查询中，DNS客户端要求DNS服务器（通常是DNS递归解析程序）将使用请求的资源记录响应客户端，或者如果解析程序无法找到记录，则会响应错误消息。迭代查询: 在这种情况下，DNS客户端将允许DNS服务器返回它可以的最佳答案。如果查询的DNS服务器与查询名称不匹配，则它将返回对域名称空间的较低级别具有权威性的DNS服务器的引用。然后，DNS客户端将对引用地址进行查询。此过程将继续使用查询链中的其他DNS服务器，直到发生错误或超时。非递归查询: 通常在DNS解析器客户端向DNS服务器查询其有权访问的记录时会发生这种情况，因为它对记录具有权威性，或者记录存在于其缓存中。通常，DNS服务器将缓存DNS记录以防止额外的带宽消耗和上游服务器的负载。</code></pre></div><h3 id="递归查询-VS-迭代查询"><a href="#递归查询-VS-迭代查询" class="headerlink" title="递归查询 VS. 迭代查询"></a>递归查询 VS. 迭代查询</h3><p>在递归查询模式下，DNS 服务器在接收到客户机请求时，必须使用一个准确的查询结果回复客户机。也就意味着，如果 DNS 服务器本地没有缓存所查询的 DNS 信息，那么该服务器会询问其它服务器，并将返回的查询结果提交给客户机。</p><p>而在使用迭代查询时，DNS 服务器会向客户机提供其它能够解析查询请求的 DNS 服务器地址。也就是说，当客户机发送查询请求时，DNS 服务器并不直接回复查询结果，而是告诉客户机另一台 DNS 服务器地址，客户机需要再向这台 DNS 服务器提交请求，依次循环直到返回查询的结果为止。</p><p>也就是说，关键的区别是由谁去查询最终的结果。</p><h2 id="DDoS"><a href="#DDoS" class="headerlink" title="DDoS"></a>DDoS</h2><p>发送大量的 DNS 递归查询会消耗服务端的一定资源，所以，只需要将发送的报文设置一个 RD 标志位即可。<br>当发送垃圾查询时，例如 <code>www.baidu.com</code> 这类必然不存在的域名，必然会导致查询很慢。</p><h2 id="ECS"><a href="#ECS" class="headerlink" title="ECS"></a>ECS</h2><p>ECS（EDNS-Client-Subnet）是DNS服务支持的新协议。该协议会在DNS请求包中附加请求域名解析的用户IP地址。这样，DNS服务器就可以根据该地址返回用户更容易访问的服务器IP地址。该技术广泛应用于CDN应用中。Nmap的dns-client-subnet-scan脚本利用该协议，通过提交不同的IP地址，获取指定域名所有的IP地址。</p><h2 id="Non-authoritative-answer"><a href="#Non-authoritative-answer" class="headerlink" title="Non-authoritative answer"></a>Non-authoritative answer</h2><p>为加快 DNS 的查询速度，一般会在服务端缓存一段时间，所以有可能 DNS 会返回缓存在 Cache 中的内容，那么此时就会将 AA 响应设置为 0 ，也就是是这里显示的 Non-authoritative answer 。</p><h1 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h1><p>缓存的目的是将数据临时存储在一个位置，从而提高数据请求的性能和可靠性。DNS缓存涉及将数据存储在更靠近请求客户端的位置，以便可以更早地解析DNS查询，并且可以避免在DNS查找链中进一步查询，从而改善加载时间并减少带宽/ CPU消耗。DNS数据可以缓存在各种位置，每个位置将存储DNS记录一段时间，该时间由生存时间（TTL）决定。</p><h2 id="缓存存在的位置"><a href="#缓存存在的位置" class="headerlink" title="缓存存在的位置"></a>缓存存在的位置</h2><h3 id="浏览器DNS缓存"><a href="#浏览器DNS缓存" class="headerlink" title="浏览器DNS缓存"></a>浏览器DNS缓存</h3><p>默认情况下，现代Web浏览器设计为在一段时间内缓存DNS记录。这里的目的很明显; DNS缓存越接近Web浏览器，为了检查缓存并对IP地址发出正确的请求，必须采取的处理步骤越少。当请求DNS记录时，浏览器缓存是为请求的记录检查的第一个位置。</p><p>在chrome中，您可以转到chrome：// net-internals / #dns查看DNS缓存的状态。</p><h3 id="操作系统（OS）级DNS缓存"><a href="#操作系统（OS）级DNS缓存" class="headerlink" title="操作系统（OS）级DNS缓存"></a>操作系统（OS）级DNS缓存</h3><p>操作系统级DNS解析程序是DNS查询离开计算机之前的第二个也是最后一个本地停止。设计用于处理此查询的操作系统内部的进程通常称为“存根解析程序”或DNS客户端。当存根解析器从应用程序获取请求时，它首先检查自己的缓存以查看它是否具有该记录。如果没有，则它将本地网络外部的DNS查询（带有递归标志集）发送到Internet服务提供商（ISP）内的DNS递归解析器。</p><h3 id="递归解析器DNS缓存"><a href="#递归解析器DNS缓存" class="headerlink" title="递归解析器DNS缓存"></a>递归解析器DNS缓存</h3><p>当ISP内部的递归解析器收到DNS查询时，如同之前的所有步骤一样，它还将检查所请求的主机到IP地址转换是否已存储在其本地持久层内。</p><p>递归解析器还具有其他功能，具体取决于它在缓存中的记录类型：</p><p>如果解析程序没有A记录，但确实拥有权威名称服务器的NS记录，它将直接查询这些名称服务器，绕过DNS查询中的几个步骤。此快捷方式可防止从root和.com名称服务器（在我们的east263.com搜索中）中进行查找，并有助于更快地解析DNS查询。</p><p>如果解析器没有NS记录，它将向TLD服务器发送查询（在我们的例子中为.com），跳过根服务器。</p><p>万一解析器没有指向TLD服务器的记录，它将查询根服务器。此事件通常在清除DNS缓存后发生。</p><h1 id="3-Linux-上的域名相关命令"><a href="#3-Linux-上的域名相关命令" class="headerlink" title="3. Linux 上的域名相关命令"></a>3. Linux 上的域名相关命令</h1><p><strong>hostname</strong></p><blockquote><p>hostname 命令用于查看和设置系统的主机名称。环境变量 HOSTNAME 也保存了当前的主机名。在使用 hostname 命令设置主机名后，系统并不会永久保存新的主机名，重新启动机器之后还是原来的主机名。如果需要永久修改主机名，需要同时修改 /etc/hosts 和 /etc/sysconfig/network 的相关内容。<br> 示例：</p></blockquote>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">hostname<br>test123vm6<br></code></pre></td></tr></table></figure><p>  <strong>nslookup</strong><br> nslookup 命令是常用域名查询工具，就是查 DNS 信息用的命令。<br> 示例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>nslookup www.baidu.com<br><span class="hljs-symbol">Server:</span>     <span class="hljs-number">192.168</span>.<span class="hljs-number">16.24</span><br><span class="hljs-symbol">Address:</span>    <span class="hljs-number">192.168</span>.<span class="hljs-number">16.24</span><span class="hljs-comment">#53</span><br><br>Non-authoritative <span class="hljs-symbol">answer:</span><br>www.baidu.com   canonical name = www.a.shifen.com.<br><span class="hljs-symbol">Name:</span>   www.a.shifen.com<br><span class="hljs-symbol">Address:</span> <span class="hljs-number">14.215</span>.<span class="hljs-number">177.38</span><br><span class="hljs-symbol">Name:</span>   www.a.shifen.com<br><span class="hljs-symbol">Address:</span> <span class="hljs-number">14.215</span>.<span class="hljs-number">177.39</span><br></code></pre></td></tr></table></figure><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h1><p><a href="https://www.jianshu.com/p/915de89d070e">https://www.jianshu.com/p/915de89d070e</a><br><a href="https://jin-yang.github.io/post/network-dns-protocol-details-introduce.html">https://jin-yang.github.io/post/network-dns-protocol-details-introduce.html</a><br>DNS 协议 <a href="https://www.ietf.org/rfc/rfc1035.txt">RFC1035</a> 详细规定了 DNS 报文的格式，详见 <code>4. MESSAGES</code> 中的部分。</p>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>dns</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>suqid 存储模型研究</title>
    <link href="/2020/08/22/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/03%20squid/01%20suqid%20%E5%AD%98%E5%82%A8%E6%A8%A1%E5%9E%8B%E7%A0%94%E7%A9%B6/"/>
    <url>/2020/08/22/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/03%20squid/01%20suqid%20%E5%AD%98%E5%82%A8%E6%A8%A1%E5%9E%8B%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>squid 从3.5.0开始移除了之前的coss存储机制，改为支持aufs, diskd, rock, ufs四种存储机制。</p><p>至于为什么去掉coss机制有待后续调研确定。</p><p>当前先研究下已有的几种类型</p><h2 id="ufs-存储机制"><a href="#ufs-存储机制" class="headerlink" title="ufs 存储机制"></a>ufs 存储机制</h2><p>ufs是Squid存储格式中一直存储的著名的存储格式。UFS 即 Unix Filesystem 的缩写<br>使用方法：<br>    cache_dir ufs Directory-Name Mbytes L1 L2 [options]</p><p>Mbytes 是此目录下要使用的磁盘空间（MB）数量。 默认值为100 MB。 更改此设置以适合您的配置。 请勿在此处放置磁盘驱动器的大小。 相反，如果您希望Squid使用整个磁盘驱动器，请减去20％并使用该值。</p><p>L1 是将在”目录”下创建的第一级子目录的数量。 默认值为16。</p><p>L2 是将在每个第一级目录下创建的第二级子目录的数量。 默认值为256。</p><h2 id="aufs-存储机制"><a href="#aufs-存储机制" class="headerlink" title="aufs 存储机制"></a>aufs 存储机制</h2><p>aufs存储机制已经发展到超出了改进squid磁盘I/O响应时间的最初尝试。”a”代表着异步I/O。默认的ufs和aufs之间的唯一区别，在于I/O是否被squid主进程执行。数据格式都是一样的，所以你能在两者之间轻松选择，而不用丢失任何cache数据。</p><p>aufs使用大量线程进行磁盘I/O操作。每次squid需要读写，打开关闭，或删除cache文件时，I/O请求被分派到这些线程之一。当线程完成了I/O后，它给squid主进程发送信号，并且返回一个状态码。实际上在squid2.5中，某些文件操作默认不是异步执行的。最明显的，磁盘写总是同步执行。你可以修改src/fs/aufs/store_asyncufs.h文件，将ASYNC_WRITE设为1，并且重编译squid。</p><p>aufs代码需要pthreads库。这是POSIX定义的标准线程接口。尽管许多Unix系统支持pthreads库，但我经常遇到兼容性问题。aufs存储系统看起来仅仅在Linux和Solaris上运行良好。在其他操作系统上，尽管代码能编译，但也许会面临严重的问题。</p><p>为了使用aufs，可以在./configure时增加一个选项：</p><div class="code-wrapper"><pre><code class="hljs">% ./configure --enable-storeio=aufs,ufs</code></pre></div><p>严格讲，你不必在storeio模块列表中指定ufs。然而，假如你以后不喜欢aufs，那么就需要指定ufs，以便能重新使用稳定的ufs存储机制。</p><p>假如愿意，你也能使用—with-aio-threads=N选项。假如你忽略它，squid基于aufs cache_dir的数量，自动计算可使用的线程数量。表8-1显示了1-6个cache目录的默认线程数量。</p><h3 id="aufs如何工作-待研究确定4-12版机制"><a href="#aufs如何工作-待研究确定4-12版机制" class="headerlink" title="aufs如何工作 (待研究确定4.12版机制???)"></a>aufs如何工作 (待研究确定4.12版机制???)</h3><p>Squid通过调用pthread_create()来创建大量的线程。所有线程在任何磁盘活动之上创建。这样，即使squid空闲，你也能见到所有的线程。</p><p>无论何时，squid想执行某些磁盘I/O操作（例如打开文件读），它分配一对数据结构，并将I/O请求放进队列中。线程循环读取队列，取得I/O请求并执行它们。因为请求队列共享给所有线程，squid使用独享锁来保证仅仅一个线程能在给定时间内更新队列。</p><p>I/O操作阻塞线程直到它们被完成。然后，将操作状态放进一个完成队列里。作为完整的操作，squid主进程周期性的检查完成队列。请求磁盘I/O的模块被通知操作已完成，并获取结果。</p><p>你可能已猜想到，aufs在多CPU系统上优势更明显。唯一的锁操作发生在请求和结果队列。然而，所有其他的函数执行都是独立的。当主进程在一个CPU上执行时，其他的CPU处理实际的I/O系统调用。</p><h2 id="diskd-存储机制"><a href="#diskd-存储机制" class="headerlink" title="diskd 存储机制"></a>diskd 存储机制</h2><p>diskd（disk守护进程的短称）类似于aufs，磁盘I/O被外部进程来执行。不同于aufs的是，diskd不使用线程。代替的，它通过消息队列和共享内存来实现内部进程间通信。</p><p>消息队列是现代Unix操作系统的标准功能。许多年以前在AT&amp;T的Unix System V的版本1上实现了它们。进程间的队列消息以较少的字节传递：32-40字节。每个diskd进程使用一个队列来接受来自squid的请求，并使用另一个队列来传回请求。</p><h3 id="diskd如何工作-待研究确定4-12版机制"><a href="#diskd如何工作-待研究确定4-12版机制" class="headerlink" title="diskd如何工作 (待研究确定4.12版机制???)"></a>diskd如何工作 (待研究确定4.12版机制???)</h3><p>Squid对每个cache_dir创建一个diskd进程。这不同于aufs，aufs对所有的cache_dir使用一个大的线程池。对每个I/O操作，squid发送消息到相应的diskd进程。当该操作完成后，diskd进程返回一个状态消息给squid。squid和diskd进程维护队列里的消息的顺序。这样，不必担心I/O会无序执行。</p><p>对读和写操作，squid和diskd进程使用共享内存区域。两个进程能对同一内存区域进行读和写。例如，当squid产生读请求时，它告诉diskd进程在内存中何处放置数据。diskd将内存位置传递给read()系统调用，并且通过发送队列消息，通知squid该过程完成了。然后squid从共享内存区域访问最近的可读数据。</p><p>diskd与aufs本质上都支持squid的无阻塞磁盘I/O。当diskd进程在I/O操作上阻塞时，squid有空去处理其他任务。在diskd进程能跟上负载情况下，这点确实工作良好。因为squid主进程现在能够去做更多工作，当然它有可能会加大diskd的负载。diskd有两个功能来帮助解决这个问题。</p><p>首先，squid等待diskd进程捕获是否队列超出了某种极限。默认值是64个排队消息。假如diskd进程获取的数值远大于此，squid会休眠片刻，并等待diskd完成一些未决操作。这本质上让squid进入阻塞I/O模式。它也让更多的CPU时间对diskd进程可用。通过指定cache_dir行的Q2参数的值，你可以配置这个极限值：</p><p>cache_dir diskd /cache0 7000 16 256 Q2=50<br>第二，假如排队操作的数量抵达了另一个极限，squid会停止要求diskd进程打开文件。这里的默认值是72个消息。假如squid想打开一个磁盘文件读或写，但选中的cache_dir有太多的未完成操作，那么打开请求会失败。当打开文件读时，会导致cache丢失。当打开文件写时，会阻碍squid存储cache响应。这两种情况下用户仍能接受到有效响应。唯一实际的影响是squid的命中率下降。这个极限用Q1参数来配置：</p><p>cache_dir diskd /cache0 7000 16 256 Q1=60 Q2=50<br>注意在某些版本的squid中，Q1和Q2参数混杂在默认的配置文件里。最佳选择是，Q1应该大于Q2。</p><h2 id="rock-存储机制"><a href="#rock-存储机制" class="headerlink" title="rock 存储机制"></a>rock 存储机制</h2><p>rock 存储机制是数据库样式的存储。所有缓存的条目都使用固定大小的 slot 存储在“数据库”文件中。单个条目占用一个或多个slot。</p><p>如果可能的话，使用Rock Store的Squid会创建一个名为 “disker” 的专用子进程，以避免Squid 的worker阻塞磁盘I/O上。将为每个cache_dir创建一个disker进程。squid只有运行在daemon模式下且磁盘的I/O模式设置为 IpcIo 时才会创建disker。</p><p>参数 swap-timeout = msec<br>    如果Squid预估swap操作花费的时间超过指定的毫秒数，则开始停止向磁盘写未命中数据或从磁盘中读取命中数据。默认情况下，当设置为零时，禁用磁盘I / O时间限制实施。使用阻塞I/O模式时将被忽略，因为阻塞同步I/O不允许Squid预估swap操作消耗的时间。</p><p>参数 max-swap-rate = swaps / sec：<br>    使用指定的I/O速率限制来人为限制磁盘访问。交换将导致平均I/O速率超过限制的请求将延迟。各个请求的交换（例如，命中或读取）不会延迟，但是它们确实有助于测量交换率，并且由于它们与交换请求位于同一FIFO队列中，因此如果max-swap-rate较小，它们可能会等待更长的时间。这在缓冲 “太多” 写入然后在将这些写入提交到磁盘的同时开始阻止Squid和其他进程的文件系统上是必需的。通常与swap-timeout一起使用，以避免在磁盘需求超出可用磁盘“带宽”时出现过多的延迟和队列溢出。默认情况下，当设置为零时，禁用磁盘I / O速率限制实施。当前只有 IpcIo 模式支持。</p><p>参数 slot-size = bytes<br>    用于存储缓存的响应的数据库 “记录” 的大小。一个已经被缓存的请求内容至少占用一个slot，并且所有数据库I/O 均使用单独的 slot 完成，因此增加此参数会导致更多的磁盘空间浪费，而减少则导致更多的磁盘I/O开销。应该设置为操作系统I/O页面大小的倍数。默认为16KB。每个slot均存储一个header，较小尺寸的slot将被拒绝。header 小于100个字节。</p><h1 id="二、源码研究"><a href="#二、源码研究" class="headerlink" title="二、源码研究"></a>二、源码研究</h1><h2 id="代码理解关键点："><a href="#代码理解关键点：" class="headerlink" title="代码理解关键点："></a>代码理解关键点：</h2><p><em>SwapDir</em> 的定义是通过在src/store/forword.h 中的 typedef Store::Disk SwapDir 来定义的，实际上是Store命名空间中的Disk类</p><p>StoreController 的定义是通过在src/store/forword.h 中的 typedef Store::Controller StoreController来定义的，实际上是Store命名空间中的Controller 类</p><p>StoreHashIndex 的定义是通过在src/store/forword.h 中的 typedef Store::Disks StoreHashIndex;来定义的，实际是Store命名空间中的Disks 类</p><p>SwapDirPointer 的定义是通过在src/store/forword.h 中的 typedef RefCount&lt;Store::Disk&gt; SwapDirPointer来定义的，实际是Store命名空间中的Disks 类</p><p>UFSSwapLogParser  swap log解析器, 通过cc文件中继承实现了不同版本解析器来解析对应的swap log</p>]]></content>
    
    
    <categories>
      
      <category>高性能代理软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>squid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pstack 跟踪进程栈</title>
    <link href="/2020/08/20/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/03pstack%20%E8%B7%9F%E8%B8%AA%E8%BF%9B%E7%A8%8B%E6%A0%88/"/>
    <url>/2020/08/20/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/03pstack%20%E8%B7%9F%E8%B8%AA%E8%BF%9B%E7%A8%8B%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<p>此命令可显示每个进程的栈跟踪,且可显示每个线程的栈状态。pstack 命令必须由相应进程的属主或 root 运行。可以使用 pstack 来确定进程挂起的位置。此命令允许使用的唯一选项是要检查的进程的 PID。请参见 proc(1) 手册页。</p><p>这个命令在排查进程问题时非常有用，比如我们发现一个服务一直处于work状态（如假死状态，好似死循环），使用这个命令就能轻松定位问题所在；可以在一段时间内，多执行几次pstack，若发现代码栈总是停在同一个位置，那个位置就需要重点关注，很可能就是出问题的地方；</p><p>示例：查看bash程序进程栈:</p><figure class="highlight less"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[root@xxxxx ]</span># <span class="hljs-selector-tag">pstack</span> <span class="hljs-selector-tag">16185</span><br><span class="hljs-selector-tag">Thread</span> <span class="hljs-selector-tag">35</span> (Thread <span class="hljs-number">0</span>x7f098b51e700 (LWP <span class="hljs-number">16186</span>)):<br><span class="hljs-selector-id">#0</span>  <span class="hljs-selector-tag">0x00007f09931657fa</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">sigwaitinfo</span> () <span class="hljs-selector-tag">from</span> /<span class="hljs-selector-tag">usr</span>/<span class="hljs-selector-tag">lib64</span>/<span class="hljs-selector-tag">libc</span><span class="hljs-selector-class">.so</span><span class="hljs-selector-class">.6</span><br><span class="hljs-selector-id">#1</span>  <span class="hljs-selector-tag">0x0000000000f0f2db</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">timer_notify_thread_func</span> (arg=arg<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7ffc2e5b8af0) <span class="hljs-selector-tag">at</span> /<span class="hljs-selector-tag">export</span>/<span class="hljs-selector-tag">home2</span>/<span class="hljs-selector-tag">pb2</span>/<span class="hljs-selector-tag">build</span>/<span class="hljs-selector-tag">sb_1-32013917-1545390379</span><span class="hljs-selector-class">.14</span>/<span class="hljs-selector-tag">rpm</span>/<span class="hljs-selector-tag">BUILD</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">mysys</span>/<span class="hljs-selector-tag">posix_timers</span><span class="hljs-selector-class">.c</span>:<span class="hljs-selector-tag">77</span><br><span class="hljs-selector-id">#2</span>  <span class="hljs-selector-tag">0x000000000127fae4</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">pfs_spawn_thread</span> (arg=<span class="hljs-number">0</span>x2fb02b0) <span class="hljs-selector-tag">at</span> /<span class="hljs-selector-tag">export</span>/<span class="hljs-selector-tag">home2</span>/<span class="hljs-selector-tag">pb2</span>/<span class="hljs-selector-tag">build</span>/<span class="hljs-selector-tag">sb_1-32013917-1545390379</span><span class="hljs-selector-class">.14</span>/<span class="hljs-selector-tag">rpm</span>/<span class="hljs-selector-tag">BUILD</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">storage</span>/<span class="hljs-selector-tag">perfschema</span>/<span class="hljs-selector-tag">pfs</span><span class="hljs-selector-class">.cc</span>:<span class="hljs-selector-tag">2190</span><br><span class="hljs-selector-id">#3</span>  <span class="hljs-selector-tag">0x00007f0994767dc5</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">start_thread</span> () <span class="hljs-selector-tag">from</span> /<span class="hljs-selector-tag">usr</span>/<span class="hljs-selector-tag">lib64</span>/<span class="hljs-selector-tag">libpthread</span><span class="hljs-selector-class">.so</span><span class="hljs-selector-class">.0</span><br><span class="hljs-selector-id">#4</span>  <span class="hljs-selector-tag">0x00007f099322528d</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">clone</span> () <span class="hljs-selector-tag">from</span> /<span class="hljs-selector-tag">usr</span>/<span class="hljs-selector-tag">lib64</span>/<span class="hljs-selector-tag">libc</span><span class="hljs-selector-class">.so</span><span class="hljs-selector-class">.6</span><br><span class="hljs-selector-tag">Thread</span> <span class="hljs-selector-tag">34</span> (Thread <span class="hljs-number">0</span>x7f097d529700 (LWP <span class="hljs-number">16187</span>)):<br><span class="hljs-selector-id">#0</span>  <span class="hljs-selector-tag">0x00007f099455e644</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">__io_getevents_0_4</span> () <span class="hljs-selector-tag">from</span> /<span class="hljs-selector-tag">usr</span>/<span class="hljs-selector-tag">lib64</span>/<span class="hljs-selector-tag">libaio</span><span class="hljs-selector-class">.so</span><span class="hljs-selector-class">.1</span><br><span class="hljs-selector-id">#1</span>  <span class="hljs-selector-tag">0x0000000000fca3d1</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">LinuxAIOHandler</span>::<span class="hljs-selector-tag">collect</span> (this=this<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7f097d528de0) <span class="hljs-selector-tag">at</span> /<span class="hljs-selector-tag">export</span>/<span class="hljs-selector-tag">home2</span>/<span class="hljs-selector-tag">pb2</span>/<span class="hljs-selector-tag">build</span>/<span class="hljs-selector-tag">sb_1-32013917-1545390379</span><span class="hljs-selector-class">.14</span>/<span class="hljs-selector-tag">rpm</span>/<span class="hljs-selector-tag">BUILD</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">storage</span>/<span class="hljs-selector-tag">innobase</span>/<span class="hljs-selector-tag">os</span>/<span class="hljs-selector-tag">os0file</span><span class="hljs-selector-class">.cc</span>:<span class="hljs-selector-tag">2506</span><br><span class="hljs-selector-id">#2</span>  <span class="hljs-selector-tag">0x0000000000fcadfd</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">LinuxAIOHandler</span>::<span class="hljs-selector-tag">poll</span> (this=this<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7f097d528de0, m1=m1<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7f097d528e80, m2=m2<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7f097d528e88, request=request<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7f097d528e90) <span class="hljs-selector-tag">at</span> /<span class="hljs-selector-tag">export</span>/<span class="hljs-selector-tag">home2</span>/<span class="hljs-selector-tag">pb2</span>/<span class="hljs-selector-tag">build</span>/<span class="hljs-selector-tag">sb_1-32013917-1545390379</span><span class="hljs-selector-class">.14</span>/<span class="hljs-selector-tag">rpm</span>/<span class="hljs-selector-tag">BUILD</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">storage</span>/<span class="hljs-selector-tag">innobase</span>/<span class="hljs-selector-tag">os</span>/<span class="hljs-selector-tag">os0file</span><span class="hljs-selector-class">.cc</span>:<span class="hljs-selector-tag">2652</span><br><span class="hljs-selector-id">#3</span>  <span class="hljs-selector-tag">0x0000000000fcd436</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">os_aio_linux_handler</span> (request=<span class="hljs-number">0</span>x7f097d528e90, m2=<span class="hljs-number">0</span>x7f097d528e88, m1=<span class="hljs-number">0</span>x7f097d528e80, global_segment=<span class="hljs-number">0</span>) <span class="hljs-selector-tag">at</span> /<span class="hljs-selector-tag">export</span>/<span class="hljs-selector-tag">home2</span>/<span class="hljs-selector-tag">pb2</span>/<span class="hljs-selector-tag">build</span>/<span class="hljs-selector-tag">sb_1-32013917-1545390379</span><span class="hljs-selector-class">.14</span>/<span class="hljs-selector-tag">rpm</span>/<span class="hljs-selector-tag">BUILD</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">storage</span>/<span class="hljs-selector-tag">innobase</span>/<span class="hljs-selector-tag">os</span>/<span class="hljs-selector-tag">os0file</span><span class="hljs-selector-class">.cc</span>:<span class="hljs-selector-tag">2708</span><br><span class="hljs-selector-id">#4</span>  <span class="hljs-selector-tag">os_aio_handler</span> (segment=segment<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>, m1=m1<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7f097d528e80, m2=m2<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7f097d528e88, request=request<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>x7f097d528e90) <span class="hljs-selector-tag">at</span> /<span class="hljs-selector-tag">export</span>/<span class="hljs-selector-tag">home2</span>/<span class="hljs-selector-tag">pb2</span>/<span class="hljs-selector-tag">build</span>/<span class="hljs-selector-tag">sb_1-32013917-1545390379</span><span class="hljs-selector-class">.14</span>/<span class="hljs-selector-tag">rpm</span>/<span class="hljs-selector-tag">BUILD</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">storage</span>/<span class="hljs-selector-tag">innobase</span>/<span class="hljs-selector-tag">os</span>/<span class="hljs-selector-tag">os0file</span><span class="hljs-selector-class">.cc</span>:<span class="hljs-selector-tag">6254</span><br><span class="hljs-selector-id">#5</span>  <span class="hljs-selector-tag">0x0000000001197d5f</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">fil_aio_wait</span> (segment=segment<span class="hljs-variable">@entry</span>=<span class="hljs-number">0</span>) <span class="hljs-selector-tag">at</span> /<span class="hljs-selector-tag">export</span>/<span class="hljs-selector-tag">home2</span>/<span class="hljs-selector-tag">pb2</span>/<span class="hljs-selector-tag">build</span>/<span class="hljs-selector-tag">sb_1-32013917-1545390379</span><span class="hljs-selector-class">.14</span>/<span class="hljs-selector-tag">rpm</span>/<span class="hljs-selector-tag">BUILD</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">storage</span>/<span class="hljs-selector-tag">innobase</span>/<span class="hljs-selector-tag">fil</span>/<span class="hljs-selector-tag">fil0fil</span><span class="hljs-selector-class">.cc</span>:<span class="hljs-selector-tag">5854</span><br><span class="hljs-selector-id">#6</span>  <span class="hljs-selector-tag">0x0000000001080458</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">io_handler_thread</span> (arg=&lt;optimized out&gt;) <span class="hljs-selector-tag">at</span> /<span class="hljs-selector-tag">export</span>/<span class="hljs-selector-tag">home2</span>/<span class="hljs-selector-tag">pb2</span>/<span class="hljs-selector-tag">build</span>/<span class="hljs-selector-tag">sb_1-32013917-1545390379</span><span class="hljs-selector-class">.14</span>/<span class="hljs-selector-tag">rpm</span>/<span class="hljs-selector-tag">BUILD</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">mysql-5</span><span class="hljs-selector-class">.7</span><span class="hljs-selector-class">.25</span>/<span class="hljs-selector-tag">storage</span>/<span class="hljs-selector-tag">innobase</span>/<span class="hljs-selector-tag">srv</span>/<span class="hljs-selector-tag">srv0start</span><span class="hljs-selector-class">.cc</span>:<span class="hljs-selector-tag">311</span><br><span class="hljs-selector-id">#7</span>  <span class="hljs-selector-tag">0x00007f0994767dc5</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">start_thread</span> () <span class="hljs-selector-tag">from</span> /<span class="hljs-selector-tag">usr</span>/<span class="hljs-selector-tag">lib64</span>/<span class="hljs-selector-tag">libpthread</span><span class="hljs-selector-class">.so</span><span class="hljs-selector-class">.0</span><br><span class="hljs-selector-id">#8</span>  <span class="hljs-selector-tag">0x00007f099322528d</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">clone</span> () <span class="hljs-selector-tag">from</span> /<span class="hljs-selector-tag">usr</span>/<span class="hljs-selector-tag">lib64</span>/<span class="hljs-selector-tag">libc</span><span class="hljs-selector-class">.so</span><span class="hljs-selector-class">.6</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>strace 跟踪进程中的系统调用</title>
    <link href="/2020/08/20/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/06strace%20%E8%B7%9F%E8%B8%AA%E8%BF%9B%E7%A8%8B%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    <url>/2020/08/20/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/06strace%20%E8%B7%9F%E8%B8%AA%E8%BF%9B%E7%A8%8B%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>strace常用来跟踪进程执行时的系统调用和所接收的信号。 在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间。</p><h1 id="1-输出参数含义"><a href="#1-输出参数含义" class="headerlink" title="1. 输出参数含义"></a>1. 输出参数含义</h1><p>每一行都是一条系统调用，等号左边是系统调用的函数名及其参数，右边是该调用的返回值。 strace 显示这些调用的参数并返回符号形式的值。strace 从内核接收信息，而且不需要以任何特殊的方式来构建内核。</p><figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$strace</span> cat /dev/null<br><span class="hljs-function"><span class="hljs-title">execve</span><span class="hljs-params">(<span class="hljs-string">&quot;/bin/cat&quot;</span>, [<span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;/dev/null&quot;</span>], [/* <span class="hljs-number">22</span> vars */])</span></span> = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-title">brk</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>                                  = <span class="hljs-number">0</span>xab1000<br><span class="hljs-function"><span class="hljs-title">access</span><span class="hljs-params">(<span class="hljs-string">&quot;/etc/ld.so.nohwcap&quot;</span>, F_OK)</span></span>      = -<span class="hljs-number">1</span> ENOENT (No such file or directory)<br><span class="hljs-function"><span class="hljs-title">mmap</span><span class="hljs-params">(NULL, <span class="hljs-number">8192</span>, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span> = <span class="hljs-number">0</span>x7f29379a7000<br><span class="hljs-function"><span class="hljs-title">access</span><span class="hljs-params">(<span class="hljs-string">&quot;/etc/ld.so.preload&quot;</span>, R_OK)</span></span>      = -<span class="hljs-number">1</span> ENOENT (No such file or directory)<br>...<br></code></pre></td></tr></table></figure><h1 id="2-参数"><a href="#2-参数" class="headerlink" title="2. 参数"></a>2. 参数</h1><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs mercury">-c 统计每一系统调用的所执行的时间,次数和出错的次数等.<br>-d 输出strace关于标准错误的调试信息.<br>-f 跟踪由fork调用所产生的子进程.<br>-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号.<br>-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪.<br>-h 输出简要的帮助信息.<br>-i 输出系统调用的入口指针.<br>-q 禁止输出关于脱离的消息.<br>-r 打印出相对时间关于,,每一个系统调用.<br>-t 在输出中的每一行前加上时间信息.<br>-tt 在输出中的每一行前加上时间信息,微秒级.<br>-ttt 微秒级输出,以秒了表示时间.<br>-T 显示每一调用所耗的时间.<br>-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出.<br>-V 输出strace的版本信息.<br>-x 以十六进制形式输出非标准字符串<br>-xx 所有字符串以十六进制形式输出.<br>-a column<br>设置返回值的输出位置.默认 为<span class="hljs-number">40</span>.<br>-e expr<br>指定一个表达式,用来控制如何跟踪.格式如下:<br>[qualifier<span class="hljs-built_in">=</span>][!]value1[,value2]...<br>qualifier只能是 <span class="hljs-keyword">trace</span>,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 <span class="hljs-keyword">trace</span>.感叹号是否定符号.例如:<br>-eopen等价于 -e <span class="hljs-keyword">trace</span><span class="hljs-built_in">=</span>open,表示只跟踪open调用.而-etrace!<span class="hljs-built_in">=</span>open表示跟踪除了open以外的其他调用.有两个特殊的符号 <span class="hljs-built_in">all</span> 和 none.<br>注意有些shell使用!来执行历史记录里的命令,所以要使用\\.<br>-e <span class="hljs-keyword">trace</span><span class="hljs-built_in">=</span>set<br>只跟踪指定的系统 调用.例如:-e <span class="hljs-keyword">trace</span><span class="hljs-built_in">=</span>open,close,rean,write表示只跟踪这四个系统调用.默认的为set<span class="hljs-built_in">=</span><span class="hljs-built_in">all</span>.<br>-e <span class="hljs-keyword">trace</span><span class="hljs-built_in">=</span>file<br>只跟踪有关文件操作的系统调用.<br>-e <span class="hljs-keyword">trace</span><span class="hljs-built_in">=</span>process<br>只跟踪有关进程控制的系统调用.<br>-e <span class="hljs-keyword">trace</span><span class="hljs-built_in">=</span>network<br>跟踪与网络有关的所有系统调用.<br>-e strace<span class="hljs-built_in">=</span>signal<br>跟踪所有与系统信号有关的 系统调用<br>-e <span class="hljs-keyword">trace</span><span class="hljs-built_in">=</span>ipc<br>跟踪所有与进程通讯有关的系统调用<br>-e abbrev<span class="hljs-built_in">=</span>set<br>设定 strace输出的系统调用的结果集.-v 等与 abbrev<span class="hljs-built_in">=</span>none.默认为abbrev<span class="hljs-built_in">=</span><span class="hljs-built_in">all</span>.<br>-e raw<span class="hljs-built_in">=</span>set<br>将指 定的系统调用的参数以十六进制显示.<br>-e signal<span class="hljs-built_in">=</span>set<br>指定跟踪的系统信号.默认为<span class="hljs-built_in">all</span>.如 signal<span class="hljs-built_in">=</span>!SIGIO(或者signal<span class="hljs-built_in">=</span>!io),表示不跟踪SIGIO信号.<br>-e read<span class="hljs-built_in">=</span>set<br>输出从指定文件中读出 的数据.例如:<br>-e read<span class="hljs-built_in">=</span><span class="hljs-number">3</span>,<span class="hljs-number">5</span><br>-e write<span class="hljs-built_in">=</span>set<br>输出写入到指定文件中的数据.<br>-o filename<br>将strace的输出写入文件filename<br>-p pid<br>跟踪指定的进程pid.<br>-s strsize<br>指定输出的字符串的最大长度.默认为<span class="hljs-number">32</span>.文件名一直全部输出.<br>-u username<br>以username 的UID和GID执行被跟踪的命令<br></code></pre></td></tr></table></figure><h1 id="3-命令实例"><a href="#3-命令实例" class="headerlink" title="3. 命令实例"></a>3. 命令实例</h1><h2 id="3-1-跟踪可执行程序"><a href="#3-1-跟踪可执行程序" class="headerlink" title="3.1 跟踪可执行程序"></a>3.1 跟踪可执行程序</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">strace <span class="hljs-operator">-f</span> <span class="hljs-operator">-F</span> <span class="hljs-literal">-o</span> ~/straceout.txt myserver<br></code></pre></td></tr></table></figure><p>-f -F选项告诉strace同时跟踪fork和vfork出来的进程，-o选项把所有strace输出写到~/straceout.txt里 面，myserver是要启动和调试的程序。</p><h2 id="3-2-跟踪服务程序"><a href="#3-2-跟踪服务程序" class="headerlink" title="3.2 跟踪服务程序"></a>3.2 跟踪服务程序</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">strace</span> -o output.txt -T -tt -e trace=<span class="hljs-literal">all</span> -p <span class="hljs-number">28979</span><br></code></pre></td></tr></table></figure><p>跟踪28979进程的所有系统调用（-e trace=all），并统计系统调用的花费时间，以及开始时间（并以可视化的时分秒格式显示），最后将记录结果存在output.txt文件里面。</p>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lsof 一切皆文件</title>
    <link href="/2020/08/20/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/04lsof%20%E4%B8%80%E5%88%87%E7%9A%86%E6%96%87%E4%BB%B6/"/>
    <url>/2020/08/20/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/04lsof%20%E4%B8%80%E5%88%87%E7%9A%86%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>lsof（list open files）是一个查看当前系统文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，该文件描述符提供了大量关于这个应用程序本身的信息。</p><p>lsof打开的文件可以是：</p><ol><li>普通文件</li><li>目录</li><li>网络文件系统的文件</li><li>字符或设备文件</li><li>(函数)共享库</li><li>管道，命名管道</li><li>符号链接</li><li>网络文件（例如：NFS file、网络socket，unix域名socket）</li><li>还有其它类型的文件，等等</li></ol><h1 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h1><ul><li>-a 列出打开文件存在的进程</li><li>-c&lt;进程名&gt; 列出指定进程所打开的文件</li><li>-g 列出GID号进程详情</li><li>-d&lt;文件号&gt; 列出占用该文件号的进程</li><li>+d&lt;目录&gt; 列出目录下被打开的文件</li><li>+D&lt;目录&gt; 递归列出目录下被打开的文件</li><li>-n&lt;目录&gt; 列出使用NFS的文件</li><li>-i&lt;条件&gt; 列出符合条件的进程。（4、6、协议、:端口、 @ip ）</li><li>-p&lt;进程号&gt; 列出指定进程号所打开的文件</li><li>-u 列出UID号进程详情</li><li>-h 显示帮助信息</li><li>-v 显示版本信息</li></ul><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><h2 id="1：无任何参数"><a href="#1：无任何参数" class="headerlink" title="1：无任何参数"></a>1：无任何参数</h2><figure class="highlight tap"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs tap">$lsof| more<br>COMMAND     PID      USER   FD      TYPE             DEVICE SIZE/OFF       NODE NAME<br>init         <span class="hljs-number"> 1 </span>     root  cwd       DIR              253,0    <span class="hljs-number"> 4096 </span>        <span class="hljs-number"> 2 </span>/<br>init         <span class="hljs-number"> 1 </span>     root  rtd       DIR              253,0    <span class="hljs-number"> 4096 </span>        <span class="hljs-number"> 2 </span>/<br>init         <span class="hljs-number"> 1 </span>     root  txt       REG              253,0  <span class="hljs-number"> 150352 </span>  <span class="hljs-number"> 1310795 </span>/sbin/init<br></code></pre></td></tr></table></figure><p>说明：</p><p>lsof输出各列信息的意义如下：</p><ul><li>COMMAND：进程的名称</li><li>PID：进程标识符</li><li>PPID：父进程标识符（需要指定-R参数）</li><li>USER：进程所有者</li><li>PGID：进程所属组</li><li>FD：文件描述符，应用程序通过文件描述符识别该文件。如cwd、txt等::<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">（<span class="hljs-number">1</span>）cwd：表示<span class="hljs-keyword">current</span> <span class="hljs-keyword">work</span> dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改<br>   （<span class="hljs-number">2</span>）txt ：该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 /sbin/init 程序<br>   （<span class="hljs-number">3</span>）lnn：library <span class="hljs-keyword">references</span> (AIX);<br>   （<span class="hljs-number">4</span>）er：FD information error (see <span class="hljs-type">NAME</span> <span class="hljs-keyword">column</span>);<br>   （<span class="hljs-number">5</span>）jld：jail directory (FreeBSD);<br>   （<span class="hljs-number">6</span>）ltx：shared library text (code <span class="hljs-keyword">and</span> data);<br>   （<span class="hljs-number">7</span>）mxx ：hex memory-mapped <span class="hljs-keyword">type</span> number xx.<br>   （<span class="hljs-number">8</span>）m86：DOS Merge mapped file;<br>   （<span class="hljs-number">9</span>）mem：memory-mapped file;<br>   （<span class="hljs-number">10</span>）mmap：memory-mapped device;<br>   （<span class="hljs-number">11</span>）pd：parent directory;<br>   （<span class="hljs-number">12</span>）rtd：root directory;<br>   （<span class="hljs-number">13</span>）tr：kernel trace file (OpenBSD);<br>   （<span class="hljs-number">14</span>）v86  VP/ix mapped file;<br>   （<span class="hljs-number">15</span>）<span class="hljs-number">0</span>：表示标准输入<br>   （<span class="hljs-number">16</span>）<span class="hljs-number">1</span>：表示标准输出<br>   （<span class="hljs-number">17</span>）<span class="hljs-number">2</span>：表示标准错误<br>   一般在标准输出、标准错误、标准输入后还跟着文件状态模式：r、w、u等<br>   （<span class="hljs-number">1</span>）u：表示该文件被打开并处于读取/写入模式<br>   （<span class="hljs-number">2</span>）r：表示该文件被打开并处于只读模式<br>   （<span class="hljs-number">3</span>）w：表示该文件被打开并处于<br>   （<span class="hljs-number">4</span>）空格：表示该文件的状态模式为unknow，且没有锁定<br>   （<span class="hljs-number">5</span>）-：表示该文件的状态模式为unknow，且被锁定<br>   同时在文件状态模式后面，还跟着相关的锁<br>   （<span class="hljs-number">1</span>）N：<span class="hljs-keyword">for</span> a Solaris NFS <span class="hljs-keyword">lock</span> <span class="hljs-keyword">of</span> <span class="hljs-type">unknown</span> <span class="hljs-keyword">type</span>;<br>   （<span class="hljs-number">2</span>）r：<span class="hljs-keyword">for</span> <span class="hljs-keyword">read</span> <span class="hljs-keyword">lock</span> <span class="hljs-keyword">on</span> part <span class="hljs-keyword">of</span> the file;<br>   （<span class="hljs-number">3</span>）R：<span class="hljs-keyword">for</span> a <span class="hljs-keyword">read</span> <span class="hljs-keyword">lock</span> <span class="hljs-keyword">on</span> the entire file;<br>   （<span class="hljs-number">4</span>）w：<span class="hljs-keyword">for</span> a <span class="hljs-keyword">write</span> <span class="hljs-keyword">lock</span> <span class="hljs-keyword">on</span> part <span class="hljs-keyword">of</span> the file;（文件的部分写锁）<br>   （<span class="hljs-number">5</span>）W：<span class="hljs-keyword">for</span> a <span class="hljs-keyword">write</span> <span class="hljs-keyword">lock</span> <span class="hljs-keyword">on</span> the entire file;（整个文件的写锁）<br>   （<span class="hljs-number">6</span>）u：<span class="hljs-keyword">for</span> a <span class="hljs-keyword">read</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">write</span> <span class="hljs-keyword">lock</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">any</span> length;<br>   （<span class="hljs-number">7</span>）U：<span class="hljs-keyword">for</span> a <span class="hljs-keyword">lock</span> <span class="hljs-keyword">of</span> <span class="hljs-type">unknown</span> <span class="hljs-keyword">type</span>;<br>   （<span class="hljs-number">8</span>）x：<span class="hljs-keyword">for</span> an SCO OpenServer Xenix <span class="hljs-keyword">lock</span> <span class="hljs-keyword">on</span> part      <span class="hljs-keyword">of</span> the file;<br>   （<span class="hljs-number">9</span>）X：<span class="hljs-keyword">for</span> an SCO OpenServer Xenix <span class="hljs-keyword">lock</span> <span class="hljs-keyword">on</span> the      entire file;<br>   （<span class="hljs-number">10</span>）space：<span class="hljs-keyword">if</span> there <span class="hljs-keyword">is</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">lock</span>.<br></code></pre></td></tr></table></figure></li><li>TYPE：文件类型，如DIR、REG等，常见的文件类型::<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less">（<span class="hljs-selector-tag">1</span>）<span class="hljs-selector-tag">DIR</span>：表示目录<br>（<span class="hljs-selector-tag">2</span>）<span class="hljs-selector-tag">CHR</span>：表示字符类型<br>（<span class="hljs-selector-tag">3</span>）<span class="hljs-selector-tag">BLK</span>：块设备类型<br>（<span class="hljs-selector-tag">4</span>）<span class="hljs-selector-tag">UNIX</span>： <span class="hljs-selector-tag">UNIX</span> 域套接字<br>（<span class="hljs-selector-tag">5</span>）<span class="hljs-selector-tag">FIFO</span>：先进先出 (FIFO) 队列<br>（<span class="hljs-selector-tag">6</span>）<span class="hljs-selector-tag">IPv4</span>：网际协议 (IP) 套接字<br></code></pre></td></tr></table></figure></li><li>DEVICE：指定磁盘的名称</li><li>SIZE：文件的大小</li><li>NODE：索引节点（文件在磁盘上的标识）</li><li>NAME：打开文件的确切名称</li></ul><h2 id="2：查找某个文件相关的进程"><a href="#2：查找某个文件相关的进程" class="headerlink" title="2：查找某个文件相关的进程"></a>2：查找某个文件相关的进程</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$lsof</span> <span class="hljs-regexp">/bin/</span>bash<br>COMMAND     PID USER  FD   TYPE DEVICE SIZE/OFF    NODE NAME<br>mysqld_sa  <span class="hljs-number">2169</span> root txt    REG  <span class="hljs-number">253</span>,<span class="hljs-number">0</span>   <span class="hljs-number">938736</span> <span class="hljs-number">4587562</span> <span class="hljs-regexp">/bin/</span>bash<br>ksmtuned   <span class="hljs-number">2334</span> root txt    REG  <span class="hljs-number">253</span>,<span class="hljs-number">0</span>   <span class="hljs-number">938736</span> <span class="hljs-number">4587562</span> <span class="hljs-regexp">/bin/</span>bash<br>bash      <span class="hljs-number">20121</span> root txt    REG  <span class="hljs-number">253</span>,<span class="hljs-number">0</span>   <span class="hljs-number">938736</span> <span class="hljs-number">4587562</span> <span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><h2 id="3：列出某个用户打开的文件信息"><a href="#3：列出某个用户打开的文件信息" class="headerlink" title="3：列出某个用户打开的文件信息"></a>3：列出某个用户打开的文件信息</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$lsof</span> -u username</span><br></code></pre></td></tr></table></figure><p> -u 选项，u是user的缩写</p><h2 id="4：列出某个程序进程所打开的文件信息"><a href="#4：列出某个程序进程所打开的文件信息" class="headerlink" title="4：列出某个程序进程所打开的文件信息"></a>4：列出某个程序进程所打开的文件信息</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$lsof</span> -c mysql</span><br></code></pre></td></tr></table></figure><p>-c 选项将会列出所有以mysql这个进程开头的程序的文件，其实你也可以写成 lsof | grep mysql, 但是第一种方法明显比第二种方法要少打几个字符；</p><h2 id="5：列出某个用户以及某个进程所打开的文件信息"><a href="#5：列出某个用户以及某个进程所打开的文件信息" class="headerlink" title="5：列出某个用户以及某个进程所打开的文件信息"></a>5：列出某个用户以及某个进程所打开的文件信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$lsof</span>  -u <span class="hljs-built_in">test</span> -c mysql<br></code></pre></td></tr></table></figure><h2 id="6：通过某个进程号显示该进程打开的文件"><a href="#6：通过某个进程号显示该进程打开的文件" class="headerlink" title="6：通过某个进程号显示该进程打开的文件"></a>6：通过某个进程号显示该进程打开的文件</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$lsof</span> -p 11968</span><br></code></pre></td></tr></table></figure><h2 id="7：列出所有的网络连接"><a href="#7：列出所有的网络连接" class="headerlink" title="7：列出所有的网络连接"></a>7：列出所有的网络连接</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$lsof</span> -i</span><br></code></pre></td></tr></table></figure><h2 id="8：列出所有tcp-网络连接信息"><a href="#8：列出所有tcp-网络连接信息" class="headerlink" title="8：列出所有tcp 网络连接信息"></a>8：列出所有tcp 网络连接信息</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$lsof -i tcp<br><br>$lsof -n -i tcp<br>COMMAND     PID  <span class="hljs-keyword">USER</span>   <span class="hljs-title">FD</span>   <span class="hljs-keyword">TYPE</span>  DEVICE SIZE/OFF <span class="hljs-keyword">NODE</span> <span class="hljs-title">NAME</span><br>svnserve  <span class="hljs-number">11552</span> weber    <span class="hljs-number">3</span>u  IPv4 <span class="hljs-number">3799399</span>      <span class="hljs-number">0</span>t0  TCP *:svn (LISTEN)<br>redis-ser <span class="hljs-number">25501</span> weber    <span class="hljs-number">4</span>u  IPv4  <span class="hljs-number">113150</span>      <span class="hljs-number">0</span>t0  TCP <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6379</span> (LISTEN)<br></code></pre></td></tr></table></figure><h2 id="9：列出谁在使用某个端口"><a href="#9：列出谁在使用某个端口" class="headerlink" title="9：列出谁在使用某个端口"></a>9：列出谁在使用某个端口</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$lsof</span> -i :3306</span><br></code></pre></td></tr></table></figure><h2 id="10：列出某个用户的所有活跃的网络端口"><a href="#10：列出某个用户的所有活跃的网络端口" class="headerlink" title="10：列出某个用户的所有活跃的网络端口"></a>10：列出某个用户的所有活跃的网络端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$lsof</span> -a -u <span class="hljs-built_in">test</span> -i<br></code></pre></td></tr></table></figure><h2 id="11：根据文件描述列出对应的文件信息"><a href="#11：根据文件描述列出对应的文件信息" class="headerlink" title="11：根据文件描述列出对应的文件信息"></a>11：根据文件描述列出对应的文件信息</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$lsof</span> -d description(like 2)</span><br></code></pre></td></tr></table></figure><p>示例::</p><div class="code-wrapper"><pre><code class="hljs">$lsof -d 3 | grep PARSER1tail      6499 tde    3r   REG    253,3   4514722     417798 /opt/applog/open/log/HOSTPARSER1_ERROR_141217.log.001</code></pre></div><p>说明：<br>0表示标准输入，1表示标准输出，2表示标准错误，从而可知：所以大多数应用程序所打开的文件的 FD 都是从 3 开始</p><h2 id="12：列出被进程号为1234的进程所打开的所有IPV4-network-files"><a href="#12：列出被进程号为1234的进程所打开的所有IPV4-network-files" class="headerlink" title="12：列出被进程号为1234的进程所打开的所有IPV4 network files"></a>12：列出被进程号为1234的进程所打开的所有IPV4 network files</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$lsof</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-number">4</span> -<span class="hljs-selector-tag">a</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><h2 id="13：列出目前连接主机nf5260i5-td上端口为：20，21，80相关的所有文件信息，且每隔3秒重复执行"><a href="#13：列出目前连接主机nf5260i5-td上端口为：20，21，80相关的所有文件信息，且每隔3秒重复执行" class="headerlink" title="13：列出目前连接主机nf5260i5-td上端口为：20，21，80相关的所有文件信息，且每隔3秒重复执行"></a>13：列出目前连接主机nf5260i5-td上端口为：20，21，80相关的所有文件信息，且每隔3秒重复执行</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">lsof</span> -i @nf<span class="hljs-number">5260</span>i<span class="hljs-number">5</span>-td:<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">80</span> -r <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>00 objdump 二进制文件分析</title>
    <link href="/2020/08/20/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/06%E5%BC%80%E5%8F%91%E5%88%86%E6%9E%90/00objdump%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    <url>/2020/08/20/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/06%E5%BC%80%E5%8F%91%E5%88%86%E6%9E%90/00objdump%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>objdump工具用来显示二进制文件的信息，就是以一种可阅读的格式让你更多地了解二进制文件可能带有的附加信息。</p><h1 id="1-常用参数说明"><a href="#1-常用参数说明" class="headerlink" title="1. 常用参数说明"></a>1. 常用参数说明</h1><p>-f 显示文件头信息<br>-D 反汇编所有section (-d反汇编特定section)<br>-h 显示目标文件各个section的头部摘要信息<br>-x 显示所有可用的头信息，包括符号表、重定位入口。-x 等价于 -a -f -h -r -t 同时指定。<br>-i 显示对于 -b 或者 -m 选项可用的架构和目标格式列表。<br>-r 显示文件的重定位入口。如果和-d或者-D一起使用，重定位部分以反汇编后的格式显示出来。<br>-R 显示文件的动态重定位入口，仅仅对于动态目标文件有意义，比如某些共享库。<br>-S 尽可能反汇编出源代码，尤其当编译的时候指定了-g这种调试参数时，效果比较明显。隐含了-d参数。<br>-t 显示文件的符号表入口。类似于nm -s提供的信息</p><h1 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h1><h2 id="2-1-查看本机目标结构（使用大端还是小端存储）"><a href="#2-1-查看本机目标结构（使用大端还是小端存储）" class="headerlink" title="2.1 查看本机目标结构（使用大端还是小端存储）:"></a>2.1 查看本机目标结构（使用大端还是小端存储）:</h2><figure class="highlight gams"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$objdump</span> -i</span><br></code></pre></td></tr></table></figure><h2 id="2-2-反汇编程序"><a href="#2-2-反汇编程序" class="headerlink" title="2.2 反汇编程序:"></a>2.2 反汇编程序:</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$objdump</span> -d main.o</span><br></code></pre></td></tr></table></figure><h2 id="2-3-显示符号表入口"><a href="#2-3-显示符号表入口" class="headerlink" title="2.3 显示符号表入口:"></a>2.3 显示符号表入口:</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$objdump</span>  -t main.o</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>tools,linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(转载)C++ 内存分配(new，operator new)详解</title>
    <link href="/2020/08/16/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/00C++%20%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D(new%EF%BC%8Coperator%20new)%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/08/16/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/00C++%20%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D(new%EF%BC%8Coperator%20new)%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>本文转载自《<a href="https://blog.csdn.net/WUDAIJUN/article/details/9273339%E3%80%8B">https://blog.csdn.net/WUDAIJUN/article/details/9273339》</a></p><p>本文主要讲述C++ new关键字和operator new, placement new之间的种种关联，new的底层实现，以及operator new的重载和一些在内存池，STL中的应用。</p><h1 id="一-new-operator-和-operator-new"><a href="#一-new-operator-和-operator-new" class="headerlink" title="一. new operator 和 operator new"></a>一. new operator 和 operator new</h1><p>new operator：指我们在C++里通常用到的关键字，比如A* a = new A;<br>operator new：它是一个操作符，并且可被重载(类似加减乘除的操作符重载)<br>关于这两者的关系，我找到一段比较经典的描述（来自于<a href="http://www.cplusplus.com/">www.cplusplus.com</a> 见参考文献：</p><p><code> operator new can be called explicitly as a regular function, but in C++, new is an operator with a very specific behavior: An expression with the new operator, first calls function operator new (i.e., this function) with the size of its type specifier as first argument, and if this is successful, it then automatically initializes or constructs the object (if needed). Finally, the expression evaluates as a pointer to the appropriate type.</code></p><p>比如我们写如下代码：</p><figure class="highlight dns"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs dns"><span class="hljs-keyword">A</span>* a = new <span class="hljs-keyword">A</span>；<br></code></pre></td></tr></table></figure><p>我们知道这里分为三步：1.分配内存，2.调用A()构造对象，3. 返回分配指针。事实上，分配内存这一操作就是由operator new(size_t)来完成的，如果类A重载了operator new，那么将调用A::operator new(size_t )，否则调用全局::operator new(size_t )，后者由C++默认提供。因此前面的步骤也就是：</p><p>调用operator new (sizeof(A))<br>调用A:A()<br>返回指针<br>这里再一次提出来是因为后面关于这两步会有一些变形，在关于placement new那里会讲到。先举个简单例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>     <span class="hljs-built_in">A</span>()&#123;<br>          std::cout&lt;&lt;<span class="hljs-string">&quot;call A constructor&quot;</span>&lt;&lt;std::endl;<br>     &#125;<br> <br>     ~<span class="hljs-built_in">A</span>()&#123;<br>          std::cout&lt;&lt;<span class="hljs-string">&quot;call A destructor&quot;</span>&lt;&lt;std::endl;<br>     &#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> _tmain(<span class="hljs-keyword">int</span> argc, _TCHAR* argv[])<br>&#123;<br> <br>     A* a = <span class="hljs-keyword">new</span> A;<br>     <span class="hljs-keyword">delete</span> a;<br> <br>     <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面我们跟踪一下A反汇编代码，由于Debug版本反汇编跳转太多，因此此处通过Release版本在A* a = new A;处设断点反汇编：<br>在Release版本中，构造函数和析构函数都是直接展开的。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">A* a = new A<span class="hljs-comment">;</span><br><span class="hljs-number">01301022</span>  <span class="hljs-keyword">push</span>        <span class="hljs-number">1</span>    <span class="hljs-comment">;不含数据成员的类占用一字节空间，此处压入sizeof(A)</span><br><span class="hljs-number">01301024</span>  <span class="hljs-keyword">call</span>        operator new (<span class="hljs-number">13013C2h</span>) <span class="hljs-comment">;调用operator new(size_t size)</span><br><span class="hljs-number">01301029</span>  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">esi</span>,<span class="hljs-built_in">eax</span> <span class="hljs-comment">;返回值保存到esi</span><br>0130102B  <span class="hljs-keyword">add</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">4</span> <span class="hljs-comment">;平衡栈</span><br>0130102E  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">esp</span>+<span class="hljs-number">8</span>],<span class="hljs-built_in">esi</span> <span class="hljs-comment">;</span><br><span class="hljs-number">01301032</span>  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">esp</span>+<span class="hljs-number">14h</span>],<span class="hljs-number">0</span> <br>0130103A  <span class="hljs-keyword">test</span>        <span class="hljs-built_in">esi</span>,<span class="hljs-built_in">esi</span> <span class="hljs-comment">;在operator new之后，检查其返回值，如果为空(分配失败)，则不调用A()构造函数</span><br>0130103C  <span class="hljs-keyword">je</span>          wmain+<span class="hljs-number">62h</span> (<span class="hljs-number">1301062h</span>) <span class="hljs-comment">;为空 跳过构造函数部分</span><br>0130103E  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [__imp_std::endl (<span class="hljs-number">1302038h</span>)] <span class="hljs-comment">;构造函数内部，输出字符串</span><br><span class="hljs-number">01301043</span>  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [__imp_std::cout (<span class="hljs-number">1302050h</span>)] <br><span class="hljs-number">01301049</span>  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">eax</span>  <br>0130104A  <span class="hljs-keyword">push</span>        offset string <span class="hljs-string">&quot;call A constructor&quot;</span> (<span class="hljs-number">1302134h</span>) <br>0130104F  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">ecx</span>  <br><span class="hljs-number">01301050</span>  <span class="hljs-keyword">call</span>        <span class="hljs-keyword">std</span>::operator&lt;&lt;&lt;<span class="hljs-keyword">std</span>::char_traits&lt;char&gt; &gt; (<span class="hljs-number">13011F0h</span>) <br><span class="hljs-number">01301055</span>  <span class="hljs-keyword">add</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">8</span> <br><span class="hljs-number">01301058</span>  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">eax</span> <br>0130105A  <span class="hljs-keyword">call</span>        <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [__imp_std::basic_ostream&lt;char,<span class="hljs-keyword">std</span>::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (<span class="hljs-number">1302040h</span>)] <br><span class="hljs-number">01301060</span>  <span class="hljs-keyword">jmp</span>         wmain+<span class="hljs-number">64h</span> (<span class="hljs-number">1301064h</span>) <span class="hljs-comment">;构造完成，跳过下一句</span><br><span class="hljs-number">01301062</span>  <span class="hljs-keyword">xor</span>         <span class="hljs-built_in">esi</span>,<span class="hljs-built_in">esi</span> <span class="hljs-comment">;将esi置空，这里的esi即为new A的返回值</span><br><span class="hljs-number">01301064</span>  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">esp</span>+<span class="hljs-number">14h</span>],<span class="hljs-number">0FFFFFFFFh</span> <br>    delete a<span class="hljs-comment">;</span><br>0130106C  <span class="hljs-keyword">test</span>        <span class="hljs-built_in">esi</span>,<span class="hljs-built_in">esi</span> <span class="hljs-comment">;检查a是否为空</span><br>0130106E  <span class="hljs-keyword">je</span>          wmain+<span class="hljs-number">9Bh</span> (<span class="hljs-number">130109Bh</span>) <span class="hljs-comment">;如果为空，跳过析构函数和operator delete</span><br><span class="hljs-number">01301070</span>  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [__imp_std::endl (<span class="hljs-number">1302038h</span>)] <span class="hljs-comment">;析构函数 输出字符串</span><br><span class="hljs-number">01301076</span>  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [__imp_std::cout (<span class="hljs-number">1302050h</span>)] <br>0130107B  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">edx</span>  <br>0130107C  <span class="hljs-keyword">push</span>        offset string <span class="hljs-string">&quot;call A destructor&quot;</span> (<span class="hljs-number">1302148h</span>) <br><span class="hljs-number">01301081</span>  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">eax</span>  <br><span class="hljs-number">01301082</span>  <span class="hljs-keyword">call</span>        <span class="hljs-keyword">std</span>::operator&lt;&lt;&lt;<span class="hljs-keyword">std</span>::char_traits&lt;char&gt; &gt; (<span class="hljs-number">13011F0h</span>) <br><span class="hljs-number">01301087</span>  <span class="hljs-keyword">add</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">8</span> <br>0130108A  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">eax</span> <br>0130108C  <span class="hljs-keyword">call</span>        <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [__imp_std::basic_ostream&lt;char,<span class="hljs-keyword">std</span>::char_traits&lt;char&gt; &gt;::operator&lt;&lt; (<span class="hljs-number">1302040h</span>)] <br><span class="hljs-number">01301092</span>  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">esi</span>  <span class="hljs-comment">;压入a </span><br><span class="hljs-number">01301093</span>  <span class="hljs-keyword">call</span>        operator delete (<span class="hljs-number">13013BCh</span>) <span class="hljs-comment">;调用operator delete </span><br><span class="hljs-number">01301098</span>  <span class="hljs-keyword">add</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">4</span> <br></code></pre></td></tr></table></figure><p>通过反汇编可以确认A* = new A的三个步骤，delete a类似<br>，包含了~A()和operator delete(a)两个步骤。</p><h1 id="二-operator-new的三种形式"><a href="#二-operator-new的三种形式" class="headerlink" title="二. operator new的三种形式"></a>二. operator new的三种形式</h1><p>operator new有三种形式：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">throwing</span> (<span class="hljs-number">1</span>)    <br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span> <span class="hljs-params">(std::<span class="hljs-keyword">size_t</span> size)</span> <span class="hljs-title">throw</span> <span class="hljs-params">(std::bad_alloc)</span></span>;<br><span class="hljs-built_in">nothrow</span> (<span class="hljs-number">2</span>) <br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span> <span class="hljs-params">(std::<span class="hljs-keyword">size_t</span> size, <span class="hljs-keyword">const</span> std::<span class="hljs-keyword">nothrow_t</span>&amp; nothrow_value)</span> <span class="hljs-title">throw</span><span class="hljs-params">()</span></span>;<br><span class="hljs-built_in">placement</span> (<span class="hljs-number">3</span>)   <br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span> <span class="hljs-params">(std::<span class="hljs-keyword">size_t</span> size, <span class="hljs-keyword">void</span>* ptr)</span> <span class="hljs-title">throw</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>(1)(2)的区别仅是是否抛出异常，当分配失败时，前者会抛出bad_alloc异常，后者返回null，不会抛出异常。它们都分配一个固定大小的连续内存。</p><p>A* a = new A; //调用throwing(1)<br>A* a = new(std::nothrow) A; //调用nothrow(2)<br>(3)是<code>placement new</code>，它也是对<code>operator new</code>的一个重载，定义于#include <new>中，它多接收一个ptr参数，但它只是简单地返回ptr。其在new.h下的源代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __PLACEMENT_NEW_INLINE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __PLACEMENT_NEW_INLINE</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> *__cdecl <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-keyword">size_t</span>, <span class="hljs-keyword">void</span> *_P)</span></span><br><span class="hljs-function">        </span>&#123;<span class="hljs-keyword">return</span> (_P); &#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span>     _MSC_VER &gt;= 1200</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> __cdecl <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *, <span class="hljs-keyword">void</span> *)</span></span><br><span class="hljs-function">    </span>&#123;<span class="hljs-keyword">return</span>; &#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>那么它究竟有什么用呢？事实上，它可以实现在ptr所指地址上构建一个对象(通过调用其构造函数)，这在内存池技术上有广泛应用。<br>它的调用形式为：</p><p>new(p) A(); //也可用A(5)等有参构造函数<br>placement new本身只是返回指针p，new(p) A()调用placement new之后，还会在p上调用A:A()，这里的p可以是动态分配的内存，也可以是栈中缓冲，如char buf[100]; new(buf) A(); </p><p>我们仍然可以通过一个例子来验证：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">A</span>() &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;call A constructor&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br> <br>    ~<span class="hljs-built_in">A</span>() &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;call A destructor&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">int</span> _tmain(<span class="hljs-keyword">int</span> argc, _TCHAR* argv[]) &#123;<br> <br>    A* p = (A*)::<span class="hljs-keyword">operator</span> <span class="hljs-built_in"><span class="hljs-keyword">new</span></span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(A)); <span class="hljs-comment">//分配</span><br>    <span class="hljs-keyword">new</span>(p) <span class="hljs-built_in">A</span>(); <span class="hljs-comment">//构造</span><br>    p-&gt;~<span class="hljs-built_in">A</span>();   <span class="hljs-comment">//析构</span><br>    ::<span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(p)</span></span>; <span class="hljs-comment">//释放</span><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码将对象的分配，构造，析构和释放分离开来，这也是new和delete关键字两句就能完成的操作。<br>先直接运行可以看到程序输出：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi">call A <span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">call</span> <span class="hljs-title">A</span> <span class="hljs-title">destructor</span></span><br></code></pre></td></tr></table></figure><p>再分别注释掉new(a) A();和a-&gt;~A();两句，可以看到对应的构造和析构函数将不会被调用。</p><p>然后查看反汇编：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">//平台: Visual Studio <span class="hljs-number">2008</span> Debug版<br>    A* a = (A*)::operator new(sizeof(A))<span class="hljs-comment">; //分配</span><br>00F9151D  <span class="hljs-keyword">push</span>        <span class="hljs-number">1</span>    <br>00F9151F  <span class="hljs-keyword">call</span>        operator new (<span class="hljs-number">0F91208h</span>) <span class="hljs-comment">;调用::operator new(size_t size)也就是throwing(1)版本</span><br>00F91524  <span class="hljs-keyword">add</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">4</span> <br>00F91527  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">14h</span>],<span class="hljs-built_in">eax</span> <span class="hljs-comment">;返回地址放入[ebp-14h] 即为p</span><br> <br>    new(a) A()<span class="hljs-comment">; //构造</span><br>00F9152A  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">14h</span>] <br>00F9152D  <span class="hljs-keyword">push</span>        <span class="hljs-built_in">eax</span>  <br>00F9152E  <span class="hljs-keyword">push</span>        <span class="hljs-number">1</span>    <span class="hljs-comment">;压入p</span><br>00F91530  <span class="hljs-keyword">call</span>        operator new (<span class="hljs-number">0F91280h</span>)<span class="hljs-comment">;调用operator new(size_t, void* p)即placement(3)版本 只是简单返回p</span><br>00F91535  <span class="hljs-keyword">add</span>         <span class="hljs-built_in">esp</span>,<span class="hljs-number">8</span> <br>00F91538  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0E0h</span>],<span class="hljs-built_in">eax</span> <span class="hljs-comment">;将p放入[ebp-0E0h]</span><br>00F9153E  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">4</span>],<span class="hljs-number">0</span> <br>00F91545  <span class="hljs-keyword">cmp</span>         <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0E0h</span>],<span class="hljs-number">0</span>   <span class="hljs-comment">;判断p是否为空</span><br>00F9154C  <span class="hljs-keyword">je</span>          wmain+<span class="hljs-number">81h</span> (<span class="hljs-number">0F91561h</span>)     <span class="hljs-comment">;如果为空 跳过构造函数</span><br>00F9154E  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0E0h</span>] <span class="hljs-comment">;取出p到ecx</span><br>00F91554  <span class="hljs-keyword">call</span>        A::A (<span class="hljs-number">0F91285h</span>)          <span class="hljs-comment">;调用构造函数 根据_thiscall调用约定 this指针通过ecx寄存器传递</span><br>00F91559  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0F4h</span>],<span class="hljs-built_in">eax</span> <span class="hljs-comment">;将返回值(this指针)放入[ebp-0F4h]中</span><br>00F9155F  <span class="hljs-keyword">jmp</span>         wmain+<span class="hljs-number">8Bh</span> (<span class="hljs-number">0F9156Bh</span>)     <span class="hljs-comment">;跳过下一句</span><br>00F91561  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0F4h</span>],<span class="hljs-number">0</span>   <span class="hljs-comment">;将[ebp-0F4h]置空 当前面判断p为空时执行此语句</span><br>00F9156B  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0F4h</span>] <span class="hljs-comment">;[ebp-0F4h]为最终构造完成后的this指针(或者为空) 放入ecx</span><br>00F91571  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0ECh</span>],<span class="hljs-built_in">ecx</span> <span class="hljs-comment">;又将this放入[ebp-0ECh] 这些都是调试所用</span><br>00F91577  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">4</span>],<span class="hljs-number">0FFFFFFFFh</span> <br> <br>    a-&gt;~A()<span class="hljs-comment">;   //析构</span><br>00F9157E  <span class="hljs-keyword">push</span>        <span class="hljs-number">0</span>    <br>00F91580  <span class="hljs-keyword">mov</span>         <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">14h</span>] <span class="hljs-comment">;从[ebp-14h]中取出p</span><br>00F91583  <span class="hljs-keyword">call</span>        A::<span class="hljs-string">`scalar deleting destructor&#x27; (0F91041h) ;调用析构函数(跟踪进去比较复杂 如果在Release下，构造析构函数都是直接展开的)</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    ::operator delete(a); //释放</span><br><span class="hljs-string">00F91588  mov         eax,dword ptr [ebp-14h]   ;将p放入eax</span><br><span class="hljs-string">00F9158B  push        eax           ;压入p</span><br><span class="hljs-string">00F9158C  call        operator delete (0F910B9h);调用operator delete(void* )</span><br><span class="hljs-string">00F91591  add         esp,4</span><br></code></pre></td></tr></table></figure><p>从反汇编中可以看出，其实operator new调用了两次，只不过每一次调用不同的重载函数，并且placement new的主要作用只是将p放入ecx，并且调用其构造函数。<br>事实上，在指定地址上构造对象还有另一种方法，即手动调用构造函数：p-&gt;A::A(); 这里要加上A::作用域，用p-&gt;A::A();替换掉new(p) A();仍然能达到同样的效果，反汇编：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs delphi">    A* a = (A*)::<span class="hljs-keyword">operator</span> new(sizeof(A)); <span class="hljs-comment">//分配</span><br><span class="hljs-number">010614</span>FE  push        <span class="hljs-number">1</span>    <br><span class="hljs-number">01061500</span>  call        <span class="hljs-keyword">operator</span> new (<span class="hljs-number">1061208</span>h) <br><span class="hljs-number">01061505</span>  add         esp,<span class="hljs-number">4</span> <br><span class="hljs-number">01061508</span>  mov         dword ptr [a],eax <br>    <span class="hljs-comment">//new(a) A();   //构造</span><br>    a-&gt;A::A();<br><span class="hljs-number">0106150</span>B  mov         ecx,dword ptr [a] <br><span class="hljs-number">0106150</span>E  call        <span class="hljs-keyword">operator</span> new (<span class="hljs-number">1061285</span>h) <br> <br>    a-&gt;~A();   <span class="hljs-comment">//析构</span><br><span class="hljs-number">01061513</span>  push        <span class="hljs-number">0</span>    <br><span class="hljs-number">01061515</span>  mov         ecx,dword ptr [a] <br><span class="hljs-number">01061518</span>  call        A::`scalar deleting <span class="hljs-function"><span class="hljs-keyword">destructor</span>&#x27; <span class="hljs-params">(1061041h)</span> </span><br><span class="hljs-function"> </span><br><span class="hljs-function">    :</span>:<span class="hljs-keyword">operator</span> delete(a); <span class="hljs-comment">//释放</span><br><span class="hljs-number">0106151</span>D  mov         eax,dword ptr [a] <br><span class="hljs-number">01061520</span>  push        eax  <br><span class="hljs-number">01061521</span>  call        <span class="hljs-keyword">operator</span> delete (<span class="hljs-number">10610</span>B9h) <br><span class="hljs-number">01061526</span>  add         esp,<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>比之前的方法更加简洁高效(不需要调用placement new)。不知道手动调用构造函数是否有违C++标准或有什么隐晦，我在其他很多有名的内存池(包括SGI STL alloc)实现上看到都是用的placement new，而不是手动调用构造函数。</p><h1 id="三-operator-new重载"><a href="#三-operator-new重载" class="headerlink" title="三. operator new重载"></a>三. operator new重载</h1><p>前面简单提到过A* p = new A;所发生的事情：先调用operator new，如果类A重载了operator new，那么就使用该重载版本，否则使用全局版本::operatro new(size_t size)。</p><p>上面提到的throwing(1)和nothrow(2)的operator new是可以被重载的，比如：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">A</span>() &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;call A constructor&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br> <br>    ~<span class="hljs-built_in">A</span>() &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;call A destructor&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-keyword">size_t</span> size)</span> </span>&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;call A::operator new&quot;</span>&lt;&lt;std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">malloc</span>(size);<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-keyword">size_t</span> size, <span class="hljs-keyword">const</span> std::<span class="hljs-keyword">nothrow_t</span>&amp; nothrow_value)</span> </span>&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;call A::operator new nothrow&quot;</span>&lt;&lt;std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">malloc</span>(size);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">int</span> _tmain(<span class="hljs-keyword">int</span> argc, _TCHAR* argv[]) &#123;<br>    A* p1 = <span class="hljs-keyword">new</span> A;<br>    <span class="hljs-keyword">delete</span> p1;<br> <br>    A* p2 = <span class="hljs-built_in"><span class="hljs-keyword">new</span></span>(std::nothrow) A;<br>    <span class="hljs-keyword">delete</span> p2;<br> <br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">call A::<span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span><br>call A <span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">call</span> <span class="hljs-title">A</span> <span class="hljs-title">destructor</span></span><br><span class="hljs-function"><span class="hljs-title">call</span> <span class="hljs-title">A</span>:</span>:<span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span> nothrow<br>call A <span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">call</span> <span class="hljs-title">A</span> <span class="hljs-title">destructor</span></span><br></code></pre></td></tr></table></figure><p>如果类A中没有对operator new的重载，那么new A和new(std::nothrow) A; 都将会使用全局operator new(size_t size)。可将A中两个operator new注释掉，并且在A外添加一个全局operator new重载：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">void</span>* ::<span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-keyword">size_t</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;call global operator new&quot;</span>&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">malloc</span>(size);<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">call <span class="hljs-keyword">global</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span><br>call A <span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">call</span> <span class="hljs-title">A</span> <span class="hljs-title">destructor</span></span><br><span class="hljs-function"><span class="hljs-title">call</span> <span class="hljs-title">global</span> <span class="hljs-title">operator</span> <span class="hljs-title">new</span></span><br><span class="hljs-function"><span class="hljs-title">call</span> <span class="hljs-title">A</span> <span class="hljs-title">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">call</span> <span class="hljs-title">A</span> <span class="hljs-title">destructor</span></span><br></code></pre></td></tr></table></figure><p>注意，这里的重载遵循作用域覆盖原则，即在里向外寻找operator new的重载时，只要找到operator new()函数就不再向外查找，如果参数符合则通过，如果参数不符合则报错，而不管全局是否还有相匹配的函数原型。比如如果这里只将A中operator new(size_t, const std::nothrow_t&amp;)删除掉，就会报错：</p><p>error C2660: “A::operator new”: 函数不接受 2 个参数。<br>对operator new的重载还可以添加自定义参数，如在类A中添加</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-keyword">size_t</span> size, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> z)</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;X=&quot;</span>&lt;&lt;x&lt;&lt;<span class="hljs-string">&quot;  Y=&quot;</span>&lt;&lt;y&lt;&lt;<span class="hljs-string">&quot; Z=&quot;</span>&lt;&lt;z&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">malloc</span>(size);<br>&#125;<br></code></pre></td></tr></table></figure><p>这种重载看起来没有什么大作用，因为它operator new需要完成的任务只是分配内存，但是通过对这类重载的巧妙应用，可以让它在动态分配内存调试和检测中大展身手。这将在后面operator new重载运用技巧中展现。</p><p>至于placement new，它本身就是operator new的一个重载，不需也尽量不要对它进行改写，因为它一般是搭配 new(p) A(); 工作的，它的职责只需简单返回指针。</p><h1 id="四-operator-new运用技巧和一些实例探索"><a href="#四-operator-new运用技巧和一些实例探索" class="headerlink" title="四. operator new运用技巧和一些实例探索"></a>四. operator new运用技巧和一些实例探索</h1><h2 id="4-1-operator-new重载运用于调试："><a href="#4-1-operator-new重载运用于调试：" class="headerlink" title="4.1. operator new重载运用于调试："></a>4.1. operator new重载运用于调试：</h2><p>前面提到如何operator new的重载是可以有自定义参数的，那么我们如何利用自定义参数获取更多的信息呢，这里一个很有用的做法就是给operator new添加两个参数:char* file, int line,这两个参数记录new关键字的位置，然后再在new时将文件名和行号传入，这样我们就能在分配内存失败时给出提示：输出文件名和行号。</p><p>那么如何获取当前语句所在文件名和行号呢，windows提供两个宏：__FILE__和__LINE__。利用它们可以直接获取到文件名和行号，也就是 new(<strong>FILE</strong>, <strong>LINE</strong>) 由于这些都是不变的，因此可以再定义一个宏：#define new new(<strong>FILE</strong>, <strong>LINE</strong>)。这样我们就只需要定义这个宏，然后重载operator new即可。</p><p>源代码如下，这里只是简单输出new的文件名和行号。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//A.h</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">A</span>() &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;call A constructor&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br> <br>    ~<span class="hljs-built_in">A</span>() &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;call A destructor&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-keyword">size_t</span> size, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* file, <span class="hljs-keyword">int</span> line)</span> </span>&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;call A::operator new on file:&quot;</span>&lt;&lt;file&lt;&lt;<span class="hljs-string">&quot;  line:&quot;</span>&lt;&lt;line&lt;&lt;std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">malloc</span>(size);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br> <br>&#125;;<br><span class="hljs-comment">//Test.cpp</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;A.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> new new(__FILE__, __LINE__)</span><br> <br><span class="hljs-keyword">int</span> _tmain(<span class="hljs-keyword">int</span> argc, _TCHAR* argv[]) &#123;<br>    A* p1 = <span class="hljs-keyword">new</span> A;<br>    <span class="hljs-keyword">delete</span> p1;<br> <br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi">call A::<span class="hljs-keyword">operator</span> new <span class="hljs-keyword">on</span> <span class="hljs-keyword">file</span>:d:\desktop\test\test.cpp line:<span class="hljs-number">8</span><br>call A <span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">call</span> <span class="hljs-title">A</span> <span class="hljs-title">destructor</span></span><br></code></pre></td></tr></table></figure><p>注意：需要将类的声明实现与new的使用隔离开来。并且将类头文件放在宏定义之前。否则在类A中的operator new重载中的new会被宏替换，整个函数就变成了：void* operator new(<strong>FILE</strong>, <strong>LINE</strong>)(size_t size, char* file, int line)，编译器自然会报错。</p><h2 id="4-2-内存池优化"><a href="#4-2-内存池优化" class="headerlink" title="4.2. 内存池优化"></a>4.2. 内存池优化</h2><p>operator new的另一个大用处就是内存池优化，内存池的一个常见策略就是分配一次性分配一块大的内存作为内存池(buffer或pool)，然后重复利用该内存块，每次分配都从内存池中取出，释放则将内存块放回内存池。在我们客户端调用的是new关键字，我们可以改写operator new函数，让它从内存池中取出(当内存池不够时，再从系统堆中一次性分配一块大的)，至于构造和析构则在取出的内存上进行，然后再重载operator delete，它将内存块放回内存池。关于内存池和operator new在参考文献中有一篇很好的文章。这里就不累述了。</p><h2 id="4-3-STL中的new"><a href="#4-3-STL中的new" class="headerlink" title="4.3. STL中的new"></a>4.3. STL中的new</h2><p>在SGI STL源码中,defalloc.h和stl_construct.h中提供了最简单的空间配置器(allocator)封装，见《STL源码剖析》P48。它将对象的空间分配和构造分离开来，虽然在defalloc.h中仅仅是对::operator new和::operator delete的一层封装，但是它仍然给STL容器提供了更加灵活的接口。SGI STL真正使用的并不是defalloc.h中的分配器，而是stl_alloc.h中的SGI精心打造的”双层级配置器”，它将内存池技术演绎得淋漓尽致，值得细细琢磨。顺便提一下，在stl_alloc.h中并没有使用::operator new/delete 而直接使用malloc和free。具体缘由均可参见《STL源码剖析》。</p><h1 id="五-delete的使用"><a href="#五-delete的使用" class="headerlink" title="五. delete的使用"></a>五. delete的使用</h1><p>delete的使用基本和new一致，包括operator delete的重载方式这些都相似，只不过它的参数是void*，返回值为void。但是有一点需要注意，operator delete的自定义参数重载并不能手动调用。比如</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-keyword">size_t</span> size, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot; x = &quot;</span>&lt;&lt;x&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">malloc</span>(size);    <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* p, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot; x = &quot;</span>&lt;&lt;x&lt;&lt;endl;<br>    <span class="hljs-built_in">free</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><p>如下调用是无法通过的：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">A* p = new(<span class="hljs-number">3</span>) A;<span class="hljs-regexp">//</span>ok<br><span class="hljs-keyword">delete</span>(<span class="hljs-number">3</span>) p;<span class="hljs-regexp">//</span>error C2541: “<span class="hljs-keyword">delete</span>”: 不能删除不是指针的对象<br></code></pre></td></tr></table></figure><p>那么重载operator delete有什么作用？如何调用？事实上以上自定义参数operator delete 只在一种情况下被调用：当new关键字抛出异常时。</p><p>可以这样理解，只有在new关键字中，编译器才知道你调用的operator new形式，然后它会调用对应的operator delete。一旦出了new关键字，编译器对于这块内存是如何分配的一无所知，因此它只会调用默认的operator delete，而至于为什么不能主动调用自定义delete(而只能老老实实delete p)，这个就不知道了。</p><p>细心观察的话，上面operator new用于调试的例子代码中，由于我们没有给出operator new对应的operator delete。在VS2008下会有如下警告：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">warning</span> C4291: “<span class="hljs-keyword">void</span> *A::operator <span class="hljs-keyword">new</span>(size_t,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *,<span class="hljs-keyword">int</span>)”: 未找到匹配的删除运算符；如果初始化引发异常，则不会释放内存<br></code></pre></td></tr></table></figure><h1 id="六-关于new和内存分配的其他"><a href="#六-关于new和内存分配的其他" class="headerlink" title="六. 关于new和内存分配的其他"></a>六. 关于new和内存分配的其他</h1><ol><li><p>set_new_handler<br>还有一些零散的东西没有介绍到，比如set_new_handler可以在malloc(需要调用set_new_mode(1))或operator new内存分配失败时指定一个入口函数new_handler，这个函数完成自定义处理(继续尝试分配，抛出异常，或终止程序)，如果new_handler返回，那么系统将继续尝试分配内存，如果失败，将继续重复调用它，直到内存分配完毕或new_handler不再返回(抛出异常，终止)。下面这段程序完成这个测试：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;new.h&gt;</span><span class="hljs-comment">// 使用_set_new_mode和set_new_handler</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">nomem_handler</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;call nomem_handler&quot;</span>&lt;&lt;std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    _set_new_mode(<span class="hljs-number">1</span>);  <span class="hljs-comment">//使new_handler有效</span><br>    <span class="hljs-built_in">set_new_handler</span>(nomem_handler);<span class="hljs-comment">//指定入口函数 函数原型void f();</span><br>    std::cout&lt;&lt;<span class="hljs-string">&quot;try to alloc 2GB memory....&quot;</span>&lt;&lt;std::endl;<br>    <span class="hljs-keyword">char</span>* a = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">2</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>);<br>    <span class="hljs-keyword">if</span>(a)<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;ok...I got it&quot;</span>&lt;&lt;std::endl;<br>    <span class="hljs-built_in">free</span>(a);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>程序运行后会一直输出call nomem_handler 因为函数里面只是简单输出，返回，系统尝试分配失败后，调用nomem_handler函数，由于该函数并没有起到实际作用(让可分配内存增大)，因此返回后系统再次尝试分配失败，再调用nomem_handler，循环下去。<br>在SGI STL中的也有个仿new_handler函数:oom_malloc</p></li><li><p>new分配数组<br>new[]和new类似，仍然会优先调用类中重载的operator new[]。另外还要注意的是，在operator new[](size_t size)中传入的并不是sizeof(A)*3。而要在对象数组的大小上加上一个额外数据，用于编译器区分对象数组指针和对象指针以及对象数组大小。在VS2008(32 bit)下这个额外数据占4个字节，一个int大小。测试代码如下</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//A.h</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">A</span>() &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;call A constructor&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br> <br>    ~<span class="hljs-built_in">A</span>() &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;call A destructor&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br> <br>    <span class="hljs-keyword">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[](<span class="hljs-keyword">size_t</span> size) &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;call A::operator new[] size:&quot;</span>&lt;&lt;size&lt;&lt;std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">malloc</span>(size);<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">delete</span>[](<span class="hljs-keyword">void</span>* p) &#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;call A::operator delete[]&quot;</span>&lt;&lt;std::endl;<br>        <span class="hljs-built_in">free</span>(p);<br>    &#125; <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* p)</span> </span>&#123;<br>        <span class="hljs-built_in">free</span>(p);<br>    &#125; <br>&#125;;<br><span class="hljs-comment">//Test.cpp</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;A.h&quot;</span></span><br> <br><span class="hljs-keyword">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[](<span class="hljs-keyword">size_t</span> size) &#123;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;call global new[] size: &quot;</span>&lt;&lt;size&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">malloc</span>(size);<br>&#125;<br> <br><span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">delete</span>[](<span class="hljs-keyword">void</span>* p) &#123;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;call global delete[] &quot;</span>&lt;&lt;std::endl;<br>&#125;<br><br><span class="hljs-keyword">int</span> _tmain(<span class="hljs-keyword">int</span> argc, _TCHAR* argv[]) &#123;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;sizeof A &quot;</span>&lt;&lt;<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(A)&lt;&lt;std::endl;<br>    A* p1 = <span class="hljs-keyword">new</span> A[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">delete</span> []p1;<br> <br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">sizeof A <span class="hljs-number">1</span><br>call <span class="hljs-keyword">global</span> <span class="hljs-keyword">new</span>[] size: <span class="hljs-number">7</span><br>call A <span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">call</span> <span class="hljs-title">A</span> <span class="hljs-title">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">call</span> <span class="hljs-title">A</span> <span class="hljs-title">constructor</span></span><br><span class="hljs-function"><span class="hljs-title">call</span> <span class="hljs-title">A</span> <span class="hljs-title">destructor</span></span><br><span class="hljs-function"><span class="hljs-title">call</span> <span class="hljs-title">A</span> <span class="hljs-title">destructor</span></span><br><span class="hljs-function"><span class="hljs-title">call</span> <span class="hljs-title">A</span> <span class="hljs-title">destructor</span></span><br><span class="hljs-function"><span class="hljs-title">call</span> <span class="hljs-title">A</span>:</span>:<span class="hljs-keyword">operator</span> delete[]<br></code></pre></td></tr></table></figure><p>简单跟踪了一下，operator new[]返回的是0x005b668 而最后new关键字返回给p的是0x005b66c。也就是说p就是数组的起始地址，这样程序看到的内存就是线性的，不包括前面的额外数据。</p></li></ol><p>在内存中，可以看到前面的四个字节额外数据是0x00000003 也就是3，代表数组元素个数。后面三个cd是堆在Debug中的默认值(中文的cdcd就是”屯”，栈的初始值为cc，0xcccc中文”烫”)。再后面的0xfdfdfdfd应该是堆块的结束标志，前面我有博客专门跟踪过。</p><p>注：其实在malloc源码中也有内存池的运用，而且也比较复杂。最近在参考dlmalloc版本和STL空间适配器，真没有想到一个内存分配能涉及这么多的东西。</p><h1 id="七-参考文献"><a href="#七-参考文献" class="headerlink" title="七. 参考文献:"></a>七. 参考文献:</h1><ol><li><a href="http://www.cplusplus.com/reference/new/operator%20new/?kw=operator%25">http://www.cplusplus.com/reference/new/operator%20new/?kw=operator%</a> operator new的三种形式 </li><li><a href="http://www.relisoft.com/book/tech/9new.html">http://www.relisoft.com/book/tech/9new.html</a> c++ operator new重载和内存池技术 </li><li>《STL源码剖析》 空间配置器 </li><li><a href="http://blog.csdn.net/songthin/article/details/1703966">http://blog.csdn.net/songthin/article/details/1703966</a> 一篇关于理解C++ New的好文 </li><li><a href="http://blog.csdn.net/solstice/article/details/6198937">http://blog.csdn.net/solstice/article/details/6198937</a> 陈硕的Blog</li></ol>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>00 squid 内存池研究</title>
    <link href="/2020/08/16/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/03%20squid/00%20squid%20%E5%86%85%E5%AD%98%E6%B1%A0%E7%A0%94%E7%A9%B6/"/>
    <url>/2020/08/16/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/03%20squid/00%20squid%20%E5%86%85%E5%AD%98%E6%B1%A0%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文的squid原理及代码基于squid 4.12版的源码，主要阐述及分析了squid的内存池原理及响应的代码实现。<br>squid的内存池有两种模式，一种是poolmalloc模式，另外一种是poolchunked模式</p><h1 id="2-原理分析"><a href="#2-原理分析" class="headerlink" title="2. 原理分析"></a>2. 原理分析</h1><p>从总体上来看，squid的内存池是通过按照不同大小的固定尺寸内存链来处理的。应用向内存池申请内存时，先找到应用需要的内存对应的内存链，再从内存链中获取一个可用的固定尺寸的内存块即可。</p><img src="/2020/08/16/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/03%20squid/00%20squid%20%E5%86%85%E5%AD%98%E6%B1%A0%E7%A0%94%E7%A9%B6/1.png" class=""><p>当内存链中的没有任何可用对象时，根据新申请的可用对象的申请方式，将内存池模式分为了malloc和chunked两种模式。</p><h2 id="2-1-malloc-模式分析"><a href="#2-1-malloc-模式分析" class="headerlink" title="2.1 malloc 模式分析"></a>2.1 malloc 模式分析</h2><p>此模式的内存池原理比较简单，每次应用向内存池申请内存时，先从内存池已有的空闲对象列表中直接pop出一个即可，如果空闲列表对象池中没有任何可用空闲对象，则直接调用系统的malloc进行申请；当应用归还内存时直接将归还的内存放入空闲队列中即可。</p><h2 id="2-2-chunked-模式分析"><a href="#2-2-chunked-模式分析" class="headerlink" title="2.2 chunked 模式分析"></a>2.2 chunked 模式分析</h2><p>此模式主要原理是，当内存链中没有可用空闲内存对象时，先向操作系统申请一块大内存(如2MB)，再将这块大内存按照内存链对象的大小进行切分，将规整切分后的内存加入到可用内存链中。</p><img src="/2020/08/16/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/03%20squid/00%20squid%20%E5%86%85%E5%AD%98%E6%B1%A0%E7%A0%94%E7%A9%B6/2.png" class=""><h1 id="3-源码分析"><a href="#3-源码分析" class="headerlink" title="3. 源码分析"></a>3. 源码分析</h1><p>内存源码位于src/mem目录下，</p><h2 id="3-1-文件及目录结构说明"><a href="#3-1-文件及目录结构说明" class="headerlink" title="3.1 文件及目录结构说明"></a>3.1 文件及目录结构说明</h2><table><thead><tr><th align="left">文件名</th><th>说明</th></tr></thead><tbody><tr><td align="left">AllocatorProxy.h和AllocatorProxy.cpp</td><td>提供给外部期望使用内存池分配类对象空间的代理类</td></tr><tr><td align="left">forward.h</td><td>内存池对外头文件</td></tr><tr><td align="left">Meter.h</td><td>跟踪内存使用情况的对象</td></tr><tr><td align="left">old_api.cc</td><td>实现forward.h中的相关全局函数声明</td></tr><tr><td align="left">pool.h 及pool.cpp</td><td>内存池对象接口</td></tr><tr><td align="left">PoolMalloc.h及PoolMalloc.cc</td><td>malloc内存池模式实现</td></tr><tr><td align="left">PoolChunked.h及PoolChunked.cc</td><td>chunked内存池模式实现</td></tr></tbody></table><h2 id="3-2-总体调用关系说明"><a href="#3-2-总体调用关系说明" class="headerlink" title="3.2 总体调用关系说明"></a>3.2 总体调用关系说明</h2><p>程序启动的时候调用Mem::Init() 函数对全局的内存池进行初始化，默认全局初始化了2KB、4KB、8KB、16KB、32KB、64KB、dread_ctrl、dwrite_q、MD5 digest(16字节)  的全局内存池对象（static MemAllocator *pools[MEM_MAX]） ，并设置内存池对象类型的最大个数为mem_type::MEM_MAX个;</p><p>其中除了MD5 digest内存池的chunk块大小512字节外，其他内存池的chunk块大小均为2MB</p><p>针对String 类型，squid定义了一组特殊的小内存内存块。通过memAllocString 函数调用，默认定义了6中类型的内存池，大小分别是36Byte, 128Byte, 512Byte, 1024Byte,  4096Byte, 16KB 等6种，存放于static const PoolMeta PoolAttrs[mem_str_pool_count] 中</p><p>当程序申请内存时通过2中方式来申请，</p><ol><li>调用memAllocBuf 来申请内存自定义大小的内存，当申请的内存超过pools中最大内存池64KB时则直接调用malloc进行申请</li><li>调用memAllocate根据类型MEM_NONE~~MEM_MAX的类型来调用指定大小的内存</li></ol><h2 id="3-3-PoolChunked源码分析"><a href="#3-3-PoolChunked源码分析" class="headerlink" title="3.3 PoolChunked源码分析"></a>3.3 PoolChunked源码分析</h2><p>每个固定大小的内存池 MemPoolChunked 由多个MemChunk组成，MemPoolChunked 成员变量解释如下：</p><table><thead><tr><th>变量名</th><th>变量含义</th></tr></thead><tbody><tr><td>chunk_size</td><td>当前内存池每个chunk的大小</td></tr><tr><td>chunk_capacity</td><td>每个chunk内可分配的内存item个数</td></tr><tr><td>chunkCount</td><td>当前内存池的chunk个数</td></tr><tr><td>freeCache</td><td>当前内存池中空闲item列表(自身是空闲的，自身前sizeof(void*)个字节内记录了下一个空闲对象的地址)</td></tr><tr><td>nextFreeChunk</td><td>当有新申请的空闲chunk时指向新申请的空闲chunk</td></tr><tr><td>Chunks</td><td>当前内存池chunk块链表的第一个chunk</td></tr><tr><td>allChunks</td><td>所有chunk块列表，使用伸展树(<em>Splay Tree</em>)存储</td></tr></tbody></table><p>MemChunk 成员变量说明如下：</p><table><thead><tr><th>变量名</th><th>变量含义</th></tr></thead><tbody><tr><td>freeList</td><td>当前chunk内空闲item列表</td></tr><tr><td>objCache</td><td>当前chunk的首个item地址</td></tr><tr><td>inuse_count</td><td>当前chunk中正在被使用的item个数</td></tr><tr><td>nextFreeChunk</td><td>当前chunk的前一个被使用完的空闲chunk</td></tr><tr><td>next</td><td>当前chunk的下一个chunk地址</td></tr><tr><td>lastref</td><td>最后使用时间</td></tr><tr><td>pool</td><td>所属的内存池对象地址</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>高性能代理软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>squid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>伸展树(splay)</title>
    <link href="/2020/08/15/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03%E4%BC%B8%E5%B1%95%E6%A0%91(splay)/"/>
    <url>/2020/08/15/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03%E4%BC%B8%E5%B1%95%E6%A0%91(splay)/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>二叉查找树（Binary Search Tree，也叫二叉排序树，即Binary Sort Tree）能够支持多种动态集合操作，它可以用来表示有序集合、建立索引等，因而在实际应用中，二叉排序树是一种非常重要的数据结构。</p><p>从算法复杂度角度考虑，我们知道，作用于二叉查找树上的基本操作（如查找，插入等）的时间复杂度与树的高度成正比。对一个含n个节点的完全二叉树，这些操作的最坏情况运行时间为O(log n)。但如果因为频繁的删除和插入操作，导致树退化成一个n个节点的线性链（此时即为一个单链表），则这些操作的最坏情况运行时间为O(n)。为了克服以上缺点，很多二叉查找树的变形出现了，如红黑树、AVL树，Treap树等。</p><h1 id="splay-特点"><a href="#splay-特点" class="headerlink" title="splay 特点"></a>splay 特点</h1><p>伸展树(Splay Tree)是二叉查找树的一种改进数据结构。它的主要特点是不会保证树一直是平衡的，但各种操作的平摊时间复杂度是O(log n)，因而，从平摊复杂度上看，二叉查找树也是一种平衡二叉树。另外，相比于其他树状数据结构（如红黑树，AVL树等），伸展树的空间要求与编程复杂度要小得多。</p><h1 id="splay算法解决的问题"><a href="#splay算法解决的问题" class="headerlink" title="splay算法解决的问题"></a>splay算法解决的问题</h1><p>考虑到局部性原理（刚被访问的内容下次可能仍会被访问，查找次数多的内容可能下一次会被访问），为了使整个查找时间更小，被查频率高的那些节点应当经常处于靠近树根的位置。这样，很容易得想到以下这个方案：每次查找节点之后对树进行重构，把被查找的节点搬移到树根，这种自调整形式的二叉查找树就是伸展树。每次对伸展树进行操作后，它均会通过旋转的方法把被访问节点旋转到树根的位置。</p><p>为了将当前被访问节点旋转到树根，我们通常将节点自底向上旋转，直至该节点成为树根为止。“旋转”的巧妙之处就是在不打乱数列中数据大小关系（指中序遍历结果是全序的）情况下，所有基本操作的平摊复杂度仍为O（log n）。</p><p>伸展树主要有三种旋转操作，分别为单旋转，一字形旋转和之字形旋转。为了便于解释，我们假设当前被访问节点为X，X的父亲节点为Y（如果X的父亲节点存在），X的祖父节点为Z（如果X的祖父节点存在）。</p><h2 id="单旋转"><a href="#单旋转" class="headerlink" title="单旋转"></a>单旋转</h2><p>节点X的父节点Y是根节点。这时，如果X是Y的左孩子，我们进行一次右旋操作；如果X 是Y 的右孩子，则我们进行一次左旋操作。经过旋转，X成为二叉查找树T的根节点，调整结束。</p><img src="/2020/08/15/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03%E4%BC%B8%E5%B1%95%E6%A0%91(splay)/1.jpeg" class=""><h2 id="一字型旋转"><a href="#一字型旋转" class="headerlink" title="一字型旋转"></a>一字型旋转</h2><p>节点X 的父节点Y不是根节点，Y 的父节点为Z，且X与Y同时是各自父节点的左孩子或者同时是各自父节点的右孩子。这时，我们进行一次左左旋转操作或者右右旋转操作。</p><img src="/2020/08/15/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03%E4%BC%B8%E5%B1%95%E6%A0%91(splay)/2.jpeg" class=""><h2 id="之字形旋转"><a href="#之字形旋转" class="headerlink" title="之字形旋转"></a>之字形旋转</h2><p>节点X的父节点Y不是根节点，Y的父节点为Z，X与Y中一个是其父节点的左孩子而另一个是其父节点的右孩子。这时，我们进行一次左右旋转操作或者右左旋转操作。</p><img src="/2020/08/15/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03%E4%BC%B8%E5%B1%95%E6%A0%91(splay)/3.jpeg" class=""><h1 id="伸展树区间操作"><a href="#伸展树区间操作" class="headerlink" title="伸展树区间操作"></a>伸展树区间操作</h1><p>在实际应用中，伸展树的中序遍历即为我们维护的数列，这就引出一个问题，怎么在伸展树中表示某个区间？比如我们要提取区间[a,b]，那么我们将a前面一个数对应的结点转到树根，将b 后面一个结点对应的结点转到树根的右边，那么根右边的左子树就对应了区间[a,b]。原因很简单，将a 前面一个数对应的结点转到树根后， a 及a 后面的数就在根的右子树上，然后又将b后面一个结点对应的结点转到树根的右边，那么[a,b]这个区间就是下图中B所示的子树。</p><img src="/2020/08/15/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/03%E4%BC%B8%E5%B1%95%E6%A0%91(splay)/4.jpeg" class=""><p>利用区间操作我们可以实现线段树的一些功能，比如回答对区间的询问（最大值，最小值等）。具体可以这样实现，在每个结点记录关于以这个结点为根的子树的信息，然后询问时先提取区间，再直接读取子树的相关信息。还可以对区间进行整体修改，这也要用到与线段树类似的延迟标记技术，即对于每个结点，额外记录一个或多个标记，表示以这个结点为根的子树是否被进行了某种操作，并且这种操作影响其子结点的信息值，当进行旋转和其他一些操作时相应地将标记向下传递。</p><p>与线段树相比，伸展树功能更强大，它能解决以下两个线段树不能解决的问题：</p><p>（1） 在a后面插入一些数。方法是：首先利用要插入的数构造一棵伸展树，接着，将a 转到根，并将a 后面一个数对应的结点转到根结点的右边，最后将这棵新的子树挂到根右子结点的左子结点上。</p><p>（2）  删除区间[a,b]内的数。首先提取[a,b]区间，直接删除即可。</p><h1 id="已知应用"><a href="#已知应用" class="headerlink" title="已知应用"></a>已知应用</h1><ul><li>squid 4中的内存池使用了伸展树</li><li>轻量级web服务器lighttpd中用到数据结构splay tree<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><a href="http://dongxicheng.org/structure/splay-tree/">http://dongxicheng.org/structure/splay-tree/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02 [百度分享]频繁分配释放内存导致的性能问题分析</title>
    <link href="/2020/08/14/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/06%E5%BC%80%E5%8F%91%E5%88%86%E6%9E%90/02%20%5B%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%5D%E9%A2%91%E7%B9%81%E5%88%86%E9%85%8D%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98%E5%AF%BC%E8%87%B4%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <url>/2020/08/14/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/06%E5%BC%80%E5%8F%91%E5%88%86%E6%9E%90/02%20%5B%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%5D%E9%A2%91%E7%B9%81%E5%88%86%E9%85%8D%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98%E5%AF%BC%E8%87%B4%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="1-现象"><a href="#1-现象" class="headerlink" title="1. 现象"></a>1. 现象</h1><ol><li>压力测试过程中，发现被测对象性能不够理想，具体表现为：<br>进程的系统态CPU消耗20，用户态CPU消耗10，系统idle大约70 </li><li>用ps -o majflt,minflt -C program命令查看，发现majflt每秒增量为0，而minflt每秒增量大于10000。</li></ol><h1 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h1><h2 id="2-1-初步分析"><a href="#2-1-初步分析" class="headerlink" title="2.1 初步分析"></a>2.1 初步分析</h2><p>majflt代表major fault，中文名叫大错误，minflt代表minor fault，中文名叫小错误。<br>这两个数值表示一个进程自启动以来所发生的缺页中断的次数。<br>当一个进程发生缺页中断的时候，进程会陷入内核态，执行以下操作：<br>检查要访问的虚拟地址是否合法<br>查找/分配一个物理页<br>填充物理页内容（读取磁盘，或者直接置0，或者啥也不干）<br>建立映射关系（虚拟地址到物理地址）<br>重新执行发生缺页中断的那条指令<br>如果第3步，需要读取磁盘，那么这次缺页中断就是majflt，否则就是minflt。<br>此进程minflt如此之高，一秒10000多次，不得不怀疑它跟进程内核态cpu消耗大有很大关系。</p><h2 id="2-2-分析代码"><a href="#2-2-分析代码" class="headerlink" title="2.2 分析代码"></a>2.2 分析代码</h2><p>查看代码，发现是这么写的：一个请求来，用malloc分配2M内存，请求结束后free这块内存。看日志，发现分配内存语句耗时10us，平均一条请求处理耗时1000us 。 原因已找到！<br>虽然分配内存语句的耗时在一条处理请求中耗时比重不大，但是这条语句严重影响了性能。要解释清楚原因，需要先了解一下内存分配的原理。 </p><h2 id="2-3-内存分配的原理"><a href="#2-3-内存分配的原理" class="headerlink" title="2.3 内存分配的原理"></a>2.3 内存分配的原理</h2><p>从操作系统角度来看，进程分配内存有两种方式，分别由两个系统调用完成：brk和mmap（不考虑共享内存）。brk是将数据段(.data)的最高地址指针_edata往高地址推，mmap是在进程的虚拟地址空间中（一般是堆和栈中间）找一块空闲的。这两种方式分配的都是虚拟内存，没有分配物理内存。在第一次访问已分配的虚拟地址空间的时候，发生缺页中断，操作系统负责分配物理内存，然后建立虚拟内存和物理内存之间的映射关系。<br>在标准C库中，提供了malloc/free函数分配释放内存，这两个函数底层是由brk，mmap，munmap这些系统调用实现的。<br>下面以一个例子来说明内存分配的原理：</p><img src="/2020/08/14/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/06%E5%BC%80%E5%8F%91%E5%88%86%E6%9E%90/02%20%5B%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%5D%E9%A2%91%E7%B9%81%E5%88%86%E9%85%8D%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98%E5%AF%BC%E8%87%B4%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/c_1.jpg" class=""><ol><li>进程启动的时候，其（虚拟）内存空间的初始布局如图1所示。其中，mmap内存映射文件是在堆和栈的中间（例如libc-2.2.93.so，其它数据文件等），为了简单起见，省略了内存映射文件。_edata指针（glibc里面定义）指向数据段的最高地址。 </li><li>进程调用A=malloc(30K)以后，内存空间如图2：malloc函数会调用brk系统调用，将_edata指针往高地址推30K，就完成虚拟内存分配。你可能会问：只要把_edata+30K就完成内存分配了？事实是这样的，_edata+30K只是完成虚拟地址的分配，A这块内存现在还是没有物理页与之对应的，等到进程第一次读写A这块内存的时候，发生缺页中断，这个时候，内核才分配A这块内存对应的物理页。也就是说，如果用malloc分配了A这块内容，然后从来不访问它，那么，A对应的物理页是不会被分配的。 </li><li>进程调用B=malloc(40K)以后，内存空间如图3. <img src="/2020/08/14/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/06%E5%BC%80%E5%8F%91%E5%88%86%E6%9E%90/02%20%5B%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%5D%E9%A2%91%E7%B9%81%E5%88%86%E9%85%8D%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98%E5%AF%BC%E8%87%B4%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/c_2.jpg" class=""></li><li>进程调用C=malloc(200K)以后，内存空间如图4：默认情况下，malloc函数分配内存，如果请求内存大于128K（可由M_MMAP_THRESHOLD选项调节），那就不是去推_edata指针了，而是利用mmap系统调用，从堆和栈的中间分配一块虚拟内存。这样子做主要是因为brk分配的内存需要等到高地址内存释放以后才能释放（例如，在B释放之前，A是不可能释放的），而mmap分配的内存可以单独释放。当然，还有其它的好处，也有坏处，再具体下去，有兴趣的同学可以去看glibc里面malloc的代码了。 </li><li>进程调用D=malloc(100K)以后，内存空间如图5. </li><li>进程调用free(C)以后，C对应的虚拟内存和物理内存一起释放 <img src="/2020/08/14/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/06%E5%BC%80%E5%8F%91%E5%88%86%E6%9E%90/02%20%5B%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%5D%E9%A2%91%E7%B9%81%E5%88%86%E9%85%8D%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98%E5%AF%BC%E8%87%B4%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/c_3.jpg" class="">     </li><li>进程调用free(B)以后，如图7所示。B对应的虚拟内存和物理内存都没有释放，因为只有一个_edata指针，如果往回推，那么D这块内存怎么办呢？当然，B这块内存，是可以重用的，如果这个时候再来一个40K的请求，那么malloc很可能就把B这块内存返回回去了。 </li><li>进程调用free(D)以后，如图8所示。B和D连接起来，变成一块140K的空闲内存。 </li><li>默认情况下：当最高地址空间的空闲内存超过128K（可由M_TRIM_THRESHOLD选项调节）时，执行内存紧缩操作（trim）。在上一个步骤free的时候，发现最高地址空闲内存超过128K，于是内存紧缩，变成图9所示。</li></ol><h1 id="2-4-真相大白"><a href="#2-4-真相大白" class="headerlink" title="2.4 真相大白"></a>2.4 真相大白</h1><p>说完内存分配的原理，那么被测模块在内核态cpu消耗高的原因就很清楚了：每次请求来都malloc一块2M的内存，默认情况下，malloc调用mmap分配内存，请求结束的时候，调用munmap释放内存。假设每个请求需要6个物理页，那么每个请求就会产生6个缺页中断，在2000的压力下，每秒就产生了10000多次缺页中断，这些缺页中断不需要读取磁盘解决，所以叫做minflt；缺页中断在内核态执行，因此进程的内核态cpu消耗很大。缺页中断分散在整个请求的处理过程中，所以表现为分配语句耗时（10us）相对于整条请求的处理时间（1000us）比重很小。</p><h1 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3. 解决办法"></a>3. 解决办法</h1><p>将动态内存改为静态分配，或者启动的时候，用malloc为每个线程分配，然后保存在threaddata里面。但是，由于这个模块的特殊性，静态分配，或者启动时候分配都不可行。另外，Linux下默认栈的大小限制是10M，如果在栈上分配几M的内存，有风险。<br>禁止malloc调用mmap分配内存，禁止内存紧缩。<br>在进程启动时候，加入以下两行代码：<br>mallopt(M_MMAP_MAX, 0);         // 禁止malloc调用mmap分配内存<br>mallopt(M_TRIM_THRESHOLD, -1);  // 禁止内存紧缩<br>效果：加入这两行代码以后，用ps命令观察，压力稳定以后，majlt和minflt都为0。进程的系统态cpu从20降到10。</p><h1 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h1><p>可以用命令ps -o majflt minflt -C program来查看进程的majflt, minflt的值，这两个值都是累加值，从进程启动开始累加。在对高性能要求的程序做压力测试的时候，我们可以多关注一下这两个值。<br>如果一个进程使用了mmap将很大的数据文件映射到进程的虚拟地址空间，我们需要重点关注majflt的值，因为相比minflt，majflt对于性能的损害是致命的，随机读一次磁盘的耗时数量级在几个毫秒，而minflt只有在大量的时候才会对性能产生影响。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>VIRT 与 RSE 占用分析</title>
    <link href="/2020/08/13/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/05VIRT%E4%B8%8ERES%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/"/>
    <url>/2020/08/13/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/05VIRT%E4%B8%8ERES%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h1><p>在Linux命令行中执行top命令，可以查询到所有进程使用的VIRT虚拟内存、RES常驻内存和共享内存SHR。那么，什么是VIRT虚拟内存、RES常驻内存和共享内存SHR？我们编写的Linux C++程序如何影响它们呢？</p><h2 id="VIRT："><a href="#VIRT：" class="headerlink" title="VIRT："></a>VIRT：</h2><div class="code-wrapper"><pre><code class="hljs">- 进程“需要的”虚拟内存大小，包括进程使用的库、代码、数据，以及malloc、new分配的堆空间和分配的栈空间等；- 假如进程新申请10MB的内存，但实际只使用了1MB，那么它会增长10MB，而不是实际的1MB使用量。- VIRT = SWAP + RES</code></pre></div><h2 id="RES："><a href="#RES：" class="headerlink" title="RES："></a>RES：</h2><div class="code-wrapper"><pre><code class="hljs">- 进程当前使用的内存大小，包括使用中的malloc、new分配的堆空间和分配的栈空间，但不包括swap out量；- 包含其他进程的共享；- 如果申请10MB的内存，实际使用1MB，它只增长1MB，与VIRT相反；- 关于库占用内存的情况，它只统计加载的库文件所占内存大小。- RES = CODE + DATA</code></pre></div><h2 id="SHR："><a href="#SHR：" class="headerlink" title="SHR："></a>SHR：</h2><div class="code-wrapper"><pre><code class="hljs">- 除了自身进程的共享内存，也包括其他进程的共享内存；- 虽然进程只使用了几个共享库的函数，但它包含了整个共享库的大小；- 计算某个进程所占的物理内存大小公式：RES – SHR；- swap out后，它将会降下来。</code></pre></div><h1 id="2、程序验证"><a href="#2、程序验证" class="headerlink" title="2、程序验证"></a>2、程序验证</h1><h2 id="2-1-申请但未使用的堆空间不占用RES，但占用VIRT"><a href="#2-1-申请但未使用的堆空间不占用RES，但占用VIRT" class="headerlink" title="2.1 申请但未使用的堆空间不占用RES，但占用VIRT"></a>2.1 申请但未使用的堆空间不占用RES，但占用VIRT</h2><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> * p = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span> [<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">512</span>];<br>    <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>top显示如下：</p><img src="/2020/08/13/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/05VIRT%E4%B8%8ERES%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/1.png" class=""><p>VIRT包含了new出来的512MB空间，但是RES不包含该空间。即malloc或new出来的空间，如果没有使用，会放入SWAP中，并不在内容中真实的分配物理内存。</p><h2 id="2-2-申请且使用了的堆空间占用RES"><a href="#2-2-申请且使用了的堆空间占用RES" class="headerlink" title="2.2 申请且使用了的堆空间占用RES"></a>2.2 申请且使用了的堆空间占用RES</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> * p = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span> [<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">512</span>];<br>    <span class="hljs-built_in">memset</span>(p, <span class="hljs-number">0</span>, <span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">512</span>); <span class="hljs-comment">//使用申请的空间</span><br>    <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>top显示如下:</p><img src="/2020/08/13/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/05VIRT%E4%B8%8ERES%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/2.png" class=""><p>VIRT包含new出来的512MB空间，RES包含目前使用的memset的512M空间。即new出来的空间被使用后，会真实分配物理内存。</p><p><strong>使用部分申请了的堆空间则RES显示使用的部分</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> * p = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span> [<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">512</span>];<br>    <span class="hljs-built_in">memset</span>(p + <span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">128</span>);<br>    <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>top显示如下:</p><img src="/2020/08/13/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/05VIRT%E4%B8%8ERES%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/3.png" class=""><p>VIRT包含new出来的512MB空间，RES包含目前使用的memset的128M空间。即new出来的空间，如果只使用部分，则只分配部分物理内存。</p><h2 id="2-3-申请但未使用的栈空间不占用RES，但占用VIRT"><a href="#2-3-申请但未使用的栈空间不占用RES，但占用VIRT" class="headerlink" title="2.3 申请但未使用的栈空间不占用RES，但占用VIRT"></a>2.3 申请但未使用的栈空间不占用RES，但占用VIRT</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> p[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>top显示如下：</p><img src="/2020/08/13/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/05VIRT%E4%B8%8ERES%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/4.png" class=""><p>没有使用的栈空间，VIRT会包含（没有使用的栈空间会在SWAP中）。</p><h2 id="2-4-已经使用的栈空间，VIRT和RES都会包含"><a href="#2-4-已经使用的栈空间，VIRT和RES都会包含" class="headerlink" title="2.4 已经使用的栈空间，VIRT和RES都会包含"></a>2.4 已经使用的栈空间，VIRT和RES都会包含</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> p[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">20</span>];<br><span class="hljs-built_in">memset</span>(p, <span class="hljs-number">0</span>, <span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>top显示如下：</p><img src="/2020/08/13/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/05VIRT%E4%B8%8ERES%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/5.png" class=""><h2 id="2-5-局部申请的内存释放后RES并未减少"><a href="#2-5-局部申请的内存释放后RES并未减少" class="headerlink" title="2.5 局部申请的内存释放后RES并未减少"></a>2.5 局部申请的内存释放后RES并未减少</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_part_virt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = len+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">char</span> *p = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*i*<span class="hljs-number">10</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%d, p=%p\n&quot;</span>, i, p);<br>    <span class="hljs-built_in">memset</span>(p, <span class="hljs-number">0</span>, <span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*i*<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">delete</span> [] p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//char * p = new char [1024*1024*512];</span><br>    <span class="hljs-keyword">char</span> p[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">memset</span>(p, <span class="hljs-number">0</span>, <span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">20</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">20</span>; ++i) &#123;<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-built_in">test_part_virt</span>(i%<span class="hljs-number">4</span>);<br>    &#125;<br>    <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>top显示如下：</p><img src="/2020/08/13/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/05VIRT%E4%B8%8ERES%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/6.png" class=""><p>在 <code>currlwent i=1, p=0xfd0010 </code> 时RES开始增加，每次增加10M, 且一直占用，此问题主要由于Glibc的内存分配由brk和mmap两种内存内存分配策略导致。<br>    从操作系统的角度看，进程的内存分配由两个系统调用完成：brk和mmap。brk是将数据段(.data)的最高地址指针_edata往高地址推，mmap是在进程的虚拟地址空间中找一块空闲的。其中，mmap分配的内存由munmap释放，内存释放时将立即归还操作系统；而brk分配的内存需要等到高地址内存释放以后才能释放，可通过在程序启动时增加以下代码，修改内存分配方式来解决问题    </p><blockquote><p>mallopt(M_MMAP_MAX, 0); // 禁止malloc调用mmap分配内存<br>mallopt(M_TRIM_THRESHOLD, 0); // 禁止内存缩进，sbrk申请的内存释放后不会归还给操作系统</p></blockquote><p>修改后的代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_part_virt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = len+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">char</span> p[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*i*<span class="hljs-number">10</span>];<br>    <span class="hljs-built_in">memset</span>(p, <span class="hljs-number">0</span>, <span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*i*<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;currlwent i=%d, p=%p\n&quot;</span>, i, p);<br>    <span class="hljs-comment">//char *p = new char[1024*1024*i*10];</span><br>    <span class="hljs-comment">//printf(&quot;currlwent i=%d, p=%p\n&quot;, i, p);</span><br>    <span class="hljs-comment">//memset(p, 0, 1024*1024*i*10);</span><br>    <span class="hljs-comment">//delete [] p;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">mallopt</span>(M_MMAP_MAX, <span class="hljs-number">0</span>); <span class="hljs-comment">// 禁止malloc调用mmap分配内存</span><br>    <span class="hljs-comment">//char * p = new char [1024*1024*512];</span><br>    <span class="hljs-keyword">char</span> p[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">memset</span>(p, <span class="hljs-number">0</span>, <span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">20</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">20</span>; ++i) &#123;<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-built_in">test_part_virt</span>(i%<span class="hljs-number">4</span>);<br>    &#125;<br>    <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>经过以上的代码修改程序RES内存稳定再20MB</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://blog.csdn.net/huyiyang2010/article/details/7815491#">https://blog.csdn.net/huyiyang2010/article/details/7815491#</a><br><a href="https://blog.csdn.net/hmylk/article/details/37761247">https://blog.csdn.net/hmylk/article/details/37761247</a><br><a href="https://bbs.csdn.net/topics/330179712">https://bbs.csdn.net/topics/330179712</a></p>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>getopt与getopt_long使用</title>
    <link href="/2020/08/03/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/01getopt%E4%B8%8Egetopt_long%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/08/03/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/01getopt%E4%B8%8Egetopt_long%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="解析命令行参数getopt和getopt-long"><a href="#解析命令行参数getopt和getopt-long" class="headerlink" title="解析命令行参数getopt和getopt_long"></a>解析命令行参数getopt和getopt_long</h1><p>在程序中一般都会用到命令行选项, 我们可以使用<strong>getopt 和getopt_long</strong>函数来解析命令行参数</p><h2 id="getopt"><a href="#getopt" class="headerlink" title="getopt"></a>getopt</h2><p>getopt主要用来处理短命令行选项, 例如<code>./test -v</code>中 -v 就是一个短选项. 使用该函数需要引入头文件&lt;unistd.h&gt;, 下面是该函数的定义<br><code>int getopt(int argc, char * const argv[], const char * optstring);</code></p><p>其中 <code>argc</code> 和 <code>argv</code> 是 <code>main</code> 函数中的传递的参数个数和内容, <code>optstring</code> 用来指定可以处理哪些选项, 下面是 <code>optstring</code> 的一个示例:<br><code>&quot;a:bc&quot;</code></p><p>该示例表明程序可以接受3个选项: -a -b -c, 其中 a 后面的 :表示该选项后面要跟一个参数, 即如 -a text的形式, 选项后面跟的参数会被保存到 optarg 变量中. 下面是一个使用示例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> **argv)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> ch;<br>    <span class="hljs-keyword">while</span>((ch = <span class="hljs-built_in">getopt</span>(argc, argv, <span class="hljs-string">&quot;a:b&quot;</span>)) != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(ch) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;option a: %s\n&quot;</span>, optarg);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;option b \n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;?&#x27;</span>: <span class="hljs-comment">// 输入未定义的选项, 都会将该选项的值变为 ?</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unknown option \n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;default \n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行 <code>./test -a aa -b -c</code> 输出结果如下:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">option</span> a: aa<br><span class="hljs-keyword">option</span> b <br><span class="hljs-type">unknown</span> <span class="hljs-keyword">option</span><br></code></pre></td></tr></table></figure><h2 id="getopt-long"><a href="#getopt-long" class="headerlink" title="getopt_long"></a>getopt_long</h2><p><code>getopt_long</code>支持长选项的命令行解析, 所为长选项就是诸如–help的形式, 使用该函数, 需要引入&lt;getopt.h&gt;下面是函数原型:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;getopt.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getopt_long</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, </span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-keyword">char</span> * <span class="hljs-keyword">const</span> argv[],</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *optstring,</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-keyword">const</span> struct option *longopts,</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-keyword">int</span> *longindex)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getopt_long_only</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-keyword">char</span> * <span class="hljs-keyword">const</span> argv[],</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *optstring,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-keyword">const</span> struct option *longopts,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-keyword">int</span> *longindex)</span></span>;<br></code></pre></td></tr></table></figure><p>其中 argc , argv , optstring 和getopt中的含义一样, 下面解释一下longopts 和longindex</p><h3 id="longopts"><a href="#longopts" class="headerlink" title="longopts"></a>longopts</h3><p><code>longopts</code> 指向一个 <code>struct option</code> 的数组, 下面是<code>option</code>的定义:</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sml"><span class="hljs-keyword">struct</span> <span class="hljs-built_in">option</span> &#123;<br>    const <span class="hljs-built_in">char</span> *name;<br>    <span class="hljs-built_in">int</span>         has_arg;<br>    <span class="hljs-built_in">int</span>        *flag;<br>    <span class="hljs-built_in">int</span>         <span class="hljs-keyword">val</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>下面是各字段的含义<br>    name - 长选项的名称, 例如 help<br>    has_arg - 是否带参数, 0 不带参数, 1 必须带参数, 2 参数可选<br>    flag - 指定长选项如何返回结果, 如果flag为NULL, getopt_long() 会返回val. 如果flag不为NULL, getopt_long会返回0, 并且将val的值存储到flag中<br>    val - 将要被getopt_long返回或者存储到flag指向的变量中的值</p><p>下面是 <code>longopts</code> 的一个示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">option</span> <span class="hljs-title">opts</span>[] =</span> &#123;<br>    &#123;<span class="hljs-string">&quot;version&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;v&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;n&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;h&#x27;</span>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们来看<code>&#123;&quot;version&quot;, 0, NULL, &#39;v&#39;&#125;</code>, <code>version</code> 即为长选项的名称, 即按如下形式<code>--version</code>, 0 表示该选项后面不带参数, NULL 表示直接将v返回(字符v在ascii码中对应的数值), 即在使用getopt_long遍历到该条选项时, getopt_long 返回值为字符v对应的ascii码值.</p><h3 id="longindex"><a href="#longindex" class="headerlink" title="longindex"></a>longindex</h3><p><code>longindex</code> 表示长选项在<code>longopts</code> 中的位置, 例如在上面的示例中, <code>version</code> 对应的 <code>longindex</code> 为0, <code>name</code>对应的 <code>longindex</code> 为1, <code>help</code> 对应的 <code>longindex</code> 为2, 该项主要用于调试, 一般设为 NULL 即可.</p><p>下面是一个使用示例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">use_getpot_long</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *optstring = <span class="hljs-string">&quot;vn:h&quot;</span>;<br>    <span class="hljs-keyword">int</span> c;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">option</span> <span class="hljs-title">opts</span>[] =</span> &#123;<br>        &#123;<span class="hljs-string">&quot;version&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;v&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;n&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;h&#x27;</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">while</span>((c = <span class="hljs-built_in">getopt_long</span>(argc, argv, optstring, opts, <span class="hljs-literal">NULL</span>)) != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(c) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;n&#x27;</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;username is %s\n&quot;</span>, optarg);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;v&#x27;</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;version is 0.0.1\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is help\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;?&#x27;</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unknown option\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span> :<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the return val is 0\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;------\n&quot;</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们运行程序 ./test –name aaaa –version –help –haha, 下面是运行结果:</p><div class="code-wrapper"><pre><code class="hljs">username is aaaaversion is 0.0.1this is help./test: unrecognized option &#39;--haha&#39;unknown option</code></pre></div><p>当然我们也可以使用短选项 ./test -n aaaa -v -h<br>下面我们对程序做一下修改, 这一次将 struct option 中的 flag 和 longindex 设为具体的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">use_getpot_long2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *optstring = <span class="hljs-string">&quot;vn:h&quot;</span>;<br>    <span class="hljs-keyword">int</span> c;<br><br>    <span class="hljs-keyword">int</span> f_v = <span class="hljs-number">-1</span>, f_n = <span class="hljs-number">-1</span>, f_h = <span class="hljs-number">-1</span>, opt_index = <span class="hljs-number">-1</span>; <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">option</span> <span class="hljs-title">opts</span>[] =</span> &#123;<br>        &#123;<span class="hljs-string">&quot;version&quot;</span>, <span class="hljs-number">0</span>, &amp;f_v, <span class="hljs-string">&#x27;v&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">1</span>, &amp;f_n, <span class="hljs-string">&#x27;n&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-number">0</span>, &amp;f_h, <span class="hljs-string">&#x27;h&#x27;</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">while</span>((c = <span class="hljs-built_in">getopt_long</span>(argc, argv, optstring, opts, &amp;opt_index)) != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(c) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;n&#x27;</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;username is %s\n&quot;</span>, optarg);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;v&#x27;</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;version is 0.0.1\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is help\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;?&#x27;</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unknown option\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span> :<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;f_v is %d \n&quot;</span>, f_v);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;f_n is %d \n&quot;</span>, f_n);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;f_h is %d \n&quot;</span>, f_h);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;------\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;opt_index is %d\n\n&quot;</span>, opt_index);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行程序: ./test –name bbbb –version –help , 下面是运行结果:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">f_v <span class="hljs-keyword">is</span> <span class="hljs-number">-1</span> <br>f_n <span class="hljs-keyword">is</span> <span class="hljs-number">110</span> <br>f_h <span class="hljs-keyword">is</span> <span class="hljs-number">-1</span> <br>opt_index <span class="hljs-keyword">is</span> <span class="hljs-number">1</span><br><br>f_v <span class="hljs-keyword">is</span> <span class="hljs-number">118</span> <br>f_n <span class="hljs-keyword">is</span> <span class="hljs-number">110</span> <br>f_h <span class="hljs-keyword">is</span> <span class="hljs-number">-1</span> <br>opt_index <span class="hljs-keyword">is</span> <span class="hljs-number">0</span><br><br>f_v <span class="hljs-keyword">is</span> <span class="hljs-number">118</span> <br>f_n <span class="hljs-keyword">is</span> <span class="hljs-number">110</span> <br>f_h <span class="hljs-keyword">is</span> <span class="hljs-number">104</span> <br>opt_index <span class="hljs-keyword">is</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>我们可以看到当给 flag 指定具体的指针之后, getopt_long 会返回0, 因此会去执行case 0, 并且 val 的值赋给了 flag 指向的变量. 下面我们用短选项执行一下程序 ./test -n bbbb -v -h, 下面是运行结果</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs d">username <span class="hljs-keyword">is</span> bbbb<br>opt_index <span class="hljs-keyword">is</span> -<span class="hljs-number">1</span><br><br><span class="hljs-keyword">version</span> <span class="hljs-keyword">is</span> <span class="hljs-number">0.0</span><span class="hljs-number">.1</span><br>opt_index <span class="hljs-keyword">is</span> -<span class="hljs-number">1</span><br><br><span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> help<br>opt_index <span class="hljs-keyword">is</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>我们看到使用短选项的时候 getopt_long 就相当于 getopt , flag 和 longindex都不起作用了.</p><p>getopt_long 和 getopt_long_only<br>下面解释一下 getopt_long 和 getopt_long_only的区别, 首先用下列选项运行一下 use_getopt_long ./test -name zhangjkai -version -help , 下面是输出结果:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">username <span class="hljs-keyword">is</span> ame<br><span class="hljs-keyword">version</span> <span class="hljs-keyword">is</span> <span class="hljs-number">0.0</span><span class="hljs-number">.1</span><br>./test: invalid <span class="hljs-keyword">option</span> <span class="hljs-comment">-- &#x27;e&#x27;</span><br><span class="hljs-type">unknown</span> <span class="hljs-keyword">option</span><br>./test: invalid <span class="hljs-keyword">option</span> <span class="hljs-comment">-- &#x27;r&#x27;</span><br><span class="hljs-type">unknown</span> <span class="hljs-keyword">option</span><br>./test: invalid <span class="hljs-keyword">option</span> <span class="hljs-comment">-- &#x27;s&#x27;</span><br><span class="hljs-type">unknown</span> <span class="hljs-keyword">option</span><br>./test: invalid <span class="hljs-keyword">option</span> <span class="hljs-comment">-- &#x27;i&#x27;</span><br><span class="hljs-type">unknown</span> <span class="hljs-keyword">option</span><br>./test: invalid <span class="hljs-keyword">option</span> <span class="hljs-comment">-- &#x27;o&#x27;</span><br><span class="hljs-type">unknown</span> <span class="hljs-keyword">option</span><br>username <span class="hljs-keyword">is</span> -help<br></code></pre></td></tr></table></figure><p>我们看到使用短选项标识符 - 指向长选项时, 程序还是会按短选项来处理, 即一个字符一个字符的解析. 下面我们将 use_getopt_long 做一下更改, 即将 getopt_long 改为 getopt_long_only , 如下所示:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">use_getpot_long3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *optstring = <span class="hljs-string">&quot;vn:h&quot;</span>;<br>    <span class="hljs-keyword">int</span> c;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">option</span> <span class="hljs-title">opts</span>[] =</span> &#123;<br>        &#123;<span class="hljs-string">&quot;version&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;v&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;n&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;h&#x27;</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">while</span>((c = <span class="hljs-built_in">getopt_long_only</span>(argc, argv, optstring, opts, <span class="hljs-literal">NULL</span>)) != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(c) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;n&#x27;</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;username is %s\n&quot;</span>, optarg);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;v&#x27;</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;version is 0.0.1\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is help\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;?&#x27;</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unknown option\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span> :<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the return val is 0\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;------\n&quot;</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面再运行程序 <code>./test -name cccc -version -help </code>, 下面是运行结果:</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs d">username <span class="hljs-keyword">is</span> cccc<br><span class="hljs-keyword">version</span> <span class="hljs-keyword">is</span> <span class="hljs-number">0.0</span><span class="hljs-number">.1</span><br><span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> help<br></code></pre></td></tr></table></figure><p>即使用 <code>getopt_long_only</code> 时, - 和 –都可以作用于长选项, 而使用 <code>getopt_only</code> 时, 只有 –可以作用于长选项.</p>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式的六大原则</title>
    <link href="/2020/08/02/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/01%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/08/02/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/01%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="1-设计模式的六大原则"><a href="#1-设计模式的六大原则" class="headerlink" title="1. 设计模式的六大原则"></a>1. 设计模式的六大原则</h1><h2 id="1-1-开闭原则（Open-Close-Principle）"><a href="#1-1-开闭原则（Open-Close-Principle）" class="headerlink" title="1.1 开闭原则（Open Close Principle）"></a>1.1 开闭原则（Open Close Principle）</h2><p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><h2 id="1-2-里氏代换原则（Liskov-Substitution-Principle）"><a href="#1-2-里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="1.2 里氏代换原则（Liskov Substitution Principle）"></a>1.2 里氏代换原则（Liskov Substitution Principle）</h2><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><h2 id="1-3-依赖倒转原则（Dependence-Inversion-Principle）"><a href="#1-3-依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="1.3 依赖倒转原则（Dependence Inversion Principle）"></a>1.3 依赖倒转原则（Dependence Inversion Principle）</h2><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p><h2 id="1-4-接口隔离原则（Interface-Segregation-Principle）"><a href="#1-4-接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="1.4 接口隔离原则（Interface Segregation Principle）"></a>1.4 接口隔离原则（Interface Segregation Principle）</h2><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p><h2 id="1-5-迪米特法则，又称最少知道原则（Demeter-Principle）"><a href="#1-5-迪米特法则，又称最少知道原则（Demeter-Principle）" class="headerlink" title="1.5 迪米特法则，又称最少知道原则（Demeter Principle）"></a>1.5 迪米特法则，又称最少知道原则（Demeter Principle）</h2><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><h2 id="1-6-合成复用原则（Composite-Reuse-Principle）"><a href="#1-6-合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="1.6 合成复用原则（Composite Reuse Principle）"></a>1.6 合成复用原则（Composite Reuse Principle）</h2><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p><h1 id="2-设计模式"><a href="#2-设计模式" class="headerlink" title="2 设计模式"></a>2 设计模式</h1><h2 id="2-1-结构型"><a href="#2-1-结构型" class="headerlink" title="2.1 结构型"></a>2.1 结构型</h2><h3 id="2-1-1-Abstract-Factory-抽象工厂"><a href="#2-1-1-Abstract-Factory-抽象工厂" class="headerlink" title="2.1.1 Abstract Factory(抽象工厂)"></a>2.1.1 Abstract Factory(抽象工厂)</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类。</p><h4 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h4><ul><li>一个系统要独立于它的产品的创建、组合和表示时</li><li>一个系统要由多个产品系列中的一个来配置时</li><li>当你要强调一系列相关的产品对象的设计以便进行联合使用时</li><li>当你提供一个产品类库，而只想显示他们的接口而不是实现时</li></ul><h4 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h4><img src="/2020/08/02/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/01%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/abs1.png" class=""><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Button</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WinButton</span> :</span> <span class="hljs-keyword">public</span> Button &#123;&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MacButton</span> :</span> <span class="hljs-keyword">public</span> Button &#123;&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Border</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WinBorder</span> :</span> <span class="hljs-keyword">public</span> Border &#123;&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MacBorder</span> :</span> <span class="hljs-keyword">public</span> Border &#123;&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractFactory</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Button * <span class="hljs-title">CreateButton</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Border * <span class="hljs-title">CreateBorder</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WinFactory</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> WinButton * <span class="hljs-title">CreateButton</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WinButton; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> WinBorder * <span class="hljs-title">CreateBorder</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WinBorder; &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MacFactory</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">virtual</span> MacButton * CreateButton &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MacButton; &#125;<br>    <span class="hljs-keyword">virtual</span> MacBorder * CreateBorder &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MacBorder; &#125;<br>&#125;;<br><br>客户端如下使用：<br>AbstractFactory * fac;<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(style)<br>&#123;<br>    <span class="hljs-keyword">case</span> Mac: <br>        fac = <span class="hljs-keyword">new</span> MacFactory;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> Win:<br>        fac = <span class="hljs-keyword">new</span> WinFactory;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span> :<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br>Button * button = fac-&gt;<span class="hljs-built_in">CreateButton</span>();  <span class="hljs-comment">//隐藏了细节实现，封装了多个产品</span><br>Border * border = fac-&gt;<span class="hljs-built_in">CreateBorder</span>();<br></code></pre></td></tr></table></figure><h3 id="2-1-2-Builder—生成器"><a href="#2-1-2-Builder—生成器" class="headerlink" title="2.1.2 Builder—生成器"></a>2.1.2 Builder—生成器</h3><h4 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h4><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><h4 id="适用性-1"><a href="#适用性-1" class="headerlink" title="适用性"></a>适用性</h4><ol><li>当创建复杂对象的算法应该独立于该对象的组成部分以及他们的装配方式时</li><li>当构造过程必须允许被构造的对象有不同的表示时</li></ol><h4 id="结构图-1"><a href="#结构图-1" class="headerlink" title="结构图"></a>结构图</h4><img src="/2020/08/02/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/01%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/bld.png" class=""><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Builder</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildProduct</span><span class="hljs-params">()</span> </span>&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildPart1</span><span class="hljs-params">()</span> </span>&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildPart2</span><span class="hljs-params">()</span> </span>&#123;&#125;;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Produc *<span class="hljs-title">GetProduct</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>&#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreateBuilderA</span> :</span> <span class="hljs-keyword">public</span> Builder<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildProduct</span><span class="hljs-params">()</span> </span>&#123;<br>        m_product = <span class="hljs-keyword">new</span> Porduct;<br>        &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildPart1</span><span class="hljs-params">()</span> </span>&#123;<br>        m_product.<span class="hljs-built_in">setPart1</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">111</span>);<br>        .....<br>        &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildPart2</span><span class="hljs-params">()</span> </span>&#123;<br>        m_product.<span class="hljs-built_in">setPart2</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1333</span>);<br>        &#125;<br><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Produc *<span class="hljs-title">GetProduct</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> m_product;<br>        &#125;<br><span class="hljs-keyword">private</span>:<br>    Produc * m_product;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreateBuilderB</span> :</span> <span class="hljs-keyword">public</span> Builder<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildProduct</span><span class="hljs-params">()</span> </span>&#123;<br>        m_product = <span class="hljs-keyword">new</span> Porduct;<br>        &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildPart1</span><span class="hljs-params">()</span> </span>&#123;<br>        m_product.<span class="hljs-built_in">setPart1</span>(xxxx,qqqqq,<span class="hljs-number">111</span>);<br>        &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildPart2</span><span class="hljs-params">()</span> </span>&#123;<br>        m_product.<span class="hljs-built_in">setPart2</span>(xxxxx,bbbb,<span class="hljs-number">1333</span>);<br>        &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Produc *<span class="hljs-title">GetProduct</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> m_product;<br>        &#125;<br><span class="hljs-keyword">private</span>:<br>    Produc * m_product;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Director</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Director</span>(Builder * builder)&#123; m_builder = builder; &#125;<br>    <br>    <span class="hljs-built_in">Construct</span>()<br>    &#123;<br>        m_builder-&gt;<span class="hljs-built_in">buildPart1</span>();<br>        m_builder-&gt;<span class="hljs-built_in">buildPart2</span>();<br>        m_builder-&gt;<span class="hljs-built_in">buildPart3</span>();<br>    &#125;<br>    <br><span class="hljs-keyword">private</span>:<br>    Builder * m_builder;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-2-结构型"><a href="#2-2-结构型" class="headerlink" title="2.2 结构型"></a>2.2 结构型</h2><h3 id="2-2-1-Adapter—适配器模式"><a href="#2-2-1-Adapter—适配器模式" class="headerlink" title="2.2.1 Adapter—适配器模式"></a>2.2.1 Adapter—适配器模式</h3><h4 id="意图："><a href="#意图：" class="headerlink" title="意图："></a>意图：</h4><p>将一个类的接口转换为客户希望的另外一个接口。此模式是的原本由于接口不兼容而不能一起工作的那些类可以一起工作</p><h4 id="适用性："><a href="#适用性：" class="headerlink" title="适用性："></a>适用性：</h4><ol><li>想使用一个已经存在的类，而它的接口不符合你的需求。</li><li>想创建一个可以复用的类，该类可以与其他不相关的类或不可预见的类协同工作</li><li>想使用一些已经存在的类，但是不可能对每一个都进行子类化以匹配他们的接口。对象适配器可以适配他的父类接口</li></ol><h4 id="伪代码："><a href="#伪代码：" class="headerlink" title="伪代码："></a>伪代码：</h4><p>此模式较为简单，有两种实现方式，一种采用组合方式，另外一种采用继承方式</p><h4 id="组合方式"><a href="#组合方式" class="headerlink" title="组合方式"></a>组合方式</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adaptee</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>：<br>        <span class="hljs-built_in">SpecificRequest</span>();<br>        ....other...<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Target</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Request</span><span class="hljs-params">()</span></span>; <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adapter</span> :</span> <span class="hljs-keyword">public</span> Target<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Request</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_daptee.<span class="hljs-built_in">SpecificRequest</span>();<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    Adaptee m_daptee;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Target * mytarget = <span class="hljs-keyword">new</span> Adapter;<br>    mytarget-&gt;<span class="hljs-built_in">Request</span>();<br>    <span class="hljs-keyword">delete</span> mytarget;<br>    mytarget = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h4><p>直接将Adapter中的继承替换为多继承，继承Target，同时还继承Adaptee</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Adapter</span> : <span class="hljs-symbol">public</span> <span class="hljs-symbol">Target</span>，<span class="hljs-symbol">public</span> <span class="hljs-symbol">Adaptee</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    virtual <span class="hljs-built_in">void</span> Request()<br>    &#123;<br>        SpecificRequest();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-3-行为型"><a href="#2-3-行为型" class="headerlink" title="2.3 行为型"></a>2.3 行为型</h2><h3 id="2-3-1-Strategy-策略"><a href="#2-3-1-Strategy-策略" class="headerlink" title="2.3.1 Strategy (策略)"></a>2.3.1 Strategy (策略)</h3><h4 id="目的-2"><a href="#目的-2" class="headerlink" title="目的"></a>目的</h4><p>定义一系列的算法,把每一个算法封装起来, 并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。也称为政策模式(Policy)。</p><h4 id="适用性-2"><a href="#适用性-2" class="headerlink" title="适用性"></a>适用性</h4><p>当存在以下情况时使用Strategy模式</p><ol><li>许多相关的类仅仅是行为有异。 “策略”提供了一种用多个行为中的一个行为来配置一个类的方法。即一个系统需要动态地在几种算法中选择一种。</li><li>需要使用一个算法的不同变体。例如，你可能会定义一些反映不同的空间 /时间权衡的算法。当这些变体实现为一个算法的类层次时 ,可以使用策略模式。</li><li>算法使用客户不应该知道的数据。可使用策略模式以避免暴露复杂的、与算法相关的数据结构。</li><li>一个类定义了多种行为 , 并且这些行为在这个类的操作中以多个条件语句的形式出现。将相关的条件分支移入它们各自的Strategy类中以代替这些条件语句</li></ol><h4 id="结构图-2"><a href="#结构图-2" class="headerlink" title="结构图"></a>结构图</h4><img src="/2020/08/02/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/01%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/stra.jpeg" class=""><h4 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Strategy</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Interface</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Strategy</span>() &#123; &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteStrategyA</span> :</span><span class="hljs-keyword">public</span> Strategy &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Interface</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;ConcreteStrategyA::Interface...&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteStrategyB</span> :</span><span class="hljs-keyword">public</span> Strategy &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Interface</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;ConcreteStrategyB::Interface...&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Context</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Context</span>(Strategy *stg) &#123;<br>        _stg = stg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DoAction</span><span class="hljs-params">()</span> </span>&#123;<br>        _stg-&gt;<span class="hljs-built_in">Interface</span>();<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    Strategy *_stg;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Strategy *ps = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcreteStrategyA</span>();<br>    Context *pc = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Context</span>(ps);<br>    pc-&gt;<span class="hljs-built_in">DoAction</span>();<br><br>    <span class="hljs-keyword">delete</span> pc;<br>    <span class="hljs-keyword">delete</span> ps;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>架构设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>goreplay 引流测试工具</title>
    <link href="/2020/07/31/04DevOps/04%20goreplay%20%E5%BC%95%E6%B5%81%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    <url>/2020/07/31/04DevOps/04%20goreplay%20%E5%BC%95%E6%B5%81%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/buger/g</span>oreplay<br></code></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p><code>./goreplay  --input-raw :7001 --output-http http://ip:port</code></p>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rust 实用代码总结</title>
    <link href="/2020/07/31/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/02Rust/00rust%E5%AE%9E%E7%94%A8%E4%BB%A3%E7%A0%81%E6%B1%87%E6%80%BB/"/>
    <url>/2020/07/31/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/02Rust/00rust%E5%AE%9E%E7%94%A8%E4%BB%A3%E7%A0%81%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="获取当前的时间戳"><a href="#获取当前的时间戳" class="headerlink" title="获取当前的时间戳"></a>获取当前的时间戳</h1><p>示例代码如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::time::&#123;SystemTime&#125;;<br><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">get_timestamp</span></span>() -&gt; <span class="hljs-built_in">u64</span> &#123;<br>    <span class="hljs-keyword">match</span> SystemTime::now().duration_since(SystemTime::UNIX_EPOCH) &#123;<br>        <span class="hljs-literal">Ok</span>(now) =&gt; &#123;<br>            now.as_secs()<br>        &#125;,<br>        _ =&gt; &#123;<br>            std::<span class="hljs-built_in">u64</span>::MAX<br>        &#125;,<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Hello, world! now=&#123;&#125;&quot;</span>, get_timestamp());<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实现函数重载"><a href="#实现函数重载" class="headerlink" title="实现函数重载"></a>实现函数重载</h1><p>函数重载<br>rust本身不支持函数重载，但是可以用泛型trait实现类似于重载的效果</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">With</span></span>&lt;T&gt; &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">with</span></span>(value: T) -&gt; <span class="hljs-keyword">Self</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Foo</span></span> &#123;<br>    bar: <span class="hljs-built_in">String</span>,<br>    baz: <span class="hljs-built_in">i32</span>,<br>    quux: <span class="hljs-built_in">bool</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-built_in">Default</span> <span class="hljs-keyword">for</span> Foo &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">default</span></span>() -&gt; <span class="hljs-keyword">Self</span> &#123;<br>        Foo &#123;<br>            bar: <span class="hljs-string">&quot;&quot;</span>.to_string(),<br>            baz: <span class="hljs-number">0</span>,<br>            quux: <span class="hljs-literal">false</span>,<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> Foo &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">new</span></span>() -&gt; <span class="hljs-keyword">Self</span> &#123;<br>        Foo &#123;<br>            ..<span class="hljs-built_in">Default</span>::default()<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> With&lt;<span class="hljs-built_in">String</span>&gt; <span class="hljs-keyword">for</span> Foo &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">with</span></span>(x: <span class="hljs-built_in">String</span>) -&gt; <span class="hljs-keyword">Self</span> &#123;<br>        Foo &#123;<br>            bar: x,<br>            ..<span class="hljs-built_in">Default</span>::default()<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> With&lt;<span class="hljs-built_in">i32</span>&gt; <span class="hljs-keyword">for</span> Foo &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">with</span></span>(x: <span class="hljs-built_in">i32</span>) -&gt; <span class="hljs-keyword">Self</span> &#123;<br>        Foo &#123;<br>            baz: x,<br>            ..<span class="hljs-built_in">Default</span>::default()<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> With&lt;<span class="hljs-built_in">bool</span>&gt; <span class="hljs-keyword">for</span> Foo &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">with</span></span>(x: <span class="hljs-built_in">bool</span>) -&gt; <span class="hljs-keyword">Self</span> &#123;<br>        Foo &#123;<br>            quux: x,<br>            ..<span class="hljs-built_in">Default</span>::default()<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#[test]</span><br><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">name</span></span>() &#123;<br>    <span class="hljs-keyword">let</span> a = Foo::with(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="vec合并数据时防止出现拷贝的方法"><a href="#vec合并数据时防止出现拷贝的方法" class="headerlink" title="vec合并数据时防止出现拷贝的方法"></a>vec合并数据时防止出现拷贝的方法</h1><p>当结构体中使用Vec<u8>在头部插入一个新的Vec<u8>数据时可以通过mem::replace方法来减少数据的拷贝。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::mem;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Myvec</span></span> &#123;<br>    data: <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">u8</span>&gt;,<br>    count: <span class="hljs-built_in">usize</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> Myvec &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">new</span></span>() -&gt; Myvec &#123;<br>        Myvec &#123;<br>            data : <span class="hljs-built_in">Vec</span>::new(),<br>            count : <span class="hljs-number">0</span>,<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">append</span></span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, d:&amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">u8</span>&gt;) &#123;<br>        <span class="hljs-keyword">self</span>.data.append(d);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">pre_insert</span></span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, d:<span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">u8</span>&gt;) &#123;<br>    <span class="hljs-comment">// 使用replace 逆向实现数据的插入，防止clone数据</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> old = mem::replace(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>.data, d);<br>        <span class="hljs-keyword">self</span>.data.append(&amp;<span class="hljs-keyword">mut</span> old);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">push</span></span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, u:<span class="hljs-built_in">u8</span>) &#123;<br>        <span class="hljs-keyword">self</span>.data.push(u);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">print</span></span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;data&#123;:#?&#125;&quot;</span>, <span class="hljs-keyword">self</span>.data);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v1 = Myvec::new();<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v2:<span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">u8</span>&gt; = <span class="hljs-built_in">Vec</span>::new();<br>    v2.push(<span class="hljs-number">3</span>);<br>    v2.push(<span class="hljs-number">4</span>);<br>    v1.push(<span class="hljs-number">1</span>);<br>    v1.push(<span class="hljs-number">2</span>);<br>    v1.pre_insert(v2);<br>    v1.print();<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="打印变量地址"><a href="#打印变量地址" class="headerlink" title="打印变量地址"></a>打印变量地址</h1><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>()&#123;<br>    <span class="hljs-keyword">let</span> a:<span class="hljs-built_in">i32</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-comment">//&amp;a先转成raw指针，然后再把指针转成usize，这个可以print的</span><br>    <span class="hljs-keyword">let</span> addr = &amp;a <span class="hljs-keyword">as</span> *<span class="hljs-keyword">const</span> <span class="hljs-built_in">i32</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">usize</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;addr：0x&#123;:X&#125;&quot;</span>,addr);<br><br>    <span class="hljs-comment">//为了验证刚才的地址是不是正确的，我们修改这个指针指向的数据</span><br>    <span class="hljs-comment">//pa就是addr对应的raw指针</span><br>    <span class="hljs-keyword">let</span> pa = addr <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-built_in">i32</span>;<br>    <span class="hljs-comment">//解引用，*pa其实就是&amp;mut a了，给他赋值100</span><br>    <span class="hljs-keyword">unsafe</span>&#123;*pa = <span class="hljs-number">100</span>&#125;;<br><br>    <span class="hljs-comment">//打印a，可以看到a已经变成100了</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;value:&#123;&#125;&quot;</span>,a);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="打印变量T的类型"><a href="#打印变量T的类型" class="headerlink" title="打印变量T的类型"></a>打印变量T的类型</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">fn print_type_of&lt;T&gt;(_: &amp;T) &#123;<br>    println!(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, std::any::type_name::&lt;T&gt;<span class="hljs-literal">()</span>)<br>&#125;<br>fn main<span class="hljs-literal">()</span> &#123;<br>    <span class="hljs-keyword">let</span> s = String::from(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-built_in">bytes</span> = s.into<span class="hljs-constructor">_bytes()</span>;<br>    assert_eq!(&amp;<span class="hljs-literal">[<span class="hljs-number">104</span>, <span class="hljs-number">101</span>, <span class="hljs-number">108</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>]</span><span class="hljs-literal">[..]</span>, &amp;<span class="hljs-built_in">bytes</span><span class="hljs-literal">[..]</span>);<br>    print<span class="hljs-constructor">_type_of(&amp;<span class="hljs-params">bytes</span>)</span>;<br>    <span class="hljs-keyword">let</span> mut mb = <span class="hljs-built_in">bytes</span>;<br>    print<span class="hljs-constructor">_type_of(&amp;<span class="hljs-params">mb</span>)</span>;<br>    print<span class="hljs-constructor">_type_of(&amp;<span class="hljs-params">mut</span> <span class="hljs-params">mb</span>)</span>;<br>    <span class="hljs-keyword">let</span> mut x = &amp;mut mb;<br>    print<span class="hljs-constructor">_type_of(&amp;<span class="hljs-params">x</span>)</span>;<br>    <span class="hljs-keyword">let</span> y = &amp;mut x;<br>    print<span class="hljs-constructor">_type_of(&amp;<span class="hljs-params">y</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="同一个crate内-不同lib或程序间的引用"><a href="#同一个crate内-不同lib或程序间的引用" class="headerlink" title="同一个crate内 不同lib或程序间的引用"></a>同一个crate内 不同lib或程序间的引用</h1><p>在同一个大型项目中，可能会建立多个lib，有时候想要以外部调用库的方式测试其中的某个lib的某项功能，这时怎么修改Cargo.toml文件引用工程内的某个lib？<br>答案是修改Cargo.toml 文件中的[dependencies]</p><p>参考arnl/test_simple/test_redis/Cargo.toml</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[package]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;test_redis&quot;</span><br><span class="hljs-attr">version</span> = <span class="hljs-string">&quot;0.1.0&quot;</span><br><span class="hljs-attr">authors</span> = [<span class="hljs-string">&quot;wanghaibin &lt;wanghaibin@qiyi.com&gt;&quot;</span>]<br><span class="hljs-attr">edition</span> = <span class="hljs-string">&quot;2018&quot;</span><br><br><span class="hljs-comment"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span><br><br><span class="hljs-section">[dependencies]</span><br><span class="hljs-attr">redis</span> = &#123; path = <span class="hljs-string">&quot;../../src/libredis/&quot;</span> &#125;<br><br></code></pre></td></tr></table></figure><p>在非tests目录下的测试程序arnl/test_simple/test_redis/src内容如下</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> redis::&#123;redis_string, redis_client&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> stream = redis_client::RedisClient::new(<span class="hljs-string">&quot;127.0.0.1:6379&quot;</span>, &amp;<span class="hljs-number">0</span>, &amp;<span class="hljs-number">3</span>).unwrap();<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> rstr = redis_string::RedisString::new(&amp;<span class="hljs-keyword">mut</span> stream);<br>    <span class="hljs-keyword">let</span> key = <span class="hljs-string">&quot;incrbyfloat_test&quot;</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;xxxx=&#123;:#?&#125;&quot;</span>,rstr.incrbyfloat(key, <span class="hljs-number">2.1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="有趣的所有权问题问题"><a href="#有趣的所有权问题问题" class="headerlink" title="有趣的所有权问题问题"></a>有趣的所有权问题问题</h1><p>代码1</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">let</span> first = &amp;v[<span class="hljs-number">0</span>];<br>    v.push(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Hello, world!, first=&#123;&#125;&quot;</span>, first);<br>&#125;<br></code></pre></td></tr></table></figure><p>代码2</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">let</span> first = &amp;v[<span class="hljs-number">0</span>];<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Hello, world!, first=&#123;&#125;&quot;</span>, first);<br>    v.push(<span class="hljs-number">5</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上述<code>代码1</code>会编译报错，提示<code>error[E0502]: cannot borrow </code>v<code> as mutable because it is also borrowed as immutable</code></p><p>而<code>代码2</code>却可以正常编译通过，为什么那？</p><p>个人认为这正是rust在在编译期发现问题的优点之一，代码1报借用和可变借用同时存在错误，是因为在print的时候使用first，这时进行所有权规则检查，发现了E0502错误。而<code>代码2</code>为什么没有报错，是因为在编译时，运行到print进行所有权检测，此时还没有发生所有权问题，而在检测后续的push时first已经没有任何引用或使用，所以相关所有权规则没有问题</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rust 宏</title>
    <link href="/2020/07/31/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/02Rust/rust%20%E5%AE%8F/"/>
    <url>/2020/07/31/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/02Rust/rust%20%E5%AE%8F/</url>
    
    <content type="html"><![CDATA[<p>rust的宏分为两个种，一种为声明宏，另外一种为过程宏；</p><p>过程宏主要用于扩展和继承又分为三种</p><div class="code-wrapper"><pre><code class="hljs">- 自定义 #[derive] 宏在结构体和枚举上指定通过 derive 属性添加的代码- 类属性（Attribute）宏定义可用于任意项的自定义属性- 类函数宏看起来像函数不过作用于作为参数传递的 token</code></pre></div><p>本文来自《rust primer》，重点介绍声明宏(或叫示例宏)的使用方法和规则</p><h1 id="1-声明宏-简介"><a href="#1-声明宏-简介" class="headerlink" title="1. 声明宏 简介"></a>1. 声明宏 简介</h1><p>学过 C 语言的人都知道 #define 用来定义宏(macro)，而且大学很多老师都告诉你尽量少用宏，因为 C 里面的宏是一个很危险的东西-宏仅仅是简单的文本替换，完全不管语法，类型，非常容易出错。听说过或用过 Lisp 的人觉得宏极其强大，就连美国最大的创业孵化器公司创始人 Paul Gram 也极力鼓吹 Lisp 的宏是有多么强大。那么宏究竟是什么样的东西呢？这一章通过 Rust 的宏系统带你揭开宏(Macro)的神秘面纱。</p><p>Rust 中的宏几乎无处不在，其实你写的第一个 Rust 程序里面就已经用到了宏，对，就是那个有名的 hello-world。println!(“Hello, world!”) 这句看起来很像函数调用，但是在”函数名”后面加上了感叹号，这个是专门用来区分普通函数调用和宏调用的。另外从形式上看，与函数调用的另一个区别是参数可以用圆括号(())、花括号({})、方括号([])中的任意一种括起来，比如这行也可以写成 println![“Hello, world!”] 或 println!{“Hello, world!”}，不过对于 Rust 内置的宏都有约定俗成的括号，比如 vec! 用方括号，assert_eq! 用圆括号。</p><p>既然宏看起来与普通函数非常像，那么使用宏有什么好处呢？是否可以用函数取代宏呢？答案显然是否定的，首先 Rust 的函数不能接受任意多个参数，其次函数是不能操作语法单元的，即把语法元素作为参数进行操作，从而生成代码，例如 mod, crate 这些是 Rust 内置的关键词，是不可能直接用函数去操作这些的，而宏就有这个能力。</p><p>相比函数，宏是用来生成代码的，在调用宏的地方，编译器会先将宏进行展开，生成代码，然后再编译展开后的代码。</p><p>声明宏定义格式是： <code>macro_rules! macro_name &#123; macro_body &#125;</code>，其中 macro_body 与模式匹配很像， <code>pattern =&gt; do_something</code> ，所以 Rust 的宏又称为 Macro by example (基于例子的宏)。其中 pattern 和 do_something 都是用配对的括号括起来的，括号可以是圆括号、方括号、花括号中的任意一种。匹配可以有多个分支，每个分支以分号结束。</p><p>还是先来个简单的例子说明</p><figure class="highlight elixir"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs elixir">macro_rules! create_function &#123;<br>    (<span class="hljs-variable">$func_name</span><span class="hljs-symbol">:ident</span>) =&gt;; (<br>        <span class="hljs-keyword">fn</span> <span class="hljs-variable">$func_name</span>() &#123;<br>            println!(<span class="hljs-string">&quot;function &#123;:?&#125; is called&quot;</span>, stringify!(<span class="hljs-variable">$func_name</span>))<br>        &#125;<br>    )<br>&#125;<br><br><span class="hljs-keyword">fn</span> main() &#123;<br>    create_function!(foo);<br>    foo();<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这个简单的例子是用来创建函数，生成的函数可以像普通函数一样调用，这个函数可以打印自己的名字。编译器在看到 <code>create_function!(foo)</code> 时会从前面去找一个叫 <code>create_function</code> 的宏定义，找到之后，就会尝试将参数 <code>foo</code> 代入 <code>macro_body</code>，对每一条模式按顺序进行匹配，只要有一个匹配上，就会将 =&gt; 左边定义的参数代入右边进行替换，如果替换不成功，编译器就会报错而不会往下继续匹配，替换成功就会将右边替换后的代码放在宏调用的地方。这个例子中只有一个模式，即 <code>$func_name:ident</code>，表示匹配一个标识符，如果匹配上就把这个标识符赋值给 <code>$func_name</code>，宏定义里面的变量都是以 $ 开头的，相应的类型也是以冒号分隔说明，这里 ident 是变量 $func_name 的类型，表示这个变量是一个 <code>identifier</code>，这是语法层面的类型(designator)，而普通的类型如 <code>char, &amp;str, i32, f64</code> 这些是语义层面的类型。在 <code>main</code> 函数中传给宏调用 <code>create_function</code> 的参数 <code>foo</code> 正好是一个标识符(ident)，所以能匹配上  ，<code>$func_name</code> 就等于 foo，然后把 $func_name 的值代入 =&gt; 右边，成了下面这样的</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">foo</span></span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;function &#123;:?&#125; is called&quot;</span>, <span class="hljs-built_in">stringify!</span>(foo))<br>&#125;<br></code></pre></td></tr></table></figure><p>所以最后编译器编译的实际代码是</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">fn</span> <span class="hljs-selector-tag">main</span>() &#123;<br>    <span class="hljs-selector-tag">fn</span> <span class="hljs-selector-tag">foo</span>() &#123;<br>        <span class="hljs-selector-tag">println</span>!(<span class="hljs-string">&quot;function &#123;:?&#125; is called&quot;</span>, stringify!(foo))<br>    &#125;<br>    <span class="hljs-selector-tag">foo</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>上面定义了 <code>create_function</code> 这个宏之后，就可以随便用来生成函数了，比如调用 <code>create_function!(bar)</code> 就得到了一个名为 bar 的函数</p><p>通过上面这个例子，大家对宏应该有一个大致的了解了。下面就具体谈谈宏的各个组成部分。</p><h1 id="2-宏的结构"><a href="#2-宏的结构" class="headerlink" title="2. 宏的结构"></a>2. 宏的结构</h1><h2 id="2-1-宏名"><a href="#2-1-宏名" class="headerlink" title="2.1 宏名"></a>2.1 宏名</h2><p>宏名字的解析与函数略微有些不同，宏的定义必须出现在宏调用之前，即与 C 里面的函数类似–函数定义或声明必须在函数调用之前，只不过 Rust 宏没有单纯的声明，所以宏在调用之前需要先定义，而 Rust 函数则可以定义在函数调用后面。宏调用与宏定义顺序相关性包括从其它模块中引入的宏，所以引入其它模块中的宏时要特别小心，这个稍后会详细讨论。</p><p>下面这个例子宏定义在宏调用后面，编译器会报错说找不到宏定义，而函数则没问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fn <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">42</span>;<br>    foo(a);<br>    bar!(a);<br>&#125;<br><br>fn <span class="hljs-function"><span class="hljs-title">foo</span>(<span class="hljs-params">x: i32</span>)</span> &#123;<br>    println!(<span class="hljs-string">&quot;The argument you passed to function is &#123;&#125;&quot;</span>, x);<br>&#125;<br><br>macro_rules! bar &#123;<br>    <span class="hljs-function">(<span class="hljs-params">$x:ident</span>) =&gt;</span> &#123; println!(<span class="hljs-string">&quot;The argument you passed to macro is &#123;&#125;&quot;</span>, $x); &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面例子中把宏定义挪到 <code>main</code> 函数之前或者 <code>main</code> 函数里面 <code>bar!(a)</code> 调用上面，就可以正常编译运行。</p><p>宏调用虽然与函数调用很像，但是宏的名字与函数名字是处于不同命名空间的，之所以提出来是因为在有些编程语言里面宏和函数是在同一个命名空间之下的。看过下面的例子就会明白</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sas">fn foo(<span class="hljs-meta">x</span>: i32) -<span class="hljs-variable">&amp;gt</span>; i32 &#123;<br>    <span class="hljs-meta">x</span> <span class="hljs-comment">* x</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">macro_rules! foo &#123;</span><br><span class="hljs-comment">    ($x:ident) =&amp;gt;</span> &#123; println!(<span class="hljs-variable">&amp;quot</span>;&#123;:?&#125;<span class="hljs-variable">&amp;quot</span>;, $<span class="hljs-meta">x</span>); &#125;<br>&#125;<br>fn ma<span class="hljs-meta">in(</span>) &#123;<br>    let a = 5;<br>    foo!(a);<br>    println!(<span class="hljs-variable">&amp;quot</span>;&#123;&#125;<span class="hljs-variable">&amp;quot</span>;, foo(a));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-指示符-designator"><a href="#2-2-指示符-designator" class="headerlink" title="2.2 指示符(designator)"></a>2.2 指示符(designator)</h2><p>宏里面的变量都是以$开头的，其余的都是按字面去匹配，以 $ 开头的变量都是用来表示语法(syntactic)元素，为了限定匹配什么类型的语法元素，需要用指示符(designator)加以限定，就跟普通的变量绑定一样用冒号将变量和类型分开，当前宏支持以下几种指示符：</p><ul><li>ident: 标识符，用来表示函数或变量名</li><li>expr: 表达式</li><li>block: 代码块，用花括号包起来的多个语句</li><li>pat: 模式，普通模式匹配（非宏本身的模式）中的模式，例如<code>Some(t), (3, &#39;a&#39;, _)</code></li><li>path: 路径，注意这里不是操作系统中的文件路径，而是用双冒号分隔的限定名(qualified name)，如<code>std::cmp::PartialOrd</code></li><li>tt: 单个语法树</li><li>ty: 类型，语义层面的类型，如 <code>i32, char</code></li><li>item: 条目，</li><li>meta: 元条目</li><li>stmt: 单条语句，如 <code>let a = 42;</code><br>加上这些类型限定后，宏在进行匹配时才不会漫无目的的乱匹配，例如在要求标识符的地方是不允许出现表达式的，否则编译器就会报错。而 C/C++ 语言中的宏则仅仅是简单的文本替换，没有语法层面的考虑，所以非常容易出错。</li></ul><h2 id="2-3-重复-repetition"><a href="#2-3-重复-repetition" class="headerlink" title="2.3 重复(repetition)"></a>2.3 重复(repetition)</h2><p>宏相比函数一个很大的不同是宏可以接受任意多个参数，例如 <code>println!</code> 和 <code>vec!</code>。这是怎么做到的呢？</p><p>没错，就是重复(repetition)。模式的重复不是通过程序里面的循环(for/while)去控制的，而是指定了两个特殊符号 <code>+</code> 和 <code>*</code>，类似于正则表达式，因为正则表达式也是不关心具体匹配对象是一个人名还是一个国家名。与正则表达式一样, <code>+</code> 表示一次或多次（至少一次），而<code>* </code>表示零次或多次。重复的模式需要用括号括起来，外面再加上 $，例如 <code> $(...)*</code>, <code>$(...)+</code>。需要说明的是这里的括号和宏里面其它地方一样都可以是三种括号中的任意一种，因为括号在这里仅仅是用来标记一个模式的开始和结束，大部分情况重复的模式是用逗号或分号分隔的，所以你会经常看到 <code>$(...),*</code>, <code>$(...);*</code>, <code>$(...),+</code>, <code>$(...);+</code> 这样的用来表示重复。</p><p>还是来看一个例子</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">macro_rules! vector &#123;<br>   <span class="hljs-function"> (<span class="hljs-params">$</span>(<span class="hljs-params">$x</span>:<span class="hljs-params">expr</span>),*) =&gt;</span> &#123;<br>        &#123;<br>            <span class="hljs-keyword">let</span> mut temp_vec = Vec::<span class="hljs-keyword">new</span><span class="hljs-literal">()</span>;<br>            <span class="hljs-constructor">$(<span class="hljs-params">temp_vec</span>.<span class="hljs-params">push</span>($<span class="hljs-params">x</span>)</span>;)*<br>            temp_vec<br>        &#125;<br>    &#125;;<br>&#125;<br><br>fn main<span class="hljs-literal">()</span> &#123;<br>    <span class="hljs-keyword">let</span> a = vector!<span class="hljs-literal">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>]</span>;<br>    println!(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, a);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子初看起来比较复杂，我们来分析一下。</p><p>首先看 <code>=&gt;</code>左边，最外层是圆括号，前面说过这个括号可以是圆括号、方括号、花括号中的任意一种，只要是配对的就行。然后再看括号里面 <code>$(...),*</code> 正是刚才提到的重复模式，重复的模式是用逗号分隔的，重复的内容是 <code>$x:expr</code>，即可以匹配零次或多次用逗号分隔的表达式，例如 <code>vector![]</code> 和 <code>vector![3, x*x, s-t]</code> 都可以匹配成功。</p><p>接着看 <code>=&gt;</code> 右边，最外层也是一个括号，末尾是分号表示这个分支结束。里面是花括号包起来的代码块，最后一行没有分号，说明这个 macro 的值是一个表达式，<code>temp_vec</code> 作为表达式的值返回。第一条语句就是普通的用 <code>Vec::new()</code> 生成一个空 <code>vector</code>，然后绑定到可变的变量 <code>temp_vec</code> 上面，第二句比较特殊，跟 <code>=&gt;</code> 左边差不多，也是用来表示重复的模式，而且是跟左边是一一对应的，即左边匹配到一个表达式(<code>expr</code>)，这里就会将匹配到的表达式用在 <code>temp_vec.push($x);</code> 里面，所以 <code>vector![3, x*x, s-t]</code> 调用就会展开成</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;<br>    let mut temp_vec = Vec::new()<span class="hljs-comment">;</span><br>    temp_vec.push(<span class="hljs-number">3</span>)<span class="hljs-comment">;</span><br>    temp_vec.push(<span class="hljs-name">x*x</span>)<span class="hljs-comment">;</span><br>    temp_vec.push(<span class="hljs-name">s-t</span>)<span class="hljs-comment">;</span><br>    temp_vec<br>&#125;<br></code></pre></td></tr></table></figure><p>看着很复杂的宏，细细分析下来是不是很简单，不要被这些符号干扰了</p><h2 id="2-4-递归-recursion"><a href="#2-4-递归-recursion" class="headerlink" title="2.4 递归(recursion)"></a>2.4 递归(recursion)</h2><p>除了重复之外，宏还支持递归，即在宏定义时调用其自身，类似于递归函数。因为rust的宏本身是一种模式匹配，而模式匹配里面包含递归则是函数式语言里面最常见的写法了，有函数式编程经验的对这个应该很熟悉。下面看一个简单的例子：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs elixir">macro_rules! find_min &#123;<br>    (<span class="hljs-variable">$x</span><span class="hljs-symbol">:expr</span>) =&gt; (<span class="hljs-variable">$x</span>);<br>    (<span class="hljs-variable">$x</span><span class="hljs-symbol">:expr</span>, <span class="hljs-variable">$(</span><span class="hljs-variable">$y</span><span class="hljs-symbol">:expr</span>),+) =&gt; (<br>        std::cmp::min(<span class="hljs-variable">$x</span>, find_min!(<span class="hljs-variable">$(</span><span class="hljs-variable">$y</span>),+))<br>    )<br>&#125;<br><br><span class="hljs-keyword">fn</span> main() &#123;<br>    println!(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, find_min!(<span class="hljs-number">1</span>u32));<br>    println!(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, find_min!(<span class="hljs-number">1</span>u32 + <span class="hljs-number">2</span> , <span class="hljs-number">2</span>u32));<br>    println!(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, find_min!(<span class="hljs-number">5</span>u32, <span class="hljs-number">2</span>u32 * <span class="hljs-number">3</span>, <span class="hljs-number">4</span>u32));<br>&#125;<br></code></pre></td></tr></table></figure><p>因为模式匹配是按分支顺序匹配的，一旦匹配成功就不会再往下进行匹配（即使后面也能匹配上），所以模式匹配中的递归都是在第一个分支里写最简单情况，越往下包含的情况越多。这里也是一样，第一个分支     <code>($x:expr)</code> 只匹配一个表达式，第二个分支匹配两个或两个以上表达式，注意加号表示匹配一个或多个，然后里面是用标准库中的 min 比较两个数的大小，第一个表达式和剩余表达式中最小的一个，其中剩余表达式中最小的一个是递归调用 <code>find_min!</code> 宏，与递归函数一样，每次递归都是从上往下匹配，只到匹配到基本情况。我们来写写 <code>find_min!(5u32, 2u32 * 3, 4u32)</code> 宏展开过程</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">std</span>::cmp::min(<span class="hljs-number">5</span>u<span class="hljs-number">32</span>, find_min!(<span class="hljs-number">2</span>u<span class="hljs-number">32</span> * <span class="hljs-number">3</span>, <span class="hljs-number">4</span>u<span class="hljs-number">32</span>))<br><span class="hljs-attribute">std</span>::cmp::min(<span class="hljs-number">5</span>u<span class="hljs-number">32</span>, std::cmp::min(<span class="hljs-number">2</span>u<span class="hljs-number">32</span> * <span class="hljs-number">3</span>, find_min!(<span class="hljs-number">4</span>u<span class="hljs-number">32</span>)))<br><span class="hljs-attribute">std</span>::cmp::min(<span class="hljs-number">5</span>u<span class="hljs-number">32</span>, std::cmp::min(<span class="hljs-number">2</span>u<span class="hljs-number">32</span> * <span class="hljs-number">3</span>, <span class="hljs-number">4</span>u<span class="hljs-number">32</span>))<br></code></pre></td></tr></table></figure><p>分析起来与递归函数一样，也比较简单。</p><h2 id="2-5-卫生宏-hygienic-Macro"><a href="#2-5-卫生宏-hygienic-Macro" class="headerlink" title="2.5 卫生宏(hygienic Macro)"></a>2.5 卫生宏(hygienic Macro)</h2><p>有了重复和递归，组合起来就是一个很强大的武器，可以解决很多普通函数无法抽象的东西。但是这里面会有一个安全问题，也是 C/C++ 里面宏最容易出错的地方，不过 Rust 像 Scheme 一样引入了卫生(Hygiene)宏，有效地避免了这类问题的发生。</p><p>C/C++ 里面的宏仅仅是简单的文本替换，下面的 C 经过宏预处理后，宏外面定义的变量 a 就会与里面定义的混在一起，从而按作用域 shadow 外层的定义，这会导致一些非常诡异的问题，不去看宏具体定义仔细分析的话，很难发现这类 bug。这样的宏是不卫生的，不过也有些奇葩的 Hacker 觉得这是一个非常棒的特性，例如 CommanLisp 语言里面的宏本身很强大，但不是卫生的，而某些 Hacker 还以这个为傲，搞一些奇技淫巧故意制造出这样的 shadow 行为实现一些很 fancy 的效果。这里不做过多评论，对 C 比较熟悉的同学可以分析一下下面这段代码运行结果与第一印象是否一样。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#define <span class="hljs-constructor">INCI(<span class="hljs-params">i</span>)</span> &#123;<span class="hljs-built_in">int</span> a=<span class="hljs-number">0</span>; ++i;&#125;<br><span class="hljs-built_in">int</span> main(void)<br>&#123;<br>    <span class="hljs-built_in">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>;<br>    <span class="hljs-constructor">INCI(<span class="hljs-params">a</span>)</span>;<br>    <span class="hljs-constructor">INCI(<span class="hljs-params">b</span>)</span>;<br>    printf(<span class="hljs-string">&quot;a is now %d, b is now %d\n&quot;</span>, a, b);<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>卫生宏最开始是由 Scheme 语言引入的，后来好多语言基本都采用卫生宏，即编译器或运行时会保证宏里面定义的变量或函数不会与外面的冲突，在宏里面以普通方式定义的变量作用域不会跑到宏外面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">macro_rules! foo &#123;<br>    <span class="hljs-function">() =&gt;</span> (<span class="hljs-keyword">let</span> x = <span class="hljs-number">3</span>);<br>&#125;<br><br>macro_rules! bar &#123;<br>    <span class="hljs-function">(<span class="hljs-params">$v:ident</span>) =&gt;</span> (<span class="hljs-keyword">let</span> $v = <span class="hljs-number">3</span>);<br>&#125;<br><br>fn <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span> &#123;<br>    foo!();<br>    println!(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, x);<br>    bar!(a);<br>    println!(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, a);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码中宏 foo! 里面的变量 x 是按普通方式定义的，所以其作用域限定在宏里面，宏调用结束后再引用 x 编译器就会报错。要想让宏里面定义的变量在宏调用结束后仍然有效，需要按 <code>bar!</code> 里面那样定义。不过对于 <code>item</code> 规则就有些不同，例如函数在宏里面以普通方式定义后，宏调用之后，这个函数依然可用，下面代码就可以正常编译。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">macro_rules! foo &#123;<br>    <span class="hljs-function">() =&gt;</span> (fn <span class="hljs-function"><span class="hljs-title">x</span>(<span class="hljs-params"></span>)</span> &#123; &#125;);<br>&#125;<br><br>fn <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span> &#123;<br>    foo!();<br>    x();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-6-导入导出-import-export"><a href="#2-6-导入导出-import-export" class="headerlink" title="2.6 导入导出(import/export)"></a>2.6 导入导出(import/export)</h2><p>前面提到宏名是按顺序解析的，所以从其它模块中导入宏时与导入函数、trait 的方式不太一样，宏导入导出用 #[macro_use] 和 #[macro_export]。父模块中定义的宏对其下的子模块是可见的，要想子模块中定义的宏在其后面的父模块中可用，需要使用 #[macro_use]。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs gcode">macro_rules! <span class="hljs-name">m1</span> &#123; <span class="hljs-comment">()</span> =&gt; <span class="hljs-comment">(()</span>) &#125;<br><br><span class="hljs-comment">// 宏 m1 在这里可用</span><br><br>mod foo &#123;<br>    <span class="hljs-comment">// 宏 m1 在这里可用</span><br><br>    <span class="hljs-attr">#[macro_export]</span><br><span class="hljs-attr">    macro_rules! m2</span> &#123; <span class="hljs-comment">()</span> =&gt; <span class="hljs-comment">(()</span>) &#125;<br><br>    <span class="hljs-comment">// 宏 m1 和 m2 在这里可用</span><br>&#125;<br><br><span class="hljs-comment">// 宏 m1 在这里可用</span><br><span class="hljs-attr">#[macro_export]</span><br><span class="hljs-attr">macro_rules! m3</span> &#123; <span class="hljs-comment">()</span> =&amp;<span class="hljs-keyword">gt</span>; <span class="hljs-comment">(()</span>) &#125;<br><br><span class="hljs-comment">// 宏 m1 和 m3 在这里可用</span><br><br><span class="hljs-attr">#[macro_use]</span><br><span class="hljs-attr">mod bar &#123;</span><br><span class="hljs-attr">    // 宏 m1</span> 和 <span class="hljs-name">m3</span> 在这里可用<br><br>    macro_rules! <span class="hljs-name">m4</span> &#123; <span class="hljs-comment">()</span> =&amp;<span class="hljs-keyword">gt</span>; <span class="hljs-comment">(()</span>) &#125;<br><br>    <span class="hljs-comment">// 宏 m1, m3, m4 在这里均可用</span><br>&#125;<br><span class="hljs-comment">// 宏 m1, m3, m4 均可用</span><br></code></pre></td></tr></table></figure><p>crate 之间只有被标为 <code>#[macro_export]</code> 的宏可以被其它 crate 导入。假设上面例子是 <code>foo</code> crate 中的部分代码，则只有 <code>m2</code> 和 <code>m3</code> 可以被其它 crate 导入。导入方式是在 <code>extern crate foo;</code> 前面加上 <code>#[macro_use]</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[macro_use]</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">crate</span> foo;<br><span class="hljs-comment">// foo 中 m2, m3 都被导入</span><br></code></pre></td></tr></table></figure><p>如果只想导入 <code>foo crate</code> 中某个宏，比如 <code>m3</code>，就给 <code>#[macro_use] </code>加上参数</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[macro_use(m3)]</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">crate</span> foo;<br><span class="hljs-comment">// foo 中只有 m3 被导入</span><br></code></pre></td></tr></table></figure><h2 id="2-7-调试"><a href="#2-7-调试" class="headerlink" title="2.7 调试"></a>2.7 调试</h2><p>虽然宏功能很强大，但是调试起来要比普通代码困难，因为编译器默认情况下给出的提示都是对宏展开之后的，而不是你写的原程序，要想在编译器错误与原程序之间建立联系比较困难，因为这要求你大脑能够人肉编译展开宏代码。不过还好编译器为我们提供了 <code>--pretty=expanded</code> 选项，能让我们看到展开后的代码，通过这个展开后的代码，往上靠就与你自己写的原程序有个直接对应关系，往下靠与编译器给出的错误也是直接对应关系。</p><p>目前将宏展开需要使用 <code>unstable option</code>，通过 <code>rustc -Z unstable-options --pretty=expanded hello.rs</code> 可以查看宏展开后的代码，如果是使用的 cargo 则通过 <code>cargo rustc -- -Z unstable-options --pretty=expanded</code> 将项目里面的宏都展开。不过目前是没法只展开部分宏的，而且由于 hygiene 的原因，会对宏里面的名字做些特殊的处理(mangle)，所以程序里面的宏全部展开后代码的可读性比较差，不过依然比依靠大脑展开靠谱。</p><p>下面可以看看最简单的 <code>hello-word</code> 程序里面的 <code>println!(&quot;Hello, world!&quot;)</code> 展开结果，为了 hygiene 这里内部临时变量用了 <code>__STATIC_FMTSTR</code> 这样的名字以避免名字冲突，即使这简单的一句展开后看起来也还是不那么直观的，具体这里就不详细分析了。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust">$ rustc -Z unstable-options --pretty expanded hello.rs<br><span class="hljs-meta">#![feature(prelude_import)]</span><br><span class="hljs-meta">#![no_std]</span><br><span class="hljs-meta">#[prelude_import]</span><br><span class="hljs-keyword">use</span> std::prelude::v1::*;<br><span class="hljs-meta">#[macro_use]</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">crate</span> std <span class="hljs-keyword">as</span> std;<br><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;<br>    ::std::io::_print(::std::fmt::Arguments::new_v1(&#123;<br>                                                        <span class="hljs-keyword">static</span> __STATIC_FMTSTR:<br>                                                               &amp;<span class="hljs-symbol">&#x27;static</span> [&amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-built_in">str</span>]<br>                                                               =<br>                                                            &amp;[<span class="hljs-string">&quot;Hello, world!\n&quot;</span>];<br>                                                        __STATIC_FMTSTR<br>                                                    &#125;,<br>                                                    &amp;<span class="hljs-keyword">match</span> () &#123; () =&gt; [], &#125;));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo使用方法</title>
    <link href="/2020/07/30/06%E6%9D%82%E9%A1%B9/01hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2020/07/30/06%E6%9D%82%E9%A1%B9/01hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行-server"><a href="#运行-server" class="headerlink" title="运行 server"></a>运行 server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到远端"><a href="#部署到远端" class="headerlink" title="部署到远端"></a>部署到远端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h1 id="Hexo的升级"><a href="#Hexo的升级" class="headerlink" title="Hexo的升级"></a>Hexo的升级</h1><p>全局升级hexo-cli，先hexo version查看当前版本，然后npm install -g hexo-cli，再次hexo version查看是否升级成功。如果hexo不能直接识别运行，改为npx hexo。</p><ul><li>使用npm-check，检查系统中的插件是否有升级的。</li><li>使用npm-upgrade，升级系统中的相关插件。</li><li>npm update -g，检查升级npm本身。<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g hexo-cli<br>hexo version<br><br><span class="hljs-built_in">npm</span> install -g <span class="hljs-built_in">npm</span>-check<br><span class="hljs-built_in">npm</span>-check<br><br><span class="hljs-built_in">npm</span> install -g <span class="hljs-built_in">npm</span>-upgrade<br><span class="hljs-built_in">npm</span>-upgrade<br><br><span class="hljs-built_in">npm</span> update -g<br><span class="hljs-built_in">npm</span> install -g <span class="hljs-built_in">npm</span><br><br>hexo clean <span class="hljs-comment">#清理hexo数据并重新生成页面并部署</span><br>hexo g -s<br>hexo d<br></code></pre></td></tr></table></figure>经过以上这些命令就可以了。</li></ul>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>awk常用方法</title>
    <link href="/2020/07/30/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/02awk%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2020/07/30/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/02awk%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="awk内建变量"><a href="#awk内建变量" class="headerlink" title="awk内建变量"></a>awk内建变量</h2><figure class="highlight gams"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$0</span> 当前记录（这个变量中存放着整个行的内容）</span><br><span class="hljs-meta"><span class="hljs-meta-keyword">$1</span>~$n 当前记录的第n个字段，字段间由FS分隔</span><br>FS 输入字段分隔符 默认是空格或Tab<br>NF 当前记录中的字段个数，就是有多少列 ,<span class="hljs-symbol">$</span>(NF-n)为倒数第n个字段<br>NR 已经读出的记录数，就是行号，从<span class="hljs-number">1</span>开始，如果有多个文件话，这个值也是不断累加中。<br>FNR 当前记录数，与NR不同的是，这个值会是各个文件自己的行号<br>RS 输入的记录分隔符， 默认为换行符<br>OFS 输出字段分隔符， 默认也是空格<br>ORS 输出的记录分隔符，默认为换行符<br>FILENAME 当前输入文件的名字<br></code></pre></td></tr></table></figure><h2 id="BEGIN-EDN语法"><a href="#BEGIN-EDN语法" class="headerlink" title="BEGIN EDN语法"></a>BEGIN EDN语法</h2><ul><li>BEGIN{ 这里面放的是执行前的语句 }</li><li>{这里面放的是处理每一行时要执行的语句}</li><li>END {这里面放的是处理完所有的行后要执行的语句 }<br>示例如下:<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#运行前</span><br>BEGIN &#123;<br>math = <span class="hljs-number">0</span><br>english = <span class="hljs-number">0</span><br>computer = <span class="hljs-number">0</span><br><span class="hljs-keyword">printf</span><span class="hljs-string">&quot;NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n&quot;</span>    <span class="hljs-keyword">printf</span><span class="hljs-string">&quot;---------------------------------------------\n&quot;</span><br>&#125;<br><span class="hljs-comment">#运行中</span><br>&#123;<br>math+=$3<br>english+=$4<br>computer+=$5<br><span class="hljs-keyword">printf</span><span class="hljs-string">&quot;%-6s %-6s %4d %8d %8d %8d\n&quot;</span>, $1, $2, $3,$4,$5, $3+$4+$5<br>&#125;<br><span class="hljs-comment">#运行后</span><br>END &#123;<br><span class="hljs-keyword">printf</span><span class="hljs-string">&quot;---------------------------------------------\n&quot;</span><br><span class="hljs-keyword">printf</span><span class="hljs-string">&quot;  TOTAL:%10d %8d %8d \n&quot;</span>, math, english, computer<br><span class="hljs-keyword">printf</span><span class="hljs-string">&quot;AVERAGE:%10.2f %8.2f %8.2f\n&quot;</span>, math/NR, english/NR, computer/NR<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><h4 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h4><p><code>cat data|awk &#39;&#123;sum+=$1&#125; END &#123;print &quot;Sum = &quot;, sum&#125;&#39;</code></p><h4 id="求平均"><a href="#求平均" class="headerlink" title="求平均"></a>求平均</h4><p><code>cat data|awk &#39;&#123;sum+=$1&#125; END &#123;print &quot;Average = &quot;, sum/NR&#125;&#39;</code></p><h4 id="求最大值"><a href="#求最大值" class="headerlink" title="求最大值"></a>求最大值</h4><p><code>cat data|awk &#39;BEGIN &#123;max = 0&#125; &#123;if ($1&gt;max) max=$1 fi&#125; END &#123;print &quot;Max=&quot;, max&#125;&#39;</code></p><h4 id="求最小值（min的初始值设置一个超大数即可）"><a href="#求最小值（min的初始值设置一个超大数即可）" class="headerlink" title="求最小值（min的初始值设置一个超大数即可）"></a>求最小值（min的初始值设置一个超大数即可）</h4><p><code>awk &#39;BEGIN &#123;min = 1999999&#125; &#123;if ($1&lt;min) min=$1 fi&#125; END &#123;print &quot;Min=&quot;, min&#125;&#39;</code></p><h4 id="求访问次数的Top-10-Resource，可以根据此进行优化"><a href="#求访问次数的Top-10-Resource，可以根据此进行优化" class="headerlink" title="求访问次数的Top 10 Resource，可以根据此进行优化"></a>求访问次数的Top 10 Resource，可以根据此进行优化</h4><p><code>cat output/logs/cookie_logs/</code>date +%u<code>/cookie_log|grep -v &#39;172.16&#39;|grep -v &#39;127.0.0.1&#39; |awk -F&#39; &#39;  &#39;&#123; if(index($1,&quot;219.141.246&quot;)!=0) print $2; else print $1  &#125; &#39;|sort|uniq -c|sort -n |tail -n 10</code></p><h4 id="求最大最小值"><a href="#求最大最小值" class="headerlink" title="求最大最小值"></a>求最大最小值</h4><p><code>cat 1.log | awk &#39;BEGIN &#123;max=0; min=1000&#125; &#123;sum +=$9; num +=1; if($9&gt;max) max=$9 fi; if($9&lt;min) min=$9 fi;&#125; END &#123;print &quot;avg=&quot;,sum/num, &quot;\nmax=&quot;,max, &quot;\nmin=&quot;, min&#125;&#39;</code></p><h4 id="awk中执行shell命令"><a href="#awk中执行shell命令" class="headerlink" title="awk中执行shell命令"></a>awk中执行shell命令</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stata">awk &#x27;&#123;cmd=<span class="hljs-string">&quot;rm &quot;</span><span class="hljs-variable">$0</span>;system(cmd)&#125;&#x27; filename ----OK<br>下面的也ok<br>awk &#x27;&#123;cmd=<span class="hljs-string">&quot;rm &quot;</span><span class="hljs-variable">$0</span>;cmd|getline &#125;&#x27; filename ---- OK<br><span class="hljs-keyword">man</span> awk里面关于getline的说明，大意是说 运行command，同时会把输出存在<span class="hljs-variable">$0</span> 里面，或参数<span class="hljs-keyword">var</span>中。<br><br>command | getline [<span class="hljs-keyword">var</span>]<br><span class="hljs-keyword">Run</span> command piping the output either into <span class="hljs-variable">$0</span> or <span class="hljs-keyword">var</span>, <span class="hljs-keyword">as</span> above.<br>command |&amp; getline [<span class="hljs-keyword">var</span>]<br><span class="hljs-keyword">Run</span> command <span class="hljs-keyword">as</span> a co-process piping the output either into <span class="hljs-variable">$0</span> or <span class="hljs-keyword">var</span>, <span class="hljs-keyword">as</span> above.<br>Co-processes are a gawk extension.<br>ps -ef |grep CipRouter | grep -v <span class="hljs-string">&quot;grep&quot;</span> | awk -F&#x27; &#x27; &#x27;&#123;cmd=<span class="hljs-string">&quot;ls /proc/&quot;</span><span class="hljs-variable">$2</span><span class="hljs-string">&quot;/fd/ | wc -l &quot;</span>;system(cmd); &#125;&#x27;|awk &#x27;&#123;num+=<span class="hljs-variable">$1&#125;</span> END &#123;<span class="hljs-keyword">print</span> <span class="hljs-string">&quot;sum= &quot;</span>,num&#125;&#x27;<br>或者<br>ps -ef |grep CipRouter | grep -v <span class="hljs-string">&quot;grep&quot;</span> | awk -F&#x27; &#x27; &#x27;&#123;cmd=<span class="hljs-string">&quot;ls /proc/&quot;</span><span class="hljs-variable">$2</span><span class="hljs-string">&quot;/fd/ | wc -l &quot;</span>;cmd|getline; <span class="hljs-keyword">sum</span>+=<span class="hljs-variable">$0</span>;&#125; END &#123;<span class="hljs-keyword">print</span> <span class="hljs-keyword">sum</span>&#125;&#x27; <br></code></pre></td></tr></table></figure><h4 id="awk-多个进程号转为数组"><a href="#awk-多个进程号转为数组" class="headerlink" title="awk 多个进程号转为数组"></a>awk 多个进程号转为数组</h4><p><code>aaa=(</code>ps -ef |grep xxx |grep -v grep |awk ‘{print $2}’<code>) echo &quot;$&#123;aaa[@]&#125;&quot;</code></p><h4 id="awk-F-特殊字符"><a href="#awk-F-特殊字符" class="headerlink" title="awk -F 特殊字符"></a>awk -F 特殊字符</h4><p><code>,\&quot;dn\&quot;:\&quot;baiducdnct.inter.iqiyi.com\&quot;   以&quot;dn\&quot;:\来分割，因为\为特殊字符，所以需要转义，每4个\为一个过滤\ awk -F&#39;dn\\\\&quot;:\\\\&#39; &#39;&#123;print $2&#125;&#39; </code></p><h4 id="awk-打印从某一列到最后一列的内容"><a href="#awk-打印从某一列到最后一列的内容" class="headerlink" title="awk 打印从某一列到最后一列的内容"></a>awk 打印从某一列到最后一列的内容</h4><p><code>awk -F &quot; &quot; &#39;&#123;for (i=2;i&lt;=NF;i++)printf(&quot;%s &quot;, $i);print &quot;&quot;&#125;&#39;</code></p>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
      <tag>awk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vimrc配置文件</title>
    <link href="/2020/07/30/04DevOps/03%20vimrc%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2020/07/30/04DevOps/03%20vimrc%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>用户根目录下~/.vimrc 配置文件内容</p><figure class="highlight 1c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></div></td><td class="code"><pre><code class="hljs 1c">set nu<br>set tabstop=<span class="hljs-number">4</span><br>set softtabstop=<span class="hljs-number">4</span><br>set shiftwidth=<span class="hljs-number">4</span><br>set expandtab<br>set cinoptions=g0<br>set colorcolumn=<span class="hljs-number">81</span><br>set fileencodings=ucs-bom,utf-<span class="hljs-number">8</span>,cp936,gb18030,big5,euc-jp,euc-kr,latin1<br>set nocompatible            <span class="hljs-string">&quot; 关闭 vi 兼容模式</span><br>syntax on                   <span class="hljs-string">&quot; 自动语法高亮</span><br><span class="hljs-string">&quot;set paste                   &quot;</span> 取消粘贴自动注释<br>set number                  <span class="hljs-string">&quot; 显示行号</span><br>set cursorline              <span class="hljs-string">&quot; 突出显示当前行</span><br>set ruler                   <span class="hljs-string">&quot; 打开状态栏标尺</span><br>set nobackup                <span class="hljs-string">&quot; 覆盖文件时不备份</span><br>set autochdir               <span class="hljs-string">&quot; 自动切换当前目录为当前文件所在的目录</span><br>filetype plugin indent on   <span class="hljs-string">&quot; 开启插件</span><br>set backupcopy=yes          <span class="hljs-string">&quot; 设置备份时的行为为覆盖</span><br>set hlsearch                <span class="hljs-string">&quot; 搜索时高亮显示被找到的文本</span><br>set noerrorbells            <span class="hljs-string">&quot; 关闭错误信息响铃</span><br>set novisualbell            <span class="hljs-string">&quot; 关闭使用可视响铃代替呼叫</span><br>set t_vb=                   <span class="hljs-string">&quot; 置空错误铃声的终端代码</span><br>set showmatch               <span class="hljs-string">&quot; 插入括号时，短暂地跳转到匹配的对应括号</span><br>set matchtime=<span class="hljs-number">1</span>             <span class="hljs-string">&quot; 短暂跳转到匹配括号的时间</span><br>set magic                   <span class="hljs-string">&quot; 设置魔术</span><br>set guioptions-=T           <span class="hljs-string">&quot; 隐藏工具栏</span><br>set guioptions-=m           <span class="hljs-string">&quot; 隐藏菜单栏</span><br>set completeopt=menu        <span class="hljs-string">&quot; 关闭scratch 预览窗口</span><br>set backspace=indent,eol,start<br>set cmdheight=<span class="hljs-number">1</span>             <span class="hljs-string">&quot; 设定命令行的行数为</span><br>set t_Co=<span class="hljs-number">256</span>                <span class="hljs-string">&quot; 让xshell 也支持vim的256色配色方案</span><br>set nomodeline              <span class="hljs-string">&quot; 关闭 model</span><br>set tags=./.tags;,.tags<br><span class="hljs-string">&quot; set tags+=../.tag</span><br><span class="hljs-string">&quot; set tags+=../../.tag</span><br><span class="hljs-string">&quot; set tags+=../../../.tag</span><br><span class="hljs-string">&quot; set tags+=../*/.tag</span><br><span class="hljs-string">&quot; set tags+=../*/*/.tag</span><br><span class="hljs-string">&quot; set tags+=../../*/*/.tag</span><br>set foldcolumn=<span class="hljs-number">0</span><br>setlocal foldlevel=<span class="hljs-number">2</span><br>set foldclose=all <span class="hljs-string">&quot; 设置为折叠</span><br>set nofoldenable  <span class="hljs-string">&quot; 设置为自动关闭折叠</span><br>set laststatus=<span class="hljs-number">2</span>      <span class="hljs-string">&quot; 总是显示状态栏</span><br>nnoremap &lt;space&gt; @=((foldclosed(line(&#x27;.&#x27;)) &lt; <span class="hljs-number">0</span>) ? &#x27;zc&#x27; : &#x27;zo&#x27;)&lt;CR&gt;<br><span class="hljs-string">&quot; 用空格键来开关折叠</span><br><span class="hljs-string">&quot;让vim记忆上次编辑的位置</span><br>autocmd BufReadPost *<br>            \ if line(<span class="hljs-string">&quot;&#x27;\&quot;&quot;)&gt;0&amp;&amp;line(&quot;</span>&#x27;\&quot;&quot;)&lt;=line(&quot;$&quot;) |<br>            \ exe &quot;normal g&#x27;\<span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">|</span><br>            \ endif<br><span class="hljs-string">&quot;让vim记忆上次编辑的位置</span><br><span class="hljs-string">&quot; 警戒线颜色设置</span><br>highlight ColorColumn ctermfg=green ctermbg=red<br>highlight LineNr cterm=none ctermfg=green ctermbg=darkblue<br>highlight SpellBad ctermfg=<span class="hljs-number">15</span> ctermbg=<span class="hljs-number">1</span> guifg=White guibg=Red<br><span class="hljs-string">&quot; 搜索背景色设置</span><br>highlight Search cterm=none ctermfg=yellow ctermbg=red<br><span class="hljs-string">&quot; 下拉菜单背景色设置</span><br>highlight Pmenu ctermbg=green<br><span class="hljs-string">&quot; 下拉菜单选择行的背景色设置</span><br>highlight PmenuSel ctermbg=red ctermfg=yellow<br><span class="hljs-string">&quot; vimdiff 背景色设置</span><br>highlight DiffAdd     term=bold ctermfg=<span class="hljs-number">232</span> ctermbg=<span class="hljs-number">214</span><br>highlight DiffChange  term=bold ctermbg=<span class="hljs-number">248</span><br>highlight DiffDelete  term=reverse ctermfg=<span class="hljs-number">15</span> ctermbg=<span class="hljs-number">2</span><br>highlight DiffText    term=reverse ctermfg=<span class="hljs-number">15</span> ctermbg=<span class="hljs-number">1</span> gui=undercurl guifg=White guibg=Red guisp=Red<br><span class="hljs-string">&quot;highlight DiffText    term=reverse cterm=bold ctermbg=9</span><br><br><span class="hljs-string">&quot; set the runtime path to include Vundle and initialize</span><br>set rtp+=<span class="hljs-symbol">~/.vim/bundle/Vundle.vim</span><br><span class="hljs-symbol">call vundle#begin()</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">&quot; 让vundle管理插件版本,必须</span><br><span class="hljs-symbol">Plugin &#x27;VundleVim/Vundle.vim&#x27;</span><br><span class="hljs-symbol">&quot; 自动生成ctags索引</span><br><span class="hljs-symbol">Plugin &#x27;ludovicchabant/vim-gutentags&#x27;</span><br><span class="hljs-symbol">&quot; 提供ctags数据库无缝切换</span><br><span class="hljs-symbol">Plugin &#x27;skywind3000/gutentags_plus&#x27;</span><br><span class="hljs-symbol">&quot; vim支持markdown</span><br><span class="hljs-symbol">&quot;Plugin &#x27;plasticboy/vim-markdown&#x27;</span><br><span class="hljs-symbol">&quot; vim markdown 生成表格</span><br><span class="hljs-symbol">Plugin &#x27;dhruvasagar/vim-table-mode&#x27;</span><br><span class="hljs-symbol">&quot; 配合snippets自动补全, 没有的话snippets不生效</span><br><span class="hljs-symbol">Plugin &#x27;SirVer/ultisnips&#x27;</span><br><span class="hljs-symbol">&quot; 支持代码片段</span><br><span class="hljs-symbol">Plugin &#x27;honza/vim-snippets&#x27;</span><br><span class="hljs-symbol">&quot; 状态栏显示不同颜色</span><br><span class="hljs-symbol">Plugin &#x27;Lokaltog/vim-powerline&#x27;</span><br><span class="hljs-symbol">&quot; 记录历史变量名或路径或符号，使用tab即可循环选择</span><br><span class="hljs-symbol">Plugin &#x27;ervandew/supertab&#x27;</span><br><span class="hljs-symbol">&quot; 支持语法检测和编码风格检测</span><br><span class="hljs-symbol">Plugin &#x27;scrooloose/syntastic&#x27;</span><br><span class="hljs-symbol">&quot; 设置对齐线</span><br><span class="hljs-symbol">Plugin &#x27;Yggdroot/indentLine&#x27;</span><br><span class="hljs-symbol">&quot; git项目编辑后在行前显示状态~ + - 等</span><br><span class="hljs-symbol">Plugin &#x27;airblade/vim-gitgutter&#x27;</span><br><span class="hljs-symbol">&quot; 代码对齐</span><br><span class="hljs-symbol">Plugin &#x27;godlygeek/tabular&#x27;</span><br><span class="hljs-symbol">&quot; nerdtree</span><br><span class="hljs-symbol">Plugin &#x27;scrooloose/nerdtree&#x27;</span><br><span class="hljs-symbol">&quot; git管理的项目在项目窗口中的状态标识</span><br><span class="hljs-symbol">Plugin &#x27;git</span>:<span class="hljs-comment">//github.com/Xuyuanp/nerdtree-git-plugin.git&#x27;</span><br><span class="hljs-string">&quot; 文件查找工具，使用\ t查找文件</span><br>Plugin &#x27;wincent/command-t&#x27;<br><span class="hljs-string">&quot; vim 状态栏插件</span><br>Plugin &#x27;bling/vim-airline&#x27;<br><span class="hljs-string">&quot; 代码格式化插件</span><br>Plugin &#x27;Chiel92/vim-autoformat&#x27;<br>Plugin &#x27;rdnetto/YCM-Generator&#x27;<br><span class="hljs-string">&quot; 代码补全</span><br>Plugin &#x27;Valloric/YouCompleteMe&#x27;<br><span class="hljs-string">&quot; rust</span><br>Plugin &#x27;rust-lang/rust.vim&#x27;<br><span class="hljs-string">&quot; toml文件语法</span><br>Plugin &#x27;cespare/vim-toml&#x27;<br><br>call vundle<span class="hljs-meta">#end()            &quot; 必须</span><br>filetype plugin indent on    <span class="hljs-string">&quot; 必须 加载vim自带和插件相应的语法和文件类型相关脚本</span><br><br>autocmd BufNewFile  *.c,*.cpp  <span class="hljs-number">0</span>r <span class="hljs-symbol">~/.vim/skeleton/c.ske</span><br><span class="hljs-symbol">autocmd BufNewFile  *.h,*.hpp  0r ~/.vim/skeleton/h.ske</span><br><span class="hljs-symbol">autocmd BufNewFile  *.sh       0r ~/.vim/skeleton/sh.ske</span><br><span class="hljs-symbol">autocmd BufNewFile * normal G</span><br><span class="hljs-symbol">autocmd BufNewFile *.[ch],*.sh,*.hpp,*.cpp ks|call CreatedTime()|&#x27;</span><br><span class="hljs-symbol">fun CreatedTime()</span><br><span class="hljs-symbol">    if line(&quot;$&quot;) &gt; 20</span><br><span class="hljs-symbol">        let l = 20</span><br><span class="hljs-symbol">    else</span><br><span class="hljs-symbol">        let l = line(&quot;$&quot;)</span><br><span class="hljs-symbol">    endif</span><br><span class="hljs-symbol">    exe &quot;1,&quot; . l . &quot;g/Date       </span>:.*/s<span class="hljs-comment">//Date       : &quot; .strftime(&quot;%c&quot;)</span><br>endfun<br><br><span class="hljs-string">&quot; 保存时自动删除行尾空白字符</span><br>function! StripTrailingWhitespace()<br>    normal mZ<br>    %s/\s\+$<span class="hljs-comment">//e</span><br>    if line(<span class="hljs-string">&quot;&#x27;Z&quot;</span>) != line(<span class="hljs-string">&quot;.&quot;</span>)<br>        echo <span class="hljs-string">&quot;Stripped whitespace\n&quot;</span><br>    endif<br>    normal `Z<br>endfunction<br>autocmd BufWritePre *.cpp,*.cxx,*.hpp,*.h,*.rs,*.toml :call StripTrailingWhitespace()<br><br><span class="hljs-string">&quot; 设置nerd窗口中git文件状态</span><br>let g:NERDTreeIndicatorMapCustom = &#123;<br>    \ <span class="hljs-string">&quot;Modified&quot;</span>  : <span class="hljs-string">&quot;✹&quot;</span>,<br>    \ <span class="hljs-string">&quot;Staged&quot;</span>    : <span class="hljs-string">&quot;✚&quot;</span>,<br>    \ <span class="hljs-string">&quot;Untracked&quot;</span> : <span class="hljs-string">&quot;✭&quot;</span>,<br>    \ <span class="hljs-string">&quot;Renamed&quot;</span>   : <span class="hljs-string">&quot;➜&quot;</span>,<br>    \ <span class="hljs-string">&quot;Unmerged&quot;</span>  : <span class="hljs-string">&quot;═&quot;</span>,<br>    \ <span class="hljs-string">&quot;Deleted&quot;</span>   : <span class="hljs-string">&quot;✖&quot;</span>,<br>    \ <span class="hljs-string">&quot;Dirty&quot;</span>     : <span class="hljs-string">&quot;✗&quot;</span>,<br>    \ <span class="hljs-string">&quot;Clean&quot;</span>     : <span class="hljs-string">&quot;✔︎&quot;</span>,<br>    \ <span class="hljs-string">&quot;Unknown&quot;</span>   : <span class="hljs-string">&quot;?&quot;</span><br>    \ &#125;<br><br><span class="hljs-string">&quot; 自动关闭选项预览窗口</span><br>autocmd InsertLeave * if pumvisible() == <span class="hljs-number">0</span><span class="hljs-string">|pclose|endif</span><br>autocmd CursorMovedI * if pumvisible() == <span class="hljs-number">0</span><span class="hljs-string">|pclose|endif</span><br><br><span class="hljs-string">&quot;YouCompleteMe相关设置</span><br><span class="hljs-string">&quot;let g:ycm_global_ycm_extra_conf=&#x27;~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py&#x27;</span><br>let g:ycm_global_ycm_extra_conf=&#x27;~/.ycm_extra_conf.py&#x27;<br><span class="hljs-string">&quot;开启语义补全</span><br>let g:ycm_seed_identifiers_with_syntax=<span class="hljs-number">1</span><br><span class="hljs-string">&quot;不显示开启vim时检查ycm_extra_conf文件的信息</span><br>let g:ycm_confirm_extra_conf=<span class="hljs-number">0</span><br><span class="hljs-string">&quot;每次重新生成匹配项，禁止缓存匹配项</span><br>let g:ycm_cache_omnifunc=<span class="hljs-number">0</span><br><span class="hljs-string">&quot; 从第2个键入字符就开始罗列匹配项</span><br>let g:ycm_min_num_of_chars_for_completion=<span class="hljs-number">2</span>                 <span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;不查询ultisnips提供的代码模板补全，如果需要，设置成1即可</span><br>let g:ycm_use_ultisnips_completer=<span class="hljs-number">0</span><br>let g:ycm_key_list_select_completion = [&#x27;&lt;c-n&gt;&#x27;, &#x27;&lt;Down&gt;&#x27;]<br>let g:ycm_enable_diagnostic_signs = <span class="hljs-number">0</span><br>let g:ycm_enable_diagnostic_highlighting = <span class="hljs-number">0</span><br><br><span class="hljs-string">&quot;设置对齐线的颜色</span><br>let g:indentLine_color_term = <span class="hljs-number">239</span><br><span class="hljs-string">&quot; 设置</span><br>let g:airline<span class="hljs-meta">#extensions#tabline#enabled = 1</span><br>let NERDTreeWinPos=<span class="hljs-number">1</span>   <span class="hljs-string">&quot; 右侧显示</span><br><br><span class="hljs-string">&quot; 设置markdown的table模式下使用|进行表格制作</span><br>let g:table_mode_corner=&#x27;|&#x27;<br><br><span class="hljs-string">&quot; gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归</span><br>let g:gutentags_project_root = [&#x27;.root&#x27;, &#x27;.svn&#x27;, &#x27;.git&#x27;, &#x27;.hg&#x27;, &#x27;.project&#x27;]<br><br><span class="hljs-string">&quot; 所生成的数据文件的名称</span><br>let g:gutentags_ctags_tagfile = &#x27;.tags&#x27;<br><br><span class="hljs-string">&quot; 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录</span><br>let s:vim_tags = expand(&#x27;~/.cache/tags&#x27;)<br>let g:gutentags_cache_dir = s:vim_tags<br><span class="hljs-string">&quot; 检测 ~/.cache/tags 不存在就新建 &quot;</span><br>if !isdirectory(s:vim_tags)<br>    silent! call mkdir(s:vim_tags, &#x27;p&#x27;)<br>endif<br><br><span class="hljs-string">&quot; 配置 ctags 的参数</span><br>let g:gutentags_ctags_extra_args = [&#x27;--fields=+niazS&#x27;, &#x27;--extra=+q&#x27;]<br>let g:gutentags_ctags_extra_args += [&#x27;--c++-kinds=+px&#x27;]<br>let g:gutentags_ctags_extra_args += [&#x27;--c-kinds=+px&#x27;]<br><br><span class="hljs-string">&quot; 设置NerdTree F3调出</span><br>map &lt;F3&gt; :NERDTreeMirror&lt;CR&gt;<br>map &lt;F3&gt; :NERDTreeToggle&lt;CR&gt;<br><span class="hljs-string">&quot; 设置f4为代码自动格式化，配合插件vim-autoformat使用</span><br>noremap &lt;F4&gt; :Autoformat&lt;CR&gt;<br><span class="hljs-string">&quot; 设置f9打开或关闭对齐线</span><br>map &lt;F9&gt; :IndentLinesToggle&lt;CR&gt;<br><span class="hljs-string">&quot; 设置,2 ,3 ,4 分别为vimdiff的获取2 3 4 窗口内容, 并更新vimdiff</span><br>map &lt;silent&gt; ,<span class="hljs-number">2</span> :diffget <span class="hljs-number">2</span>&lt;CR&gt; :diffupdate&lt;CR&gt;<br>map &lt;silent&gt; ,<span class="hljs-number">3</span> :diffget <span class="hljs-number">3</span>&lt;CR&gt; :diffupdate&lt;CR&gt;<br>map &lt;silent&gt; ,<span class="hljs-number">4</span> :diffget <span class="hljs-number">4</span>&lt;CR&gt; :diffupdate&lt;CR&gt;<br><br>autocmd BufEnter * if <span class="hljs-meta">&amp;filetype == &quot;&quot; | setlocal ft=cpp | endif</span><br>nnoremap &lt;leader&gt;jd :YcmCompleter GoToDeclaration&lt;CR&gt;<br><br><span class="hljs-string">&quot; 在输入模式下ctrl+hjkl  来移动光标, 一般需要修改xshell中属性终端里 127 把&lt;BS&gt;设置成 127，而 &lt;DEL&gt;设置成 VT220 Del</span><br>inoremap &lt;c-h&gt; &lt;left&gt;<br>inoremap &lt;c-j&gt; &lt;down&gt;<br>inoremap &lt;c-k&gt; &lt;up&gt;<br>inoremap &lt;c-l&gt; &lt;right&gt;<br><span class="hljs-string">&quot;inoremap &#x27; &#x27;&#x27;&lt;ESC&gt;i</span><br><span class="hljs-string">&quot;inoremap &quot;</span> <span class="hljs-string">&quot;&quot;</span>&lt;ESC&gt;i<br><span class="hljs-string">&quot; inoremap ( ()&lt;ESC&gt;i</span><br><span class="hljs-string">&quot; inoremap [ []&lt;ESC&gt;i</span><br><span class="hljs-string">&quot; inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开发机部署</title>
    <link href="/2020/07/30/04DevOps/01%20%E5%BC%80%E5%8F%91%E6%9C%BA%E9%83%A8%E7%BD%B2/"/>
    <url>/2020/07/30/04DevOps/01%20%E5%BC%80%E5%8F%91%E6%9C%BA%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="开发机部署"><a href="#开发机部署" class="headerlink" title="开发机部署"></a>开发机部署</h1><h3 id="修改服务器名"><a href="#修改服务器名" class="headerlink" title="修改服务器名"></a>修改服务器名</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">xxxx</span><br></code></pre></td></tr></table></figure><p>实际修改的是/proc/sys/kernel/hostname的内容</p><h3 id="安装开发包"><a href="#安装开发包" class="headerlink" title="安装开发包"></a>安装开发包</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">yum</span> <span class="hljs-comment">install</span> <span class="hljs-comment">gcc</span><span class="hljs-literal">-</span><span class="hljs-comment">c</span>++ <span class="hljs-comment">cmake</span> <br></code></pre></td></tr></table></figure><h3 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum update</span>  <br></code></pre></td></tr></table></figure><h3 id="安装python2-7"><a href="#安装python2-7" class="headerlink" title="安装python2.7"></a>安装python2.7</h3><p>安装python2.7的时候使用以下选项编译</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">./configure  --enable-shared <span class="hljs-attribute">CFLAGS</span>=-fPIC <span class="hljs-attribute">--enable-unicode</span>=ucs4<br></code></pre></td></tr></table></figure><p>然后再安装python</p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> git<br></code></pre></td></tr></table></figure><h3 id="安装vim8"><a href="#安装vim8" class="headerlink" title="安装vim8"></a>安装vim8</h3><h5 id="先安装依赖包"><a href="#先安装依赖包" class="headerlink" title="先安装依赖包"></a>先安装依赖包</h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yum <span class="hljs-keyword">install </span>ncurses-devel<br>yum <span class="hljs-keyword">install </span>python-devel<br>yum <span class="hljs-keyword">install </span>perl-<span class="hljs-keyword">ExtUtils-Embed</span><br><span class="hljs-keyword"></span>yum <span class="hljs-keyword">install </span>ruby<br>yum <span class="hljs-keyword">install </span>ruby-devel<br>yum <span class="hljs-keyword">install </span>clang-devel<br></code></pre></td></tr></table></figure><h5 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./configure</span> <span class="hljs-params">--with-features=huge</span> <span class="hljs-params">--enable-multibyte</span>  <span class="hljs-params">--enable-pythoninterp</span> <span class="hljs-params">--enable-rubyinterp</span>  <span class="hljs-params">--enable-luainterp</span> <span class="hljs-params">--enable-cscope</span><br><br>make VIMRUNTIMEDIR=<span class="hljs-string">/usr/local/share/vim/vim80</span><br>make install<br><br>ubuntu 使用如下语法<br><span class="hljs-string">./configure</span> <span class="hljs-params">--with-features=huge</span> <span class="hljs-params">--enable-multibyte</span> <span class="hljs-params">--enable-rubyinterp=yes</span> <span class="hljs-params">--enable-python3interp=yes</span> <span class="hljs-params">--with-python3-config-dir=</span>$<span class="hljs-params">(python3-config --configdir)</span> <span class="hljs-params">--enable-perlinterp=yes</span> <span class="hljs-params">--enable-luainterp=yes</span> <span class="hljs-params">--enable-gui=gtk2</span> <span class="hljs-params">--enable-cscope</span><br><br></code></pre></td></tr></table></figure><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><p>mkdir ~/.vim/bundle</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/gmarik/</span>vundle.git ~<span class="hljs-regexp">/.vim/</span>bundle/Vundle.vim<br></code></pre></td></tr></table></figure><h6 id="安装commond-t"><a href="#安装commond-t" class="headerlink" title="安装commond-t"></a>安装commond-t</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd ~<span class="hljs-regexp">/.vim/</span>bundle<span class="hljs-regexp">/command-t/</span>ruby<span class="hljs-regexp">/command-t/</span>ext<span class="hljs-regexp">/command-t/</span><br><br>ruby extconf.rb<br><br>make<br></code></pre></td></tr></table></figure><h6 id="安装YouCompleteMe"><a href="#安装YouCompleteMe" class="headerlink" title="安装YouCompleteMe"></a>安装YouCompleteMe</h6><p>上传clang+llvm-5.0.0-linux-x86_64-ubuntu14.04.tar.xz到.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/../clang_archives/ 目录下</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/.vim/bundle/YouCompleteMe</span><br><span class="hljs-string">./install.py</span> <span class="hljs-params">--clang-completer</span><br></code></pre></td></tr></table></figure><h3 id="安装gcc的debug调试信息"><a href="#安装gcc的debug调试信息" class="headerlink" title="安装gcc的debug调试信息"></a>安装gcc的debug调试信息</h3><ul><li><p>修改配置文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/yum</span>.repos.d/CentOS-Debuginfo.repo<br></code></pre></td></tr></table></figure><p>将其中的==enabled=0==修改为==enabled=1==</p></li><li><p>执行如下命令安装：</p></li></ul><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">debuginfo</span><span class="hljs-literal">-</span><span class="hljs-comment">install</span> <span class="hljs-comment">libgcc</span>  <span class="hljs-comment">libstdc</span>++  <span class="hljs-comment">nss</span><span class="hljs-literal">-</span><span class="hljs-comment">softokn</span><span class="hljs-literal">-</span><span class="hljs-comment">freebl</span>  <span class="hljs-comment">zlib</span> <br></code></pre></td></tr></table></figure><ul><li>gdb7.0多线程non-stop模式开启</li></ul><p>此模式可以保证只调试某个线程，在~/.gdbinit中添加以下内容</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">set</span> target-<span class="hljs-keyword">async</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">set</span> pagination <span class="hljs-keyword">off</span><br><span class="hljs-keyword">set</span> non-<span class="hljs-keyword">stop</span> <span class="hljs-keyword">on</span><br></code></pre></td></tr></table></figure><h3 id="部署c-的man帮助文档"><a href="#部署c-的man帮助文档" class="headerlink" title="部署c++的man帮助文档"></a>部署c++的man帮助文档</h3><ul><li>从站点下载libstdc++-api-4.5.2.man.tar压缩</li></ul><p><a href="">ftp://gcc.gnu.org/pub/gcc/libstdc++/doxygen/</a></p><ul><li>解压文件并拷贝内容到man3目录下<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -jxvf libstdc++-api-<span class="hljs-number">4</span>.<span class="hljs-number">5</span>.<span class="hljs-number">2</span>.man.tar<br><span class="hljs-attribute">cd</span> libstdc++-api-<span class="hljs-number">4</span>.<span class="hljs-number">5</span>.<span class="hljs-number">2</span>/man<span class="hljs-number">3</span>/<br><span class="hljs-attribute">cp</span> * /usr/share/man/man<span class="hljs-number">3</span>/<br></code></pre></td></tr></table></figure></li></ul><h1 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h1><div class="code-wrapper"><pre><code class="hljs">- 先更新系统，sudo apt-get update- 再按照centos部署方式进行部署</code></pre></div><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><div class="code-wrapper"><pre><code class="hljs">sudo apt-get install libncurses5-dev libgnome2-dev libgnomeui-dev libgtk2.0-dev libatk1.0-dev libbonoboui2-dev libcairo2-dev libx11-dev libxpm-dev libxt-dev python-dev  python3-dev ruby-dev lua5.1 liblua5.1-dev libperl-dev git  python-requests</code></pre></div><h2 id="ruby-安装"><a href="#ruby-安装" class="headerlink" title="ruby 安装"></a>ruby 安装</h2><div class="code-wrapper"><pre><code class="hljs">apt-get install rubyapt-get install ruby-dev</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>devops</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多版本gcc部署</title>
    <link href="/2020/07/30/04DevOps/02%20%E5%A4%9A%E7%89%88%E6%9C%ACgcc%E9%83%A8%E7%BD%B2/"/>
    <url>/2020/07/30/04DevOps/02%20%E5%A4%9A%E7%89%88%E6%9C%ACgcc%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="安装scl源："><a href="#安装scl源：" class="headerlink" title="安装scl源："></a>安装scl源：</h2><p>yum install centos-release-SCL scl-utils-build</p><h2 id="查看从-SCL-中安装的包的列表："><a href="#查看从-SCL-中安装的包的列表：" class="headerlink" title="查看从 SCL 中安装的包的列表："></a>查看从 SCL 中安装的包的列表：</h2><p>scl –list</p><h2 id="列出scl源有哪些包可以用："><a href="#列出scl源有哪些包可以用：" class="headerlink" title="列出scl源有哪些包可以用："></a>列出scl源有哪些包可以用：</h2><p>yum list all –enablerepo=’centos-sclo-rh’</p><h2 id="查看从-SCL-中安装的包的列表：-1"><a href="#查看从-SCL-中安装的包的列表：-1" class="headerlink" title="查看从 SCL 中安装的包的列表："></a>查看从 SCL 中安装的包的列表：</h2><p>scl –list</p><h2 id="安装5-3版本的gcc、gcc-c"><a href="#安装5-3版本的gcc、gcc-c" class="headerlink" title="安装5.3版本的gcc、gcc-c++"></a>安装5.3版本的gcc、gcc-c++</h2><p>yum install devtoolset-4-gcc.x86_64 devtoolset-4-gcc-c++.x86_64</p><h2 id="切换到devtoolset-4环境："><a href="#切换到devtoolset-4环境：" class="headerlink" title="切换到devtoolset-4环境："></a>切换到devtoolset-4环境：</h2><p>scl enable devtoolset-4 bash</p><h2 id="安装6-3版本gcc-gcc-c-等"><a href="#安装6-3版本gcc-gcc-c-等" class="headerlink" title="安装6.3版本gcc,gcc-c++ 等"></a>安装6.3版本gcc,gcc-c++ 等</h2><p>yum install devtoolset-6-gcc.x86_64 devtoolset-6-gcc-c++.x86_64 devtoolset-6-gcc-gdb-plugin.x86_64 devtoolset-6-libasan-devel.x86_64 libasan3-6.3.1-3.1.el7.x86_64 -y</p>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gcc,</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pika 运维命令</title>
    <link href="/2020/07/29/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/02%20Pika/pika%20%E8%BF%90%E7%BB%B4%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/07/29/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/02%20Pika/pika%20%E8%BF%90%E7%BB%B4%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="一、运维经验"><a href="#一、运维经验" class="headerlink" title="一、运维经验"></a>一、运维经验</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-number">1</span>、可能的话将整个pika目录放到ssd磁盘<br><span class="hljs-number">2</span>、从节点全量同步数据的时候会将主节点所有数据同步到<span class="hljs-keyword">var</span>/dbsync目录下，所以此空间一定足够<br><span class="hljs-number">3</span>、<br></code></pre></td></tr></table></figure><h1 id="二、命令"><a href="#二、命令" class="headerlink" title="二、命令"></a>二、命令</h1><h2 id="pika-停止命令"><a href="#pika-停止命令" class="headerlink" title="pika 停止命令"></a>pika 停止命令</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./redis-cli</span> -h 127.0.0.1 -p 9221 <span class="hljs-keyword">shutdown</span><br></code></pre></td></tr></table></figure><h2 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/opt/</span>soft<span class="hljs-regexp">/whb/</span>pika<span class="hljs-regexp">/sbin/</span>pika -c <span class="hljs-regexp">/opt/</span>soft<span class="hljs-regexp">/whb/</span>pika<span class="hljs-regexp">/conf/</span>pika.conf<br></code></pre></td></tr></table></figure><h2 id="内存碎片整理"><a href="#内存碎片整理" class="headerlink" title="内存碎片整理"></a>内存碎片整理</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">./redis-cli -h <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> -p <span class="hljs-number">9221</span> tcmalloc free<br></code></pre></td></tr></table></figure><h2 id="将从节点与主节点断开"><a href="#将从节点与主节点断开" class="headerlink" title="将从节点与主节点断开"></a>将从节点与主节点断开</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">登录从节点后执行<br>slaveof <span class="hljs-keyword">no</span> <span class="hljs-keyword">one</span><br></code></pre></td></tr></table></figure><h2 id="从新将节点加入为主节点的从"><a href="#从新将节点加入为主节点的从" class="headerlink" title="从新将节点加入为主节点的从"></a>从新将节点加入为主节点的从</h2><p>执行从与主断开后执行以下语句</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"># ip <span class="hljs-keyword">port</span> 为master节点信息<br>slaveof ip <span class="hljs-keyword">port</span>  <br></code></pre></td></tr></table></figure><h1 id="三、编译"><a href="#三、编译" class="headerlink" title="三、编译"></a>三、编译</h1><p>使用 gperftools-2.7</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
      <tag>数据库</tag>
      
      <tag>pika</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Shell命令获取IP地址</title>
    <link href="/2020/07/27/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/09%E5%88%A9%E7%94%A8Shell%E5%91%BD%E4%BB%A4%E8%8E%B7%E5%8F%96IP%E5%9C%B0%E5%9D%80/"/>
    <url>/2020/07/27/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/09%E5%88%A9%E7%94%A8Shell%E5%91%BD%E4%BB%A4%E8%8E%B7%E5%8F%96IP%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h1 id="获取单个网卡的IPv4地址，方法如下："><a href="#获取单个网卡的IPv4地址，方法如下：" class="headerlink" title="获取单个网卡的IPv4地址，方法如下："></a>获取单个网卡的IPv4地址，方法如下：</h1><ul><li><p>方法一：<br>  <code>$/sbin/ifconfig ethX | awk &#39;/inet addr/ &#123;print $2&#125;&#39; | cut -f2 -d &quot;:&quot;</code></p></li><li><p>方法二：<br>  <code> $/sbin/ifconfig ethX | awk &#39;/inet addr/ &#123;print $2&#125;&#39; | awk -F: &#39;&#123;print $2&#125;&#39;</code></p></li><li><p>方法三：<br>  <code>$/sbin/ifconfig ethX | sed -ne &#39;s/\(.*\)addr:\([[:digit:].]*\)\(.*\)/\2/p&#39;</code></p></li></ul><p>把ethX中的X替换为需要查看网卡的序号，如eth0,eth1…</p><h1 id="获得本机所有网卡的IPv4地址，方法如下："><a href="#获得本机所有网卡的IPv4地址，方法如下：" class="headerlink" title="获得本机所有网卡的IPv4地址，方法如下："></a>获得本机所有网卡的IPv4地址，方法如下：</h1><div class="code-wrapper"><pre><code class="hljs">`$/sbin/ifconfig | awk &#39;&#123;if ( $1 == &quot;inet&quot; &amp;&amp; $3 ~ /^Bcast/) print $2&#125;&#39; | cut -f2 -d &quot;:&quot;`</code></pre></div><p>如果是IPv6网络，把上面的命令做简单修改即可，如：</p><p>$/sbin/ifconfig | awk ‘/inet6/ {print $3}’ —-全部<br>$/sbin/ifconfig ethX | awk ‘/inet6/ {print $3}’ —-单个</p>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MD5算法原理</title>
    <link href="/2020/07/27/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02MD5%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/"/>
    <url>/2020/07/27/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02MD5%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h1><p>MD5算法是一种消息摘要算法(Message Digest Algorithm)，此算法以任意长度的信息(message)作为输入进行计算，产生一个128-bit(16-byte)的指纹或报文摘要(fingerprint or message digest)。两个不同的message产生相同message digest的几率相当小，从一个给定的message digest逆向产生原始message更是困难(不过据说我国的某个教授很善于从message digest构造message)，因此MD5算法适合用在数字签名应用中。MD5实现简单，在32位的机器上运行速度也相当快，当然实际应用也不仅仅局限于数字签名。</p><h1 id="2-MD5-Algorithm-Description"><a href="#2-MD5-Algorithm-Description" class="headerlink" title="2. MD5 Algorithm Description"></a>2. MD5 Algorithm Description</h1><p>假设输入信息(input message)的长度为b(bit)，我们想要产生它的报文摘要，在此处b为任意的非负整数：b也可能为0，也不一定为8的整数倍，且可能是任意大的长度。设该信息的比特流表示如下：</p><p>M[0] M[1] M[2] … M[b-1]</p><p>计算此信息的报文摘要需要如下5步：</p><h2 id="2-1-Append-Padding-Bits"><a href="#2-1-Append-Padding-Bits" class="headerlink" title="2.1 Append Padding Bits"></a>2.1 Append Padding Bits</h2><p>信息计算前先要进行位补位，设补位后信息的长度为LEN(bit)，则LEN%512 = 448(bit)，即数据扩展至<br>K<em>512+448(bit)。即K</em>64+56(byte)，K为整数。补位操作始终要执行，即使补位前信息的长度对512求余的结果是448。具体补位操作：补一个1，然后补0至满足上述要求。总共最少要补1bit，最多补512bit。</p><h2 id="2-2-Append-Length"><a href="#2-2-Append-Length" class="headerlink" title="2.2 Append Length"></a>2.2 Append Length</h2><p>将输入信息的原始长度b(bit)表示成一个64-bit的数字，把它添加到上一步的结果后面(在32位的机器上，这64位将用2个字来表示并且低位在前)。当遇到b大于2^64这种极少的情况时，b的高位被截去，仅使用b的低64位。经过上面两步，数据就被填补成长度为512(bit)的倍数。也就是说，此时的数据长度是16个字(32byte)的整数倍。此时的数据表示为：</p><p>M[0 … N-1]</p><p>其中的N是16的倍数。</p><h2 id="2-3-Initialize-MD-Buffer"><a href="#2-3-Initialize-MD-Buffer" class="headerlink" title="2.3 Initialize MD Buffer"></a>2.3 Initialize MD Buffer</h2><p>用一个四个字的缓冲器(A，B，C，D)来计算报文摘要，A,B,C,D分别是32位的寄存器，初始化使用的是十六进制表示的数字，注意低字节在前：</p><p>word A: 01 23 45 67<br>word B: 89 ab cd ef<br>word C: fe dc ba 98<br>word D: 76 54 32 10</p><h2 id="2-4-Process-Message-in-16-Word-Blocks"><a href="#2-4-Process-Message-in-16-Word-Blocks" class="headerlink" title="2.4 Process Message in 16-Word Blocks"></a>2.4 Process Message in 16-Word Blocks</h2><p>首先定义4个辅助函数，每个函数的输入是三个32位的字，输出是一个32位的字：</p><p>F(X,Y,Z) = XY v not(X) Z<br>G(X,Y,Z) = XZ v Y not(Z)<br>H(X,Y,Z) = X xor Y xor Z<br>I(X,Y,Z) = Y xor (X v not(Z))</p><p>NOTE：not(X)代表X的按位补运算，X v Y 表示X和Y的按位或运算，X xor Y代表X和Y的按位异或运算，XY代表X和Y的按位与运算。</p><p>具体过程如下：</p><figure class="highlight prolog"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-comment">/* Process each 16-word block. */</span><br><span class="hljs-symbol">For</span> i = <span class="hljs-number">0</span> to <span class="hljs-symbol">N</span>/<span class="hljs-number">16</span><span class="hljs-number">-1</span> do<br><br><span class="hljs-comment">/* Copy block i into X. */</span><br><span class="hljs-symbol">For</span> j = <span class="hljs-number">0</span> to <span class="hljs-number">15</span> do<br><span class="hljs-symbol">Set</span> <span class="hljs-symbol">X</span>[j] to <span class="hljs-symbol">M</span>[i*<span class="hljs-number">16</span>+j].<br>end <span class="hljs-comment">/* of loop on j */</span><br><br><span class="hljs-comment">/* Save A as AA, B as BB, C as CC, and D as DD. */</span><br><span class="hljs-symbol">AA</span> = <span class="hljs-symbol">A</span><br><span class="hljs-symbol">BB</span> = <span class="hljs-symbol">B</span><br><span class="hljs-symbol">CC</span> = <span class="hljs-symbol">C</span><br><span class="hljs-symbol">DD</span> = <span class="hljs-symbol">D</span><br><br><span class="hljs-comment">/* Round 1. */</span><br><span class="hljs-comment">/* Let [abcd k s i] denote the operation</span><br><span class="hljs-comment">a = b + ((a + F(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</span><br><span class="hljs-comment">/* Do the following 16 operations. */</span><br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">1</span> <span class="hljs-number">12</span> <span class="hljs-number">2</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">2</span> <span class="hljs-number">17</span> <span class="hljs-number">3</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">3</span> <span class="hljs-number">22</span> <span class="hljs-number">4</span>]<br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">5</span> <span class="hljs-number">12</span> <span class="hljs-number">6</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">6</span> <span class="hljs-number">17</span> <span class="hljs-number">7</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">7</span> <span class="hljs-number">22</span> <span class="hljs-number">8</span>]<br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">9</span> <span class="hljs-number">12</span> <span class="hljs-number">10</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">10</span> <span class="hljs-number">17</span> <span class="hljs-number">11</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">11</span> <span class="hljs-number">22</span> <span class="hljs-number">12</span>]<br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">12</span> <span class="hljs-number">7</span> <span class="hljs-number">13</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">13</span> <span class="hljs-number">12</span> <span class="hljs-number">14</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">14</span> <span class="hljs-number">17</span> <span class="hljs-number">15</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">15</span> <span class="hljs-number">22</span> <span class="hljs-number">16</span>]<br><br><span class="hljs-comment">/* Round 2. */</span><br><span class="hljs-comment">/* Let [abcd k s i] denote the operation</span><br><span class="hljs-comment">a = b + ((a + G(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</span><br><span class="hljs-comment">/* Do the following 16 operations. */</span><br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">17</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">6</span> <span class="hljs-number">9</span> <span class="hljs-number">18</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">11</span> <span class="hljs-number">14</span> <span class="hljs-number">19</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">0</span> <span class="hljs-number">20</span> <span class="hljs-number">20</span>]<br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">21</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">10</span> <span class="hljs-number">9</span> <span class="hljs-number">22</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">15</span> <span class="hljs-number">14</span> <span class="hljs-number">23</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">4</span> <span class="hljs-number">20</span> <span class="hljs-number">24</span>]<br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">9</span> <span class="hljs-number">5</span> <span class="hljs-number">25</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">14</span> <span class="hljs-number">9</span> <span class="hljs-number">26</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">3</span> <span class="hljs-number">14</span> <span class="hljs-number">27</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">8</span> <span class="hljs-number">20</span> <span class="hljs-number">28</span>]<br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">13</span> <span class="hljs-number">5</span> <span class="hljs-number">29</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">2</span> <span class="hljs-number">9</span> <span class="hljs-number">30</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">7</span> <span class="hljs-number">14</span> <span class="hljs-number">31</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">12</span> <span class="hljs-number">20</span> <span class="hljs-number">32</span>]<br><br><span class="hljs-comment">/* Round 3. */</span><br><span class="hljs-comment">/* Let [abcd k s t] denote the operation</span><br><span class="hljs-comment">a = b + ((a + H(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</span><br><span class="hljs-comment">/* Do the following 16 operations. */</span><br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">33</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">8</span> <span class="hljs-number">11</span> <span class="hljs-number">34</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">11</span> <span class="hljs-number">16</span> <span class="hljs-number">35</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">14</span> <span class="hljs-number">23</span> <span class="hljs-number">36</span>]<br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">37</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">4</span> <span class="hljs-number">11</span> <span class="hljs-number">38</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">7</span> <span class="hljs-number">16</span> <span class="hljs-number">39</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">10</span> <span class="hljs-number">23</span> <span class="hljs-number">40</span>]<br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">13</span> <span class="hljs-number">4</span> <span class="hljs-number">41</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">0</span> <span class="hljs-number">11</span> <span class="hljs-number">42</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">3</span> <span class="hljs-number">16</span> <span class="hljs-number">43</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">6</span> <span class="hljs-number">23</span> <span class="hljs-number">44</span>]<br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">9</span> <span class="hljs-number">4</span> <span class="hljs-number">45</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">12</span> <span class="hljs-number">11</span> <span class="hljs-number">46</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">47</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">2</span> <span class="hljs-number">23</span> <span class="hljs-number">48</span>]<br><br><span class="hljs-comment">/* Round 4. */</span><br><span class="hljs-comment">/* Let [abcd k s t] denote the operation</span><br><span class="hljs-comment">a = b + ((a + I(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</span><br><span class="hljs-comment">/* Do the following 16 operations. */</span><br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">49</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span> <span class="hljs-number">50</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">51</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">5</span> <span class="hljs-number">21</span> <span class="hljs-number">52</span>]<br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">12</span> <span class="hljs-number">6</span> <span class="hljs-number">53</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">3</span> <span class="hljs-number">10</span> <span class="hljs-number">54</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">10</span> <span class="hljs-number">15</span> <span class="hljs-number">55</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">1</span> <span class="hljs-number">21</span> <span class="hljs-number">56</span>]<br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">57</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">15</span> <span class="hljs-number">10</span> <span class="hljs-number">58</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">6</span> <span class="hljs-number">15</span> <span class="hljs-number">59</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">13</span> <span class="hljs-number">21</span> <span class="hljs-number">60</span>]<br>[<span class="hljs-symbol">ABCD</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">61</span>] [<span class="hljs-symbol">DABC</span> <span class="hljs-number">11</span> <span class="hljs-number">10</span> <span class="hljs-number">62</span>] [<span class="hljs-symbol">CDAB</span> <span class="hljs-number">2</span> <span class="hljs-number">15</span> <span class="hljs-number">63</span>] [<span class="hljs-symbol">BCDA</span> <span class="hljs-number">9</span> <span class="hljs-number">21</span> <span class="hljs-number">64</span>]<br><br><span class="hljs-comment">/* Then perform the following additions. (That is increment each</span><br><span class="hljs-comment">of the four registers by the value it had before this block</span><br><span class="hljs-comment">was started.) */</span><br><span class="hljs-symbol">A</span> = <span class="hljs-symbol">A</span> + <span class="hljs-symbol">AA</span><br><span class="hljs-symbol">B</span> = <span class="hljs-symbol">B</span> + <span class="hljs-symbol">BB</span><br><span class="hljs-symbol">C</span> = <span class="hljs-symbol">C</span> + <span class="hljs-symbol">CC</span><br><span class="hljs-symbol">D</span> = <span class="hljs-symbol">D</span> + <span class="hljs-symbol">DD</span><br><br>end <span class="hljs-comment">/* of loop on i */</span><br></code></pre></td></tr></table></figure><h2 id="2-5-Output"><a href="#2-5-Output" class="headerlink" title="2.5 Output"></a>2.5 Output</h2><p>报文摘要的产生后的形式为：A，B，C，D。也就是低位字节A开始，高位字节D结束。</p><h1 id="3-C-Implementation"><a href="#3-C-Implementation" class="headerlink" title="3. C++ Implementation"></a>3. C++ Implementation</h1><p>有了上面5个步骤的算法描述，用C++实现起来就很直接了。需要注意的是在具体实现的时候上述5个步骤的顺序会有所变动，因为在大多数情况下我们都无法或很难提前计算出输入信息的长度b(如输入信息来自文件或网络)。因此在具体实现时Append Padding Bits和Append Length这两步会放在最后面。</p><h1 id="4-Test-Suite"><a href="#4-Test-Suite" class="headerlink" title="4. Test Suite"></a>4. Test Suite</h1><p>由于实现代码比较长，在这里就不贴出来了，在本文后面会提供下载。MD5类的public接口如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino">md5.h<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MD5</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">MD5</span>();<br><span class="hljs-built_in">MD5</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* input, <span class="hljs-keyword">size_t</span> length);<br><span class="hljs-built_in">MD5</span>(<span class="hljs-keyword">const</span> string&amp; str);<br><span class="hljs-built_in">MD5</span>(ifstream &amp;in);<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* input, <span class="hljs-keyword">size_t</span> length)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string&amp; str)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(ifstream&amp; in)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">byte</span>* <span class="hljs-title">digest</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">string <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reset</span><span class="hljs-params">()</span></span>;<br> ...<br> &#125;;<br></code></pre></td></tr></table></figure><p>下面简单介绍一下具体用法：</p><h2 id="4-1-计算字符串的MD5值"><a href="#4-1-计算字符串的MD5值" class="headerlink" title="4.1 计算字符串的MD5值"></a>4.1 计算字符串的MD5值</h2><p>下面的代码计算字符串”abc”的MD5值并用cout输出：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">MD5 md5;<br>md5.update(<span class="hljs-string">&quot;abc&quot;</span>);<br>cout &lt;&lt; md5.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span> &lt;&lt; endl;<br><span class="hljs-comment">//或者更简单点</span><br>cout &lt;&lt; <span class="hljs-constructor">MD5(<span class="hljs-string">&quot;abc&quot;</span>)</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="4-2-计算文件的MD5值"><a href="#4-2-计算文件的MD5值" class="headerlink" title="4.2 计算文件的MD5值"></a>4.2 计算文件的MD5值</h2><p>下面的代码计算文本文件”D:\test.txt”的MD5值并用cout输出，如果是二进制文件打开的时候记得要指定ios::binary模式。另外需要注意的是用来计算的文件必须存在，所以最好在计算前先判断下ifstream的状态。<br>(本来判断ifstream是否有效不该是客户的责任，原本想在ifstream无效时用文件名做参数抛出FileNotFoundException之类的异常，后来却发现从ifstream中居然无法得到文件名…)</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">MD5 md5;<br>md5.update(ifstream(<span class="hljs-string">&quot;D:\\test.txt&quot;</span>));<br>cout &lt;&lt; md5.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span> &lt;&lt; endl;<br><span class="hljs-comment">//或者更简单点</span><br>cout &lt;&lt; <span class="hljs-constructor">MD5(<span class="hljs-params">ifstream</span>(<span class="hljs-string">&quot;D:\\test.txt&quot;</span>)</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="4-3-最基本的用法"><a href="#4-3-最基本的用法" class="headerlink" title="4.3 最基本的用法"></a>4.3 最基本的用法</h2><p>上面的用来计算字符串和文件MD5值的接口都是为了方便才提供的，其实最基本的接口是：<br>void update(const void *input, size_t length);<br>update的另外两个重载都是基于它来实现的，下面的代码用上述接口来实现FileDigest函数，该函数用来计算文件的MD5值：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">string <span class="hljs-title">FileDigest</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string&amp; file)</span> </span>&#123;<br><span class="hljs-function">ifstream <span class="hljs-title">in</span><span class="hljs-params">(file.c_str(), ios::binary)</span></span>;<br><span class="hljs-keyword">if</span> (!in) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>MD5 md5;<br>std::streamsize length;<br><span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">while</span> (!in.<span class="hljs-built_in">eof</span>()) &#123;<br>in.<span class="hljs-built_in">read</span>(buffer, <span class="hljs-number">1024</span>);<br>length = in.<span class="hljs-built_in">gcount</span>();<br><span class="hljs-keyword">if</span> (length &gt; <span class="hljs-number">0</span>)<br>md5.<span class="hljs-built_in">update</span>(buffer, length);<br>&#125;<br>in.<span class="hljs-built_in">close</span>();<br><span class="hljs-keyword">return</span> md5.<span class="hljs-built_in">toString</span>();<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="4-4-下面看看测试代码："><a href="#4-4-下面看看测试代码：" class="headerlink" title="4.4 下面看看测试代码："></a>4.4 下面看看测试代码：</h2><p>test.cpp</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs q">#include <span class="hljs-string">&quot;md5.h&quot;</span><br>#include &lt;iostream&gt;<br><br>using namespace std;<br>void PrintMD5(const <span class="hljs-built_in">string</span>&amp; str, MD5&amp; <span class="hljs-built_in">md5</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;MD5(\&quot;&quot;</span> &lt;&lt; str &lt;&lt; <span class="hljs-string">&quot;\&quot;) = &quot;</span> &lt;&lt; <span class="hljs-built_in">md5</span>.toString() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-type">int</span> main() &#123;<br>MD5 <span class="hljs-built_in">md5</span>;<br><span class="hljs-built_in">md5</span>.<span class="hljs-keyword">update</span>(<span class="hljs-string">&quot;&quot;</span>);<br>PrintMD5(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-built_in">md5</span>);<br><br><span class="hljs-built_in">md5</span>.<span class="hljs-keyword">update</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>PrintMD5(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-built_in">md5</span>);<br><br><span class="hljs-built_in">md5</span>.<span class="hljs-keyword">update</span>(<span class="hljs-string">&quot;bc&quot;</span>);<br>PrintMD5(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-built_in">md5</span>);<br><br><span class="hljs-built_in">md5</span>.<span class="hljs-keyword">update</span>(<span class="hljs-string">&quot;defghijklmnopqrstuvwxyz&quot;</span>);<br>PrintMD5(<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>, <span class="hljs-built_in">md5</span>);<br><br><span class="hljs-built_in">md5</span>.reset();<br><span class="hljs-built_in">md5</span>.<span class="hljs-keyword">update</span>(<span class="hljs-string">&quot;message digest&quot;</span>);<br>PrintMD5(<span class="hljs-string">&quot;message digest&quot;</span>, <span class="hljs-built_in">md5</span>);<br><br><span class="hljs-built_in">md5</span>.reset();<br><span class="hljs-built_in">md5</span>.<span class="hljs-keyword">update</span>(ifstream(<span class="hljs-string">&quot;D:\\test.txt&quot;</span>));<br>PrintMD5(<span class="hljs-string">&quot;D:\\test.txt&quot;</span>, <span class="hljs-built_in">md5</span>);<br><br>return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">MD5</span>(<span class="hljs-string">&quot;&quot;</span>) = d<span class="hljs-number">41</span>d<span class="hljs-number">8</span>cd<span class="hljs-number">98</span>f<span class="hljs-number">00</span>b<span class="hljs-number">204</span>e<span class="hljs-number">9800998</span>ecf<span class="hljs-number">8427</span>e<br><span class="hljs-attribute">MD5</span>(<span class="hljs-string">&quot;a&quot;</span>) = <span class="hljs-number">0</span>cc<span class="hljs-number">175</span>b<span class="hljs-number">9</span>c<span class="hljs-number">0</span>f<span class="hljs-number">1</span>b<span class="hljs-number">6</span>a<span class="hljs-number">831</span>c<span class="hljs-number">399</span>e<span class="hljs-number">269772661</span><br><span class="hljs-attribute">MD5</span>(<span class="hljs-string">&quot;abc&quot;</span>) = <span class="hljs-number">900150983</span>cd<span class="hljs-number">24</span>fb<span class="hljs-number">0</span>d<span class="hljs-number">6963</span>f<span class="hljs-number">7</span>d<span class="hljs-number">28</span>e<span class="hljs-number">17</span>f<span class="hljs-number">72</span><br><span class="hljs-attribute">MD5</span>(<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>) = c<span class="hljs-number">3</span>fcd<span class="hljs-number">3</span>d<span class="hljs-number">76192</span>e<span class="hljs-number">4007</span>dfb<span class="hljs-number">496</span>cca<span class="hljs-number">67</span>e<span class="hljs-number">13</span>b<br><span class="hljs-attribute">MD5</span>(<span class="hljs-string">&quot;message digest&quot;</span>) = f<span class="hljs-number">96</span>b<span class="hljs-number">697</span>d<span class="hljs-number">7</span>cb<span class="hljs-number">7938</span>d<span class="hljs-number">525</span>a<span class="hljs-number">2</span>f<span class="hljs-number">31</span>aaf<span class="hljs-number">161</span>d<span class="hljs-number">0</span><br><span class="hljs-attribute">MD5</span>(<span class="hljs-string">&quot;D:\test.txt&quot;</span>) = <span class="hljs-number">7</span>ac<span class="hljs-number">66</span>c<span class="hljs-number">0</span>f<span class="hljs-number">148</span>de<span class="hljs-number">9519</span>b<span class="hljs-number">8</span>bd<span class="hljs-number">264312</span>c<span class="hljs-number">4</span>d<span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><h1 id="5-测试程序"><a href="#5-测试程序" class="headerlink" title="5 测试程序"></a>5 测试程序</h1><a href="/2020/07/27/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/02MD5%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/md5_test.rar" title="md5_test">md5_test</a>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用git命令</title>
    <link href="/2020/07/27/04DevOps/00%20%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/07/27/04DevOps/00%20%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="1-远程主机操作"><a href="#1-远程主机操作" class="headerlink" title="1. 远程主机操作"></a>1. 远程主机操作</h3><div class="code-wrapper"><pre><code class="hljs">//查看该主机的详细信息git remote show &lt;主机名&gt;//添加远程主机，添加后通过《 8.取回远程主机某个分支的更新》来建立本地新的分支git remote add &lt;主机名&gt; &lt;网址&gt;//删除远程主机git remote rm &lt;主机名&gt;远程主机的改名git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</code></pre></div><h3 id="2-checkout-远端指定分支"><a href="#2-checkout-远端指定分支" class="headerlink" title="2.checkout 远端指定分支"></a>2.checkout 远端指定分支</h3><div class="code-wrapper"><pre><code class="hljs">$ git checkout -b xxxx&lt;本地分支名称&gt; yyyy&lt;远端分支名&gt;</code></pre></div><h3 id="3-合并多个commit"><a href="#3-合并多个commit" class="headerlink" title="3.合并多个commit"></a>3.合并多个commit</h3><div class="code-wrapper"><pre><code class="hljs">$ git rebase -i HEAD~n  # 将commit的前n个合并，在出现的窗口中将要合并的pick修改为squash$ git push -f</code></pre></div><h3 id="4-清理远端已经删除的本地分支"><a href="#4-清理远端已经删除的本地分支" class="headerlink" title="4.清理远端已经删除的本地分支"></a>4.清理远端已经删除的本地分支</h3><div class="code-wrapper"><pre><code class="hljs">$ git pull -p# 等同于下面的命令$ git fetch --prune origin $ git fetch -p</code></pre></div><h3 id="5-删除远端分支"><a href="#5-删除远端分支" class="headerlink" title="5.删除远端分支"></a>5.删除远端分支</h3><div class="code-wrapper"><pre><code class="hljs">$ git push origin :xxx# 等同于$ git push origin --delete xxx</code></pre></div><h3 id="6-添加标签"><a href="#6-添加标签" class="headerlink" title="6.添加标签"></a>6.添加标签</h3><div class="code-wrapper"><pre><code class="hljs">$git tag -a xxx -m&quot;xxxxxxx&quot;将标签推送到服务器$git push origin tag-name</code></pre></div><h3 id="7-清理本地没有的tag"><a href="#7-清理本地没有的tag" class="headerlink" title="7.清理本地没有的tag"></a>7.清理本地没有的tag</h3><div class="code-wrapper"><pre><code class="hljs">先清理本地所有tag再获取远端的tag$ git tag -l | xargs git tag -d$ git fetch -t -p -f</code></pre></div><h3 id="8-推送到远端"><a href="#8-推送到远端" class="headerlink" title="8.推送到远端"></a>8.推送到远端</h3><div class="code-wrapper"><pre><code class="hljs">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></pre></div><h3 id="9-取回远程主机某个分支的更新"><a href="#9-取回远程主机某个分支的更新" class="headerlink" title="9.取回远程主机某个分支的更新"></a>9.取回远程主机某个分支的更新</h3><div class="code-wrapper"><pre><code class="hljs">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></pre></div><h3 id="10-撤销commit，但未git-push的命令"><a href="#10-撤销commit，但未git-push的命令" class="headerlink" title="10.撤销commit，但未git push的命令"></a>10.撤销commit，但未git push的命令</h3><div class="code-wrapper"><pre><code class="hljs">git reset --hard id 完成撤销,同时将代码恢复到前一commit_id 对应的版本git reset id 完成Commit命令的撤销，但是不对代码修改进行撤销，可以直接通过git commit 重新提交对本地代码的修改git reset --hard HEAD撤销当前的所有修改</code></pre></div><h3 id="11-比较两个版本间的差异"><a href="#11-比较两个版本间的差异" class="headerlink" title="11.比较两个版本间的差异"></a>11.比较两个版本间的差异</h3><div class="code-wrapper"><pre><code class="hljs">git diff commit_id_old commit_id_new</code></pre></div><h3 id="12-更改远端分支"><a href="#12-更改远端分支" class="headerlink" title="12.更改远端分支"></a>12.更改远端分支</h3><div class="code-wrapper"><pre><code class="hljs">先删除老的分支git push --delete origin old_branch修改本地的分支名git branch -m old_branch new_branch推送本地的新分支到远端git push origin new_branch:new_branch</code></pre></div><h3 id="13-生成patch"><a href="#13-生成patch" class="headerlink" title="13.生成patch"></a>13.生成patch</h3><div class="code-wrapper"><pre><code class="hljs">生成从commitid为xxx到当前提交的patch，每个提交一个patch文件, 存放在当前的dir目录下git format-patch xxx -o dir</code></pre></div><h3 id="14-应用patch"><a href="#14-应用patch" class="headerlink" title="14.应用patch"></a>14.应用patch</h3><div class="code-wrapper"><pre><code class="hljs">先检测xxx.patch文件是否和当前的版本有冲突git apply --check xxx.patch再将xxx.patch合并到当前的分支中git apply xxx.patch</code></pre></div><h3 id="15-修改源地址"><a href="#15-修改源地址" class="headerlink" title="15.修改源地址"></a>15.修改源地址</h3><div class="code-wrapper"><pre><code class="hljs">git remove set-url origin newaddr</code></pre></div><h3 id="16-合并某个commit到当前aa分支上"><a href="#16-合并某个commit到当前aa分支上" class="headerlink" title="16.合并某个commit到当前aa分支上"></a>16.合并某个commit到当前aa分支上</h3><div class="code-wrapper"><pre><code class="hljs">git checkout aagit cherry-pick commit_id其中commit_id是某个非aa分支上的commit_id</code></pre></div><h3 id="17-修改分支名"><a href="#17-修改分支名" class="headerlink" title="17. 修改分支名"></a>17. 修改分支名</h3><div class="code-wrapper"><pre><code class="hljs">git  branch -m old_branch new_branch</code></pre></div><h3 id="18-合并分支多个commit到主分支，使主分支只有有一个干净清晰的log"><a href="#18-合并分支多个commit到主分支，使主分支只有有一个干净清晰的log" class="headerlink" title="18. 合并分支多个commit到主分支，使主分支只有有一个干净清晰的log"></a>18. 合并分支多个commit到主分支，使主分支只有有一个干净清晰的log</h3><div class="code-wrapper"><pre><code class="hljs">git checkout master //切换回主分支git pull origin master //拉取远端master代码git merge --squash 分支名  //如遇冲突就解决冲突git commit -m &quot;这里是注释&quot;git push origin master //提交master代码到远端</code></pre></div><h3 id="19-git-submodule-添加子仓库"><a href="#19-git-submodule-添加子仓库" class="headerlink" title="19.git submodule 添加子仓库"></a>19.git submodule 添加子仓库</h3><p>Git Submodule 允许一个git仓库，作为另一个git仓库的子目录，并且保持父项目和子项目相互独立</p><div class="code-wrapper"><pre><code class="hljs"><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 查看子模块</span><br>$ git <span class="hljs-keyword">submodule</span><br><span class="hljs-keyword"></span><span class="hljs-comment"># 为当前工程添加指定分支 xx 的 submodule</span><br>$ git <span class="hljs-keyword">submodule </span><span class="hljs-keyword">add </span>-<span class="hljs-keyword">b </span>xx &lt;仓库地址&gt; &lt;本地路径&gt;<br><span class="hljs-comment"># 为当前工程添加submodule</span><br>$ git <span class="hljs-keyword">submodule </span><span class="hljs-keyword">add </span>&lt;仓库地址&gt; &lt;本地路径&gt;<br><span class="hljs-comment"># 下载的工程带有submodule,使用以下命令下载子模块内容</span><br>$ git <span class="hljs-keyword">submodule </span>update --init --recursive<br><span class="hljs-comment"># 更新子模块为远程项目的最新版本</span><br>$ git <span class="hljs-keyword">submodule </span>update --remote<br><span class="hljs-comment"># 删除子模块需要经过以下4步, 以删除assets文件夹为例</span><br><span class="hljs-comment">#1. 删除子模块文件夹</span><br>$ git rm --<span class="hljs-keyword">cached </span>assets<br><span class="hljs-comment">#2. 删除.gitmodules文件中相关子模块信息</span><br><span class="hljs-comment">#3. 删除.git/config中的相关子模块信息</span><br><span class="hljs-comment">#4. 删除.git/modules/src/文件夹中的相关子模块文件</span><br><br></code></pre></td></tr></table></figure></code></pre><h3 id="20-更新源地址"><a href="#20-更新源地址" class="headerlink" title="20 更新源地址"></a>20 更新源地址</h3><div class="code-wrapper"><pre><code class="hljs"><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> &lt;<span class="hljs-string">new_addr</span>&gt;<br></code></pre></td></tr></table></figure></code></pre><h2 id="二-遇到问题及解决方法"><a href="#二-遇到问题及解决方法" class="headerlink" title="二. 遇到问题及解决方法"></a>二. 遇到问题及解决方法</h2><h3 id="1-git-push-或者-clone-出错"><a href="#1-git-push-或者-clone-出错" class="headerlink" title="1. git push 或者 clone 出错"></a>1. git push 或者 clone 出错</h3><p>出错代码:<br>    <figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>RPC failed; curl 56 OpenSSL SSL_read: error:1408F119:SSL routines:ssl3_get_record:decryption failed or bad record mac, errno 0<br>fatal: the remote end hung up unexpectedly<br>fatal: early EOF<br>fatal: index-pack failed<br></code></pre></td></tr></table></figure></p><p>解决方法：增大 postbuffer<br>    <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global http.postBuffer 1048576000</span><br></code></pre></td></tr></table></figure></p><h3 id="2-git-archive-时没有同步submodule"><a href="#2-git-archive-时没有同步submodule" class="headerlink" title="2. git archive 时没有同步submodule"></a>2. git archive 时没有同步submodule</h3><p>在使用 git archive的时候，发现并没有把项目里的submodule里的文件归档过去，只有一个submodule的文件夹</p><p>解决思路：1、先在父目录使用git archive后，再通过git submodule foreach遍历submodule，对sudmodule里的文件进行git archive，这样最后，所有文件都能归档到一个地方了</p><div class="code-wrapper"><pre><code class="hljs"><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 函数第一个参数为项目名</span><br>function pack() &#123;<br><span class="hljs-attribute">PKG_NAME</span>=<span class="hljs-variable">$&#123;1&#125;</span><br><span class="hljs-attribute">PKG_VERSION</span>=$(grep <span class="hljs-string">&#x27;^Version:&#x27;</span> <span class="hljs-variable">$&#123;PKG_NAME&#125;</span>.spec | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br>cd <span class="hljs-built_in">..</span><br><span class="hljs-attribute">curDir</span>=`pwd`<br><span class="hljs-attribute">PROJECT_NAME</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PKG_NAME&#125;</span>-<span class="hljs-variable">$&#123;PKG_VERSION&#125;</span>&quot;</span><br>git archive <span class="hljs-attribute">--format</span>=tar <span class="hljs-attribute">--prefix</span>=<span class="hljs-variable">$PROJECT_NAME</span>/ HEAD | (tar xpf -) #归档父项目后解压到指定目录<br>git submodule <span class="hljs-keyword">foreach</span> | <span class="hljs-keyword">while</span> read subdir; <span class="hljs-keyword">do</span> <br><span class="hljs-attribute">subdir</span>=<span class="hljs-variable">$&#123;subdir#*\&#x27;&#125;</span>; #去除最左边的单引号<br><span class="hljs-attribute">subdir</span>=<span class="hljs-variable">$&#123;subdir%*\&#x27;&#125;</span>; #去除最右边的单引号<br>[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;subdir&#125;</span>&quot;</span> = <span class="hljs-string">&quot;&quot;</span> ] &amp;&amp; continue; #加一步判断，subdir为<span class="hljs-string">&quot;&quot;</span>则continue<br>echo Running git archive submodules<span class="hljs-built_in">..</span>. <span class="hljs-variable">$&#123;subdir&#125;</span><br>(cd <span class="hljs-variable">$&#123;subdir&#125;</span> &amp;&amp; git archive <span class="hljs-attribute">--format</span>=tar <span class="hljs-attribute">--prefix</span>=<span class="hljs-variable">$&#123;subdir&#125;</span>/ HEAD | (cd <span class="hljs-variable">$&#123;curDir&#125;</span>/<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>/ &amp;&amp; tar xpf -)); #归档submodule后解压到父目录<br>done<br><br>tar zcpf <span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>.tar.gz <span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span><br>/bin/mv -f <span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>.tar.gz packaging<br>rm -rf <span class="hljs-variable">$&#123;PKG_NAME&#125;</span>-<span class="hljs-variable">$&#123;PKG_VERSION&#125;</span><br>cd -<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h3 id="3-git-status-中文显示乱码"><a href="#3-git-status-中文显示乱码" class="headerlink" title="3. git status 中文显示乱码"></a>3. git status 中文显示乱码</h3><p><strong>原因:</strong></p><p>在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。</p><p><strong>解决办法:</strong></p><p>将git配置文件 core.quotepath项设置为false。quotepath表示引用路径，加上–global表示全局配置</p><p>git bash终端输入命令:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">git config --global core.quotepath <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql 常用命令</title>
    <link href="/2020/07/27/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/00%20%E4%BC%A0%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93/00%20mysql/mysql%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/07/27/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/00%20%E4%BC%A0%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93/00%20mysql/mysql%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<ul><li><p>显示当前的缓存状态<br><code>show variables like &#39;%query_cache%&#39;; </code></p></li><li><p>显示当前的存储类型<br><code>show engines;</code></p></li><li><p>删除数据库test_db下所有表<br><code>select concat(&#39;drop table &#39;,table_name,&#39;;&#39;) from information_schema.tables where table_schema=&#39;test_db&#39;;</code></p></li><li><p>清空表数据<br>truncate tablename;</p></li><li><p>查询库csgw中所有表的记录数<br><code>use information_schema</code><br><code>select table_name,table_rows from tables where TABLE_SCHEMA=&#39;csgw&#39; order by table_rows desc;</code></p></li><li><p>显示当前数据库的user表结构<br>show columns from user;</p></li><li><p>切换当前数据库到whb_test<br><code>user whb_test;</code></p></li><li><p>创建一个user表，主键为name，20字符，passwd字段为64字符不能为空<br><code>CREATE TABLE user(name VARCHAR(20) not null primary key, passwd VARCHAR(64) not null, id int(4));</code></p></li><li><p>给一个用户赋予数据库权限</p><figure class="highlight sql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs sql">语法：mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">grant</span> 权限<span class="hljs-number">1</span>,权限<span class="hljs-number">2</span>,...权限n <span class="hljs-keyword">on</span> 数据库名称.表名称 <span class="hljs-keyword">to</span> 用户名@用户地址 identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;连接口令&#x27;</span>;<br>权限<span class="hljs-number">1</span>,权限<span class="hljs-number">2</span>,...权限n代表<br><span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span>,update,<span class="hljs-keyword">delete</span>,<span class="hljs-keyword">create</span>,<span class="hljs-keyword">drop</span>,index,<span class="hljs-keyword">alter</span>,<span class="hljs-keyword">grant</span>,<span class="hljs-keyword">references</span>,reload,shutdown,process,file等<span class="hljs-number">14</span>个权限<br><br>实例：mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span>,update,<span class="hljs-keyword">delete</span>,<span class="hljs-keyword">create</span>,<span class="hljs-keyword">drop</span> <span class="hljs-keyword">on</span> whb_test.employee <span class="hljs-keyword">to</span> joe<span class="hljs-variable">@10</span><span class="hljs-number">.163</span><span class="hljs-number">.225</span><span class="hljs-number">.87</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br>给来自<span class="hljs-number">10.163</span><span class="hljs-number">.225</span><span class="hljs-number">.87</span>的用户joe分配可对数据库whb_test的employee表进行<span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span>,update,<span class="hljs-keyword">delete</span>,<span class="hljs-keyword">create</span>,<span class="hljs-keyword">drop</span>等操作的权限，并设定口令为<span class="hljs-number">123456</span>。<br>mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span> whb_test.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> whb<span class="hljs-variable">@10</span><span class="hljs-number">.163</span><span class="hljs-number">.225</span><span class="hljs-number">.87</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br>给来自<span class="hljs-number">10.163</span><span class="hljs-number">.225</span><span class="hljs-number">.87</span>的用户whb分配可对数据库whb_test所有表进行所有操作的权限，并设定口令为<span class="hljs-number">123</span>。<br>mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> joe<span class="hljs-variable">@10</span><span class="hljs-number">.163</span><span class="hljs-number">.225</span><span class="hljs-number">.87</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br>给来自<span class="hljs-number">10.163</span><span class="hljs-number">.225</span><span class="hljs-number">.87</span>的用户joe分配可对所有数据库的所有表进行所有操作的权限，并设定口令为<span class="hljs-number">123</span>。<br>mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> joe<span class="hljs-variable">@localhost</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br>给本机用户joe分配可对所有数据库的所有表进行所有操作的权限，并设定口令为<span class="hljs-number">123</span>。<br><br>刷新权限：<br>FLUSH   PRIVILEGES;<br></code></pre></td></tr></table></figure></li><li><p>创建一个名为whb_test的数据库<br><code>CREATE DATABASE whb_test CHARACTER SET &#39;utf8&#39; COLLATE &#39;utf8_general_ci&#39;;</code></p></li><li><p>用whb用户登录172.16.1.110服务器的mysql：<br><code>         mysql -uwhb -p -h 172.16.1.110</code><br>使用此方法登录必须有ip</p></li><li><p>删除一个用户名为whb的用户</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;whb&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>; <br>flush <span class="hljs-keyword">privileges</span>; <br></code></pre></td></tr></table></figure></li><li><p>创建一个用户名为whb，密码为123456的用户<br><code>create user whb identified by &#39;123456&#39;;</code></p></li><li><p> 创建一个密码为123456的用户test_user，对所有数据库有操作权限<br><code>grant select,insert,update,delete on *.* to test_user@&quot;%&quot; Identified by &quot;123456&quot;;</code></p></li><li><p>登录方法：<br><code>mysql -uxxxx -pxxxx --host=192.168.1.110  </code></p></li><li><p>root登录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span> -uroot -p<span class="hljs-number">123456</span> mysql<br><span class="hljs-attribute">mysql</span> -utest_user -p<span class="hljs-number">123456</span> -h <span class="hljs-number">192.168.188.125</span> -P <span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure></li><li><p>查看mytable表编码格式<br><code>show create table mytable; </code></p></li><li><p>查看test数据库的编码格式<br><code>show create database test;</code></p></li></ul><p>设置数据库db_name默认为utf8:<br>???</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UML类图图示样例</title>
    <link href="/2020/07/27/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02UML%E7%B1%BB%E5%9B%BE%E5%9B%BE%E7%A4%BA%E6%A0%B7%E4%BE%8B/"/>
    <url>/2020/07/27/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02UML%E7%B1%BB%E5%9B%BE%E5%9B%BE%E7%A4%BA%E6%A0%B7%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<img src="/2020/07/27/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02UML%E7%B1%BB%E5%9B%BE%E5%9B%BE%E7%A4%BA%E6%A0%B7%E4%BE%8B/uml.png" class="" title="样例">]]></content>
    
    
    <categories>
      
      <category>架构设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时序图、活动图、状态图、协作图的区别</title>
    <link href="/2020/07/27/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02%E6%97%B6%E5%BA%8F%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%E3%80%81%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/07/27/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02%E6%97%B6%E5%BA%8F%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%E3%80%81%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h1><p>时序图用于描述对象之间的传递消息的时间顺序, 即用例中的行为顺序.当执行一个用例时, 时序图中的每条消息对应了一个类操作或者引起转换的触发事件.<br>在 UML 中, 时序图表示为一个二维的关系图, 其中, 纵轴是时间轴, 时间延竖线向下延伸. 横轴代表在协作中各个独立的对象. 当对象存在时, 生命线用一条虚线表示, 消息用从一个对象的生命线到另一个对象的生命线的箭头表示. 箭头以时间的顺序在图中上下排列.</p><img src="/2020/07/27/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02%E6%97%B6%E5%BA%8F%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%E3%80%81%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%E7%9A%84%E5%8C%BA%E5%88%AB/1.gif" class="" title="图1. ATM 用户成功登陆的时序图"><p>时序图中的基本概念</p><ul><li>对象: 时序图中对象使用矩形表示, 并且对象名称下有下划线. 将对象置于时序图的顶部说明在交互开始时对象就已经存在了. 如果对象的位置不在顶部, 表示对象是在交互的过程中被创建的.</li><li>生命线: 生命线是一条垂直的虚线. 表示时序图中的对象在一段生命周期内存在. 每个对象底部中心的位置都带有生命线.</li><li>消息: 两个对象之间的单路通信. 从发送方指向接收方. 在时序图中很少使用返回消息.</li><li>激活: 时序图可以描述对象的激活和钝化. 激活表示该对象被占用以完成某个任务. 钝化指对象处于空闲状态, 等待消息. 在 UML 中, 对象激活时将对象的生命线拓宽为矩形来表示的. 矩形称为计划条或控制期. 对象就是在激活条的顶部被激活的. 对象在完成自己的工作后被钝化.<br>对象的创建和销毁: 在时序图中, 对象的默认位置是在图的顶部. 这说明对象在交互开始之前就已经存在了. 如果对象是在交互过程中创建的, 那么就应该将对象放到中间部分. 如果要撤销一个对象, 在其生命线终止点处放置 “ X” 符号.<br>  练习:  <img src="/2020/07/27/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02%E6%97%B6%E5%BA%8F%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%E3%80%81%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%E7%9A%84%E5%8C%BA%E5%88%AB/2.gif" class="" title="图2.孙中山的......"></li></ul><h1 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h1><p>在 UML 中, 活动图本质上就是流程图. 它用于描述系统的活动, 判定点和分支等.</p><img src="/2020/07/27/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02%E6%97%B6%E5%BA%8F%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%E3%80%81%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%E7%9A%84%E5%8C%BA%E5%88%AB/3.gif" class="" title="图3.活动图"><p>活动图中的基本概念：</p><ul><li>动作状态: 原子的, 不可中断的动作, 并在此动作完成之后向另一个动作转变. 在 UML 中动作状态用圆角矩形 表示, 动作状态所表示的动作写在圆角矩形内部.</li><li>分支与合并: 分支在软件系统中很常见. 一般用于表示对象类所具有的条件行为. 用一个布尔型表达式的真假来判定动作的流向. 条件行为用分支和合并表达.在活动图中, 分支用空心小菱形 表示. 分支包括一个入转换和两个带条件的出转换, 出转换的条件应该是互斥的, 须保证只有一条出转换能够被触发. 合并包含两个带条件的入转换和一个出转换.</li></ul><h1 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h1><p>状态图: 通过建立对象的生存周期模型来描述对象随时间变化的动态行为.</p><img src="/2020/07/27/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02%E6%97%B6%E5%BA%8F%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%E3%80%81%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%E7%9A%84%E5%8C%BA%E5%88%AB/4.gif" class="" title="图 4.状态图"><p>状态图中的基本概念</p><ul><li>状态: 用圆角矩形表示. 状态名称表示状态的名字, 通常用字符串表示. 一个状态的名称在状态图所在的上下文中应该是唯一的.</li><li>转换: 用带箭头的直线表示. 一端连着源状态, 一端连着目标状态.</li><li>初始状态: 每个状态图都有一个初始状态. 此状态代表状态图的起始位置. 初始状态只能作为转换的源, 不能作为转换的目标, 并且在状态图中只能有一个. 初始状态用一个实心圆表示.</li><li>终止状态: 模型元素的最后状态, 是一个状态图的终止点. 终止状态在一个状态图中可以有多个.</li></ul><h1 id="协作图"><a href="#协作图" class="headerlink" title="协作图"></a>协作图</h1><p>协作图(也叫合作图)是一种交互图.<br>时序图主要侧重于对象间消息传递在时间上的先后关系, 而协作图表达对象间的交互过程及对象间的关联关系</p><img src="/2020/07/27/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02%E6%97%B6%E5%BA%8F%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%E3%80%81%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%E7%9A%84%E5%8C%BA%E5%88%AB/5.gif" class="" title="图 5 协作图">]]></content>
    
    
    <categories>
      
      <category>架构设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工程</tag>
      
      <tag>UML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>定位程序cpu 100%方法</title>
    <link href="/2020/07/26/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/06%E5%BC%80%E5%8F%91%E5%88%86%E6%9E%90/00%E5%AE%9A%E4%BD%8Dcpu%20100_p%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2020/07/26/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/06%E5%BC%80%E5%8F%91%E5%88%86%E6%9E%90/00%E5%AE%9A%E4%BD%8Dcpu%20100_p%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="使用perf-定位"><a href="#使用perf-定位" class="headerlink" title="使用perf 定位"></a>使用perf 定位</h1><figure class="highlight elixir"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># -g开启调用关系分析，-p指定php-fpm的进程号94806</span><br><span class="hljs-variable">$ </span>perf top -g -p <span class="hljs-number">94806</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sqlite3 客户端操作命令</title>
    <link href="/2020/07/26/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/00%20%E4%BC%A0%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93/01%20sqlite/sqlite3%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/07/26/05%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/00%20%E4%BC%A0%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93/01%20sqlite/sqlite3%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>导出查询内容到文件中</p><figure class="highlight lua"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs lua">sqlite3 www_cache.db;<br>sqlite&gt; .<span class="hljs-built_in">output</span> <span class="hljs-number">1.</span>txt<br>sqlite&gt; <span class="hljs-built_in">select</span> <span class="hljs-built_in">path</span>,size from file_info;<br>sqlite&gt; .<span class="hljs-built_in">output</span> <span class="hljs-built_in">stdout</span><br></code></pre></td></tr></table></figure><h1 id="直接执行后面的sql语句"><a href="#直接执行后面的sql语句" class="headerlink" title="直接执行后面的sql语句"></a>直接执行后面的sql语句</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sqlite3 data1<span class="hljs-regexp">/www/u</span>ri_meta.db <span class="hljs-string">&quot;select count(*) from uri_meta&quot;</span><br></code></pre></td></tr></table></figure><p>#查询表结构信息</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sqlite3 <span class="hljs-regexp">/opt/</span>soft<span class="hljs-regexp">/cachedb/</span>data<span class="hljs-regexp">/data1/</span>www/uri_meta.db <span class="hljs-string">&quot;select * from sqlite_master &quot;</span><br></code></pre></td></tr></table></figure><p>#统计记录数，通过查询mtime列快速查询记录数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sqlite3 <span class="hljs-regexp">/opt/</span>soft<span class="hljs-regexp">/cachedb/</span>data<span class="hljs-regexp">/data1/</span>www/uri_meta.db <span class="hljs-string">&quot;select count(mtime) from uri_meta &quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>sqlite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大端-小端对齐判定函数</title>
    <link href="/2020/07/26/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/02%E5%A4%A7%E7%AB%AF-%E5%B0%8F%E7%AB%AF%E5%AF%B9%E9%BD%90%E5%88%A4%E5%AE%9A%E5%87%BD%E6%95%B0/"/>
    <url>/2020/07/26/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/01C&amp;C++/02%E5%A4%A7%E7%AB%AF-%E5%B0%8F%E7%AB%AF%E5%AF%B9%E9%BD%90%E5%88%A4%E5%AE%9A%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>大端-小端对齐判定方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span> </span>&#123;<br>(<span class="hljs-keyword">void</span>)argc;<br>(<span class="hljs-keyword">void</span>)argv;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-keyword">short</span> s;<br><span class="hljs-keyword">char</span> c[<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">short</span>)];<br>&#125;un;<br>un.s = <span class="hljs-number">0x0102</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">short</span>)!=<span class="hljs-number">2</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(short)=%d\n&quot;</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">short</span>));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>== un.c[<span class="hljs-number">0</span>] &amp;&amp; <span class="hljs-number">2</span>==un.c[<span class="hljs-number">1</span>]) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Big end\n&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>==un.c[<span class="hljs-number">0</span>] &amp;&amp; <span class="hljs-number">1</span>==un.c[<span class="hljs-number">1</span>]) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Little end\n&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unknown \n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么函数参数提示《remove this mut》</title>
    <link href="/2020/07/26/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/02Rust/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E6%8F%90%E7%A4%BA%E3%80%8Aremove%20this%20mut%E3%80%8B/"/>
    <url>/2020/07/26/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/02Rust/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E6%8F%90%E7%A4%BA%E3%80%8Aremove%20this%20mut%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>翻译自《<a href="https://www.snoyman.com/blog/2020/05/no-mutable-parameters-in-rust%E3%80%8B">https://www.snoyman.com/blog/2020/05/no-mutable-parameters-in-rust》</a></p><p>在回顾Begin Rust书中的倒数第二章时，出现了一个稍微高级的话题。这个话题引起了我一段时间的兴趣，特别是因为它展示了Rust和Haskell如何处理可变性的一些根本差异。该主题对于本书而言太高了，但是我想提供一个外部资源，以供有好奇心的人参考。就是这里！</p><p>让我们逐步构建它。以下程序可以编译吗？</p><figure class="highlight sas"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs sas">fn ma<span class="hljs-meta">in(</span>) &#123;<br>    let <span class="hljs-meta">x</span> = 5;<br>    <span class="hljs-meta">x</span> += 1;<br>    println!(<span class="hljs-string">&quot;x == &#123;&#125;&quot;</span>, <span class="hljs-meta">x</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>答：不！x是一个不可变的变量，因此不能+= 1在其上使用。解决这个问题很容易：add mut：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> x = <span class="hljs-number">5</span>;<br>    x += <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x == &#123;&#125;&quot;</span>, x);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是由于加1和打印在我的应用程序中是如此重要（是的，这很讽刺），所以我决定将其提取为自己的函数。告诉我，这段代码可以编译吗？</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">fn add_and_print(<span class="hljs-keyword">x</span>: <span class="hljs-type">i32</span>) &#123;<br>    <span class="hljs-keyword">x</span> +<span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>    println!(<span class="hljs-string">&quot;x == &#123;&#125;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span>)<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>不，并且出于与第一个示例相同的原因：x是不可变的。修复也很容易：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">fn add_and_print(mut <span class="hljs-keyword">x</span>: <span class="hljs-type">i32</span>) &#123;<br>    <span class="hljs-keyword">x</span> +<span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>    println!(<span class="hljs-string">&quot;x == &#123;&#125;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span>)<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在，我们的函数<code>add_and_print</code>拥有唯一的参数x,它的类型是i32，并且是可变的。嗯不错。最后，我们可以在  <code>main    </code>中调用此函数。告诉我，该程序可以编译并运行吗？是否和预想的一样没有任何警告吗？</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sas">fn ma<span class="hljs-meta">in(</span>) &#123;<br>    let mut <span class="hljs-meta">x</span> = 5;<br>    add_and_p<span class="hljs-meta">rint(</span><span class="hljs-meta">x</span>);<br>&#125;<br><br>fn add_and_p<span class="hljs-meta">rint(</span>mut <span class="hljs-meta">x</span>: i32) &#123;<br>    <span class="hljs-meta">x</span> += 1;<br>    println!(<span class="hljs-string">&quot;x == &#123;&#125;&quot;</span>, <span class="hljs-meta">x</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>答：它会编译，运行并生成输出x == 6。但是，它确实有一个警告：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">warning: variable does not need to be mutable<br> --&gt; src/main.rs:2:9<br>  |<span class="hljs-string"></span><br><span class="hljs-string">2 </span>|<span class="hljs-string">     let mut x = 5;</span><br><span class="hljs-string">  </span>|<span class="hljs-string">         ----^</span><br><span class="hljs-string">  </span>|<span class="hljs-string">         </span>|<br>  |<span class="hljs-string">         help: remove this `mut`</span><br><span class="hljs-string">  </span>|<br></code></pre></td></tr></table></figure><p>最初，至少对于我来说，这确实令人惊讶。<code>add_and_prin</code>t需要接收一个可变变量i32作为其第一个参数。我们为其提供了可变的i32。然后编译器说<code>mut</code>在 <code>main</code>中是不必要的。这是什么情况？</p><p>我上面的解释有一个错误。函数<code>add_and_print</code>，可能非常令人困惑，不用将可变变量i32作为参数。“但是前面说需要mut的！！！”，而现在又说mut是不必要的。 确实如此。mut详细信息位于函数内部，而不是其类型签名的一部分。这听起来令人困惑，所以让我解释一下。</p><p>在Rust中有一个模式，我称之为rust的3条规则。这涵盖了以下事实：在许多情况下，我们最终会得到三个“版本”的事物：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">An immutable <span class="hljs-keyword">borrow </span>  <span class="hljs-comment"># 不可变借用</span><br>A mutable <span class="hljs-keyword">borrow </span> <span class="hljs-comment"># 可变借用</span><br>A <span class="hljs-keyword">move </span> <span class="hljs-comment"># 移动</span><br></code></pre></td></tr></table></figure><p>这可以应用于函数参数，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">immutable_borrow</span>(<span class="hljs-params">x: &amp;<span class="hljs-keyword">String</span></span>)</span><br><span class="hljs-function"><span class="hljs-title">fn</span> <span class="hljs-title">mutable_borrow</span>(<span class="hljs-params">x: &amp;mut <span class="hljs-keyword">String</span></span>)</span><br><span class="hljs-function"><span class="hljs-title">fn</span> <span class="hljs-title">move</span>(<span class="hljs-params">x: <span class="hljs-keyword">String</span></span>)</span><br></code></pre></td></tr></table></figure><p>请注意，差异完全在冒号之后。冒号后的内容是3个不同的<code>类型</code>，而<code>类型</code>构成了<code>函数签名</code>。</p><p>但是，示例中的<code>x</code>冒号前的内容对<code>函数签名</code>没有影响。<code>变量名称</code>与函数的签名无关。一旦冒号右边传递一个<code>值</code>函数即可决定要调用的内容。</p><p>此规则不仅适用于变量名称。也适用于<code>可变变量</code>。<code>mutable</code>是rust中<code>变量</code>的一个feature而不是<code>值</code>的feature。当使用let mut x = 5时，表示的是 “创建一个叫x的<code>变量</code>，它指向一个<code>值</code>5，并且允许用x来对该<code>值</code>进行改变。” 如果没有mut，将不再被允许通过<code>变量</code>x对该<code>值</code>进行改变。</p><p>您可能会有一个直觉的反应，如果您无法修改<code>变量</code>，那你就只能只读它了。一般直觉应该就是这样。但Rust中并非如此。您还可以做另一件事：将<code>值</code>移到另一个作用域。<code>add_and_print</code>通过<code>move</code>接受<code>值</code>，即使x是一个不可变的<code>变量</code>，我仍然可以移动它所指向的<code>值</code>。</p><p>一旦移动了<code>值</code>，那就完全取决于<code>add_and_print</code>如何处理它。即使原始<code>变量</code>是不可变的，也可以将其变为可变的。这是因为在函数调用中<code>值</code>本身被传递过来，而不是变量。而值可以根据需要来变为可变的。</p><p>因此，该程序的无警告版本为：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sas">fn ma<span class="hljs-meta">in(</span>) &#123;<br>    let <span class="hljs-meta">x</span> = 5;<br>    add_and_p<span class="hljs-meta">rint(</span><span class="hljs-meta">x</span>);<br>&#125;<br><br>fn add_and_p<span class="hljs-meta">rint(</span>mut <span class="hljs-meta">x</span>: i32) &#123;<br>    <span class="hljs-meta">x</span> += 1;<br>    println!(<span class="hljs-string">&quot;x == &#123;&#125;&quot;</span>, <span class="hljs-meta">x</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上，即使没有函数调用，move后为可变的也是可能发生的。例如，您可以在单个函数中将不可变变量“升级”为可变变量：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> y = x;<br>    y += <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;y == &#123;&#125;&quot;</span>, y);<br>&#125;<br></code></pre></td></tr></table></figure><p>“等一下” 您抱怨道，“你不能将不可变的引用“升级”为可变的引用！” ，对于我的解释或许还有其他类似的关于抱怨。我在这里稍加修饰的是: 当涉及到引用时，可变性被转化为值的可变性。那是因为对于类似x: &amp;i32这种形式的引用，x自身并没有任何数值，它<code>引用</code>了一个数字。对于可变或不可变是对<code>引用</code>本身来说的，因为<code>引用</code>自身是一种类型。因此，您不能简单地将不可变引用升级为可变引用。此代码已损坏：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> x: <span class="hljs-built_in">i32</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">let</span> y: &amp;<span class="hljs-built_in">i32</span> = &amp;x;<br>    <span class="hljs-keyword">let</span> z: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">i32</span> = y; <span class="hljs-comment">// 不能简单的将y升级为可变的</span><br><br>    *z += <span class="hljs-number">1</span>;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x == &#123;&#125;&quot;</span>, x);<br>&#125;<br></code></pre></td></tr></table></figure><p>因此，总结一下：</p><ul><li>您可以拥有<code>值</code>，或<code>值</code>的<code>不变引用</code>或<code>值</code>的<code>可变引用</code></li><li><code>值</code>只有2种状态，要么可变的，要么不可变</li><li>相似的<code>变量</code>也只有2种状态，要么可变的，要么不可变</li><li>当将<code>值</code>移动到新<code>变量</code>中（通过 let或函数调用）时，可以更改<code>变量</code>的可变性</li><li>函数签名中<code>变量</code>的可变性和名称并不影响函数签名</li><li>引用的可变性内置在类型本身中，因此您不能将不可变的引用“升级”为可变的引用</li></ul>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下IO应用详解</title>
    <link href="/2020/07/25/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/07linux%E4%B8%8BIO%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/07/25/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/07linux%E4%B8%8BIO%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="一-对于I-O的概述"><a href="#一-对于I-O的概述" class="headerlink" title="一. 对于I/O的概述"></a>一. 对于I/O的概述</h2><p>Linux磁盘I/O分为Buffered IO和Direct IO，这两者有何区别？</p><p>Buffered IO：<br>当应用程序尝试读取某块数据的时候，如果这块数据已经存放在了页缓存（page cache）中，那么这块数据就可以立即返回给应用程序，而不需要经过实际的物理读盘操作。当然，如果数据在应用程序读取之前并未被存放在页缓存中，那么就需要先将数据从磁盘读到页缓存中去。对于写操作来说，应用程序也会将数据先写到页缓存中去，数据是否被立即写到磁盘上去取决于应用程序所采用的写操作机制：如果用户采用的是同步写机制（ synchronous writes ），那么数据会立即被写回到磁盘上，应用程序会一直等到数据被写完为止；如果用户采用的是延迟写机制（ deferred writes ），那么应用程序就完全不需要等到数据全部被写回到磁盘，数据只要被写到页缓存中去就可以了。在延迟写机制的情况下，操作系统会定期地将放在页缓存中的数据刷到磁盘上。与异步写机制（ asynchronous writes ）不同的是，<font color="#ff0000"><code>延迟写机制在数据完全写到磁盘上的时候不会通知应用程序，而异步写机制在数据完全写到磁盘上的时候是会返回给应用程序的。所以延迟写机制本身是存在数据丢失的风险的</code></font>，而异步写机制则不会有这方面的担心。</p><p>总结下，Buffered IO的特点是使用了内存缓存，如：</p><ul><li>读操作：硬盘-&gt;内核页缓存-&gt;用户缓冲区</li><li>写操作：用户缓冲区-&gt;内核页缓存-&gt;硬盘</li></ul><p>对Buffered IO，数据在传输过程中需要在应用程序地址空间和页缓存之间进行多次数据拷贝操作，这些数据拷贝操作所带来的 CPU 以及内存开销是非常大的。</p><p>对于某些特殊的应用程序（如数据库）来说，避开操作系统内核缓冲区而直接在应用程序地址空间和磁盘之间传输数据会比使用操作系统内核缓冲区获取更好的性能。</p><p>Direct IO:<br>Direct-io的目的在于绕过文件系统（ext）的cache，直接对block设备上的文件进行读写。但不经内核缓冲区，直接写磁盘，必然会引起阻塞。所以通常DIRECT-io与AIO（异步IO）会一起出现。</p><h2 id="二-I-O模型的类比"><a href="#二-I-O模型的类比" class="headerlink" title="二. I/O模型的类比"></a>二. I/O模型的类比</h2><p>Linux下的I/O模型。</p><img src="/2020/07/25/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/07linux%E4%B8%8BIO%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3/aio1.gif" class="" title="图 1. 基本 Linux I&#x2F;O 模型的简单矩阵"><p>如图每个 I/O 模型都有自己的使用模式，它们对于特定的应用程序都有自己的优点。下面一一来介绍：</p><h3 id="2-1-同步阻塞-I-O-模型"><a href="#2-1-同步阻塞-I-O-模型" class="headerlink" title="2.1 同步阻塞 I/O 模型"></a>2.1 同步阻塞 I/O 模型</h3><img src="/2020/07/25/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/07linux%E4%B8%8BIO%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3/aio2.gif" class="" title="图 2. 同步阻塞 I&#x2F;O 模型的典型流程"><p>在这个模型中，用户空间的应用程序执行一个系统调用，这会导致应用程序阻塞。这意味着应用程序会一直阻塞，直到系统调用完成为止（数据传输完成或发生错误）。调用应用程序处于一种不再消费 CPU 而只是简单等待响应的状态，因此从处理的角度来看，这是非常有效的。</p><h3 id="2-2-同步非阻塞-I-O"><a href="#2-2-同步非阻塞-I-O" class="headerlink" title="2.2 同步非阻塞 I/O"></a>2.2 同步非阻塞 I/O</h3><img src="/2020/07/25/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/07linux%E4%B8%8BIO%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3/aio2.gif" class="" title="图 3. 同步非阻塞 I&#x2F;O 模型的典型流程"><p>同步阻塞 I/O 的一种效率稍低的变种是同步非阻塞 I/O。在这种模型中，设备是以非阻塞的形式打开的。这意味着 I/O 操作不会立即完成，read操作可能会返回一个错误代码，说明这个命令不能立即满足（EAGAIN 或 EWOULDBLOCK）</p><h3 id="2-3-异步阻塞-I-O"><a href="#2-3-异步阻塞-I-O" class="headerlink" title="2.3 异步阻塞 I/O"></a>2.3 异步阻塞 I/O</h3><img src="/2020/07/25/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/07linux%E4%B8%8BIO%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3/aio2.gif" class="" title="图 4. 异步阻塞 I&#x2F;O 模型的典型流程 (select)"><p>IO多路复用(复用的select线程)。I/O复用模型会用到select、poll、epoll函数，这几个函数也会使进程阻塞，但是和阻塞I/O所不同的的，这两个函数可以同时阻塞多个I/O操作。而且可以同时对多个读操作，多个写操作的I/O函数进行检测，直到有数据可读或可写时，才真正调用I/O操作函数。对于每个提示符来说，我们可以获取这个描述符可以写数据、有读数据可用以及是否发生错误的通知。</p><h4 id="epoll总结："><a href="#epoll总结：" class="headerlink" title="epoll总结："></a>epoll总结：</h4><p>epoll支持水平触发和边缘触发，最大的特点在于边缘触发，它只告诉进程哪些fd刚刚变为就需态，并且只会通知一次。还有一个特点是，epoll使用“事件”的就绪通知方式，通过epoll_ctl注册fd，一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd，epoll_wait便可以收到通知.</p><h4 id="epoll的优点"><a href="#epoll的优点" class="headerlink" title="epoll的优点:"></a>epoll的优点:</h4><ul><li><p> 没有最大并发连接的限制，能打开的FD的上限远大于1024（1G的内存上能监听约10万个端口）。</p></li><li><p> 效率提升，不是轮询的方式,只管你“活跃”的连接，不会随着FD数目的增加效率下降。只有活跃可用的FD才会调用callback函数。</p></li><li><p> 内存拷贝，利用mmap()文件映射内存加速与内核空间的消息传递；即epoll使用mmap减少复制开销。</p></li></ul><blockquote><blockquote><blockquote><p>表面上看epoll的性能最好，但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。</p></blockquote></blockquote></blockquote><h3 id="2-4-异步非阻塞-I-O（AIO）"><a href="#2-4-异步非阻塞-I-O（AIO）" class="headerlink" title="2.4 异步非阻塞 I/O（AIO）"></a>2.4 异步非阻塞 I/O（AIO）</h3><img src="/2020/07/25/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/07linux%E4%B8%8BIO%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3/aio2.gif" class="" title="图 5. 异步非阻塞 I&#x2F;O 模型的典型流程"><p>异步非阻塞 I/O 模型是一种CPU处理与 I/O 重叠进行的模型。读请求会立即返回，说明 read 请求已经成功发起了。在后台完成读操作时，应用程序然后会执行其他处理操作。当 read 的响应到达时，就会产生一个信号或执行一个基于线程的回调函数来完成这次 I/O 处理过程。</p><h2 id="三-AIO编程介绍："><a href="#三-AIO编程介绍：" class="headerlink" title="三. AIO编程介绍："></a>三. AIO编程介绍：</h2><p>aio异步读写是在Linux内核2.6之后才正式纳入其标准。之所以会增加此模块，是因为众所周知我们计算机CPU的执行速度远大于I/O读写的执行速度，如果我们用传统的阻塞式或非阻塞式来操作I/O的话，那么我们在同一个程序中(不用多线程或多进程)就不能同时操作俩个以上的文件I/O，每次只能对一个文件进行I/O操作，很明显这样效率很低下(因为CPU速度远大于I/O操作的速度，所以当执行I/O时，CPU其实还可以做更多的事)。因此就诞生了相对高效的异步I/O。<br>在 Linux 系统上有三种方式来实现 AIO：</p><ul><li>内核系统调用</li><li>对内核系统调用进行封装进而在用户空间提供服务，例如 libaio</li><li>完全在用户空间实现 AIO，并且不使用内核支持，例如librt和部分libc </li></ul><h3 id="3-1-内核系统调用"><a href="#3-1-内核系统调用" class="headerlink" title="3.1 内核系统调用"></a>3.1 内核系统调用</h3><p>内核提供的API有io_setup, io_submit, io_getevents, io_destroy，<br>所使用的参数是 aio_context_t 而非libaio中的 io_context_t<br>一般不采用此方式直接调用，一般使用的是libaio库进行调用。</p><h3 id="3-2-libaio"><a href="#3-2-libaio" class="headerlink" title="3.2 libaio"></a>3.2 libaio</h3><p>libaio提供的API有：io_setup, io_submit, io_getevents, io_destroy</p><p>使用时需要独立安装相关的 libaio-devel 开发库<br><code>yum install libaio-devel</code></p><h4 id="3-2-1-相关结构体"><a href="#3-2-1-相关结构体" class="headerlink" title="3.2.1 相关结构体"></a>3.2.1 相关结构体</h4><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iocb</span> &#123;</span>　　　　　　　　<span class="hljs-comment">// 描述IO请求</span><br><br>        <span class="hljs-keyword">void</span>     *data;  <span class="hljs-comment">/* Return in the io completion event */</span><br>        <span class="hljs-keyword">unsigned</span> key;   <span class="hljs-comment">/*r use in identifying io requests */</span><br>        <span class="hljs-keyword">short</span>           aio_lio_opcode;　　<span class="hljs-comment">// 操作的类型：IO_CMD_PWRITE | IO_CMD_PREAD</span><br>        <span class="hljs-keyword">short</span>           aio_reqprio;<br>        <span class="hljs-keyword">int</span>             aio_fildes;　　　　<span class="hljs-comment">// 操作的文件fd</span><br>        <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_iocb_common</span>           <span class="hljs-title">c</span>;</span><br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_iocb_vector</span>           <span class="hljs-title">v</span>;</span><br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_iocb_poll</span>             <span class="hljs-title">poll</span>;</span><br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_iocb_sockaddr</span> <span class="hljs-title">saddr</span>;</span><br>        &#125; u;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_iocb_common</span> &#123;</span>　　<br>        <span class="hljs-keyword">void</span>            *buf;　　<br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>   nbytes;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>       offset;<br>        <span class="hljs-keyword">unsigned</span>        flags;<br>        <span class="hljs-keyword">unsigned</span>        resfd;<br>&#125;;<br><br>　　<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_event</span> &#123;</span>　　　　<span class="hljs-comment">// 描述返回结果</span><br>　　　　<span class="hljs-keyword">void</span> *data;<br>　　　　<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iocb</span> *<span class="hljs-title">obj</span>;</span>　　<span class="hljs-comment">// 提交的任务</span><br>　　　　<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> res;　　<span class="hljs-comment">// IO任务完成的状态</span><br>　　　<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> res2;　　<span class="hljs-comment">// 同上</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="3-2-2-应用步骤"><a href="#3-2-2-应用步骤" class="headerlink" title="3.2.2 应用步骤"></a>3.2.2 应用步骤</h4><h5 id="3-2-2-1-建立IO任务"><a href="#3-2-2-1-建立IO任务" class="headerlink" title="3.2.2.1 建立IO任务"></a>3.2.2.1 建立IO任务</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">io_setup</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> maxevents, <span class="hljs-keyword">io_context_t</span> *ctxp)</span></span>;<br></code></pre></td></tr></table></figure><blockquote><p>io_context_t对应内核中一个结构，为异步IO请求提供上下文环境。<br>注意: 在调用 io_setup 前必须将 io_context_t 初始化为0。<br>也需要open打开文件的时候设置 <em><strong>O_DIRECT</strong></em> 标志。</p></blockquote><h5 id="3-2-2-2-提交IO任务"><a href="#3-2-2-2-提交IO任务" class="headerlink" title="3.2.2.2 提交IO任务"></a>3.2.2.2 提交IO任务</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">io_submit</span> <span class="hljs-params">(<span class="hljs-keyword">io_context_t</span> ctx_id, <span class="hljs-keyword">long</span> nr, struct iocb **iocbpp)</span></span>;<br></code></pre></td></tr></table></figure><p>提交任务之前必须先填充iocb结构体，libaio提供的包装函数说明了需要完成的工作：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void io<span class="hljs-constructor">_prep_pread(<span class="hljs-params">struct</span> <span class="hljs-params">iocb</span> <span class="hljs-operator">*</span><span class="hljs-params">iocb</span>, <span class="hljs-params">int</span> <span class="hljs-params">fd</span>, <span class="hljs-params">void</span> <span class="hljs-operator">*</span><span class="hljs-params">buf</span>, <span class="hljs-params">size_t</span> <span class="hljs-params">count</span>, <span class="hljs-params">long</span> <span class="hljs-params">long</span> <span class="hljs-params">offset</span>)</span><br>&#123;<br>　　memset(iocb, <span class="hljs-number">0</span>, sizeof(*iocb));<br>　　iocb-&gt;aio_fildes = fd;<br>　　iocb-&gt;aio_lio_opcode = IO_CMD_PREAD;<br>　　iocb-&gt;aio_reqprio = <span class="hljs-number">0</span>;<br>　　iocb-&gt;u.c.buf = buf;<br>　　iocb-&gt;u.c.nbytes = count;<br>　　iocb-&gt;u.c.offset = offset;<br>&#125;<br><br>void io<span class="hljs-constructor">_prep_pwrite(<span class="hljs-params">struct</span> <span class="hljs-params">iocb</span> <span class="hljs-operator">*</span><span class="hljs-params">iocb</span>, <span class="hljs-params">int</span> <span class="hljs-params">fd</span>, <span class="hljs-params">void</span> <span class="hljs-operator">*</span><span class="hljs-params">buf</span>, <span class="hljs-params">size_t</span> <span class="hljs-params">count</span>, <span class="hljs-params">long</span> <span class="hljs-params">long</span> <span class="hljs-params">offset</span>)</span><br>&#123;<br>　　memset(iocb, <span class="hljs-number">0</span>, sizeof(*iocb));<br>　　iocb-&gt;aio_fildes = fd;<br>　　iocb-&gt;aio_lio_opcode = IO_CMD_PWRITE;<br>　　iocb-&gt;aio_reqprio = <span class="hljs-number">0</span>;<br>　　iocb-&gt;u.c.buf = buf;<br>　　iocb-&gt;u.c.nbytes = count;<br>　　iocb-&gt;u.c.offset = offset;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里注意读写的buf都必须是按扇区对齐的，可以用posix_memalign来分配。</p><p>详细代码内容可参考 <em><a href="https://pagure.io/libaio/blob/master/f/src/libaio.h">https://pagure.io/libaio/blob/master/f/src/libaio.h</a></em></p><h5 id="3-2-2-3-获取完成的IO"><a href="#3-2-2-3-获取完成的IO" class="headerlink" title="3.2.2.3 获取完成的IO"></a>3.2.2.3 获取完成的IO</h5><p>io_getevents 系统调用尝试从 ctx_id 指定的AIO上下文的完成队列中读取至少min_nr, 最多nr个事件,<br>timeout指定等待IO完成的超时时间，为NULL时一直等待到至少看到min_nr个事件为止;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">io_getevents</span> <span class="hljs-params">(<span class="hljs-keyword">io_context_t</span> ctx_id, <span class="hljs-keyword">long</span> min_nr, <span class="hljs-keyword">long</span> nr, struct io_event *events, struct timespec *timeout)</span></span>;<br></code></pre></td></tr></table></figure><p>这里最重要的就是提供一个io_event数组给内核来copy完成的IO请求到这里，数组的大小是io_setup时指定的maxevents。</p><h5 id="3-2-2-4-销毁IO任务"><a href="#3-2-2-4-销毁IO任务" class="headerlink" title="3.2.2.4 销毁IO任务"></a>3.2.2.4 销毁IO任务</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">io_destroy</span> <span class="hljs-params">(<span class="hljs-keyword">io_context_t</span> ctx)</span></span>;<br></code></pre></td></tr></table></figure><h4 id="3-2-3-libaio和epoll的结合"><a href="#3-2-3-libaio和epoll的结合" class="headerlink" title="3.2.3 libaio和epoll的结合"></a>3.2.3 libaio和epoll的结合</h4><p>在异步编程中，任何一个环节的阻塞都会导致整个程序的阻塞，所以一定要避免在 io_getevents 调用时阻塞式的等待。还记得 io_iocb_common 中的 flags 和 resfd 吗？看看libaio是如何提供io_getevents和事件循环的结合：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void io<span class="hljs-constructor">_set_eventfd(<span class="hljs-params">struct</span> <span class="hljs-params">iocb</span> <span class="hljs-operator">*</span><span class="hljs-params">iocb</span>, <span class="hljs-params">int</span> <span class="hljs-params">eventfd</span>)</span> &#123;<br>    iocb-&gt;u.c.flags <span class="hljs-pattern-match">|= (1 &lt;&lt; 0) <span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">IOCB_FLAG_RESFD</span> <span class="hljs-operator">*</span><span class="hljs-operator">/</span>;</span><br><span class="hljs-pattern-match">    iocb-&gt;u.c.resfd = eventfd;</span><br><span class="hljs-pattern-match">&#125;</span><br></code></pre></td></tr></table></figure><p>这里的resfd是通过系统调用eventfd生成的。<br><code>int eventfd(unsigned int initval, int flags);</code><br>eventfd 函数是linux 2.6.22内核之后加进来的syscall，作用是内核用来通知应用程序发生的事件的数量，从而使应用程序不用频繁地去轮询内核是否有时间发生，而是有内核将发生事件的数量写入到该fd，应用程序发现fd可读后，从fd读取该数值，并马上去内核读取。</p><p>有了eventfd，就可以很好地将libaio和epoll事件循环结合起来：</p><div class="code-wrapper"><pre><code class="hljs">1. 创建一个eventfd    efd = eventfd(0, EFD_NONBLOCK | EFD_CLOEXEC);2. 将eventfd设置到iocb中, 将eventfd和iocb进行关联    io_set_eventfd(iocb, efd);3. 交接AIO请求    io_submit(ctx, NUM_EVENTS, iocb);4. 创建一个epollfd，并将eventfd加到epoll中    epfd = epoll_create(1);    epoll_ctl(epfd, EPOLL_CTL_ADD, efd, &amp;epevent);    epoll_wait(epfd, &amp;epevent, 1, -1);5. 当 `eventfd` 可读时，从 `eventfd` 读出完成IO请求的数量，并调用 `io_getevents` 获取这些IO    read(efd, &amp;finished_aio, sizeof(finished_aio);    r = io_getevents(ctx, 1, NUM_EVENTS, events, &amp;tms);</code></pre></div><h4 id="3-2-4-epoll-aio-eventfd结合使用的简单例子"><a href="#3-2-4-epoll-aio-eventfd结合使用的简单例子" class="headerlink" title="3.2.4 epoll/aio/eventfd结合使用的简单例子"></a>3.2.4 epoll/aio/eventfd结合使用的简单例子</h4><p>make时需要增加-laio 库引用<br><code>g++ main.cpp -o aiolib -laio</code></p><p>main.cpp内容如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;libaio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/eventfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/epoll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;inttypes.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TEST_FILE   <span class="hljs-meta-string">&quot;aio_test_file&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TEST_FILE_SIZE  (127 * 1024)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NUM_EVENTS  128</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ALIGN_SIZE  512</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RD_WR_SIZE  1024</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">custom_iocb</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iocb</span> <span class="hljs-title">iocb</span>;</span><br>    <span class="hljs-keyword">int</span> nth_request;<br>&#125;;<br><br><span class="hljs-comment">// aio 完成后的回调函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">aio_callback</span><span class="hljs-params">(<span class="hljs-keyword">io_context_t</span> ctx, struct iocb *iocb, <span class="hljs-keyword">long</span> res, <span class="hljs-keyword">long</span> res2)</span> </span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">custom_iocb</span> *<span class="hljs-title">iocbp</span> =</span> (struct custom_iocb *)iocb;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;nth_request: %d, request_type: %s, offset: %lld, length: %lu, res: %ld, res2: %ld\n&quot;</span>,<br>            iocbp-&gt;nth_request, (iocb-&gt;aio_lio_opcode == IO_CMD_PREAD) ? <span class="hljs-string">&quot;READ&quot;</span> : <span class="hljs-string">&quot;WRITE&quot;</span>,<br>            iocb-&gt;u.c.offset, iocb-&gt;u.c.nbytes, res, res2);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  eventfd 被epoll触发后的事件处理</span><br><span class="hljs-comment"> *  @param ctx io操作上下文</span><br><span class="hljs-comment"> *  @param efd 被epoll触发的eventfd</span><br><span class="hljs-comment"> *  @return &gt;0 返回完成的事件个数 &lt;0 失败</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">epoll_eventfd_hanlder</span><span class="hljs-params">(<span class="hljs-keyword">io_context_t</span> ctx, <span class="hljs-keyword">int</span> efd)</span> </span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_event</span> <span class="hljs-title">events</span>[64];</span> <span class="hljs-comment">//事件列表, 每次最多处理64个</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec</span> <span class="hljs-title">tms</span>;</span><br>    <span class="hljs-keyword">uint64_t</span> finished_aio = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">read</span>(efd, &amp;finished_aio, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(finished_aio)) != <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(finished_aio)) &#123; <span class="hljs-comment">// 读取当前完成的aio读取事件个数</span><br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;read&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> iret = (<span class="hljs-keyword">int</span>)finished_aio;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;finished io number: %ld\n&quot;</span>, finished_aio);<br>    <span class="hljs-keyword">while</span> (finished_aio &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 循环处理所有已完成aio事件</span><br>        tms.tv_sec = <span class="hljs-number">0</span>;<br>        tms.tv_nsec = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> r = <span class="hljs-built_in">io_getevents</span>(ctx, <span class="hljs-number">1</span>, <span class="hljs-number">64</span>, events, &amp;tms); <span class="hljs-comment">// 每次最多处理64个任务</span><br>        <span class="hljs-keyword">if</span> (r &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;@@@ get io_event num=%d,\n&quot;</span>, r);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;r; ++j) &#123;<br>                ((<span class="hljs-keyword">io_callback_t</span>)(events[j].data))(ctx, events[j].obj, events[j].res, events[j].res2);<br>            &#125;<br>            finished_aio -= r;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> iret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> efd=<span class="hljs-number">-1</span>, fd=<span class="hljs-number">-1</span>, epfd=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">io_context_t</span> ctx;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">custom_iocb</span> <span class="hljs-title">iocbs</span>[<span class="hljs-title">NUM_EVENTS</span>];</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iocb</span> *<span class="hljs-title">iocbps</span>[<span class="hljs-title">NUM_EVENTS</span>];</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">custom_iocb</span> *<span class="hljs-title">iocbp</span>;</span><br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">void</span> *buf;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">epevent</span>;</span><br><br>    <span class="hljs-keyword">if</span> ( <span class="hljs-number">0</span>&gt;(efd=<span class="hljs-built_in">eventfd</span>(<span class="hljs-number">0</span>, EFD_NONBLOCK | EFD_CLOEXEC)) ) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;eventfd&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span>&gt;(fd = <span class="hljs-built_in">open</span>(TEST_FILE, O_RDWR | O_CREAT | O_DIRECT, <span class="hljs-number">0644</span>))) &#123; <span class="hljs-comment">//注意添加O_DIRECT</span><br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;open&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-built_in">ftruncate</span>(fd, TEST_FILE_SIZE);<br><br>    <span class="hljs-built_in">memset</span>(&amp;ctx, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ctx)); <span class="hljs-comment">// 注意必须初始化为0</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">io_setup</span>(<span class="hljs-number">8192</span>, &amp;ctx)) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;io_setup&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">posix_memalign</span>(&amp;buf, ALIGN_SIZE, RD_WR_SIZE)) &#123; <span class="hljs-comment">// 申请内存对齐的空间,类似malloc 需调用free释放空间</span><br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;posix_memalign&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;buf: %p\n&quot;</span>, buf);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, iocbp = iocbs; i &lt; NUM_EVENTS; ++i, ++iocbp) &#123;<br>        iocbps[i] = &amp;iocbp-&gt;iocb;<br>        <span class="hljs-built_in">io_prep_pread</span>(&amp;iocbp-&gt;iocb, fd, buf, RD_WR_SIZE, i * RD_WR_SIZE);<br>        <span class="hljs-built_in">io_set_eventfd</span>(&amp;iocbp-&gt;iocb, efd);<br>        <span class="hljs-built_in">io_set_callback</span>(&amp;iocbp-&gt;iocb, aio_callback);<br>        iocbp-&gt;nth_request = i + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">io_submit</span>(ctx, NUM_EVENTS, iocbps) != NUM_EVENTS) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;io_submit&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span>&gt;(epfd = <span class="hljs-built_in">epoll_create</span>(<span class="hljs-number">1</span>))) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;epoll_create&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">7</span>;<br>    &#125;<br><br>    epevent.events = EPOLLIN | EPOLLET;<br>    epevent.data.ptr = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">epoll_ctl</span>(epfd, EPOLL_CTL_ADD, efd, &amp;epevent)) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;epoll_ctl&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">8</span>;<br>    &#125;<br><br>    i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; NUM_EVENTS) &#123; <span class="hljs-comment">//如果是服务端，此处应该一直循环</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> != <span class="hljs-built_in">epoll_wait</span>(epfd, &amp;epevent, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>)) &#123;<br>            <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;epoll_wait&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> iok = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>&lt;(iok=<span class="hljs-built_in">epoll_eventfd_hanlder</span>(ctx, efd))) &#123;<br>            i += iok;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">close</span>(epfd);<br>    <span class="hljs-built_in">free</span>(buf);<br>    <span class="hljs-built_in">io_destroy</span>(ctx);<br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-built_in">close</span>(efd);<br>    <span class="hljs-built_in">remove</span>(TEST_FILE);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-POSIX-AIO"><a href="#3-3-POSIX-AIO" class="headerlink" title="3.3 POSIX AIO"></a>3.3 POSIX AIO</h3><p>当前的Linux POSIX AIO由glibc在用户空间中实现。POSIX AIO 有许多限制，最值得注意的是，维护多个线程来执行I/O操作是昂贵的，并且可扩展性很差。在基于内核状态机的 AIO 实现上已经进行了一段时间的工作，但是这个实现还没有成熟到可以使用内核系统调用完全重新实现POSIX AIO实现的程度。</p><h4 id="3-3-1-函数说明"><a href="#3-3-1-函数说明" class="headerlink" title="3.3.1 函数说明"></a>3.3.1 函数说明</h4><table><thead><tr><th>API函数</th><th>函数说明</th></tr></thead><tbody><tr><td>aio_read</td><td>异步读操作</td></tr><tr><td>aio_write</td><td>异步写操作</td></tr><tr><td>aio_error</td><td>检查异步请求的状态</td></tr><tr><td>aio_return</td><td>获得异步请求完成时的返回值</td></tr><tr><td>aio_suspend</td><td>挂起调用进程，直到一个或多个异步请求已完成</td></tr><tr><td>aio_cancel</td><td>取消异步请求</td></tr><tr><td>lio_list</td><td>发起一系列异步I/O请求</td></tr></tbody></table><h4 id="3-3-2-库"><a href="#3-3-2-库" class="headerlink" title="3.3.2 库"></a>3.3.2 库</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">librt libc</span> <br></code></pre></td></tr></table></figure><p>linux内核中aiocd结构体原型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;aiocb.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">aiocb</span> &#123;</span><br>    <span class="hljs-comment">/* The order of these fields is implementation-dependent */</span><br><br>    <span class="hljs-keyword">int</span>             aio_fildes;     <span class="hljs-comment">/* File descriptor */</span><br>    <span class="hljs-keyword">off_t</span>           aio_offset;     <span class="hljs-comment">/* File offset */</span><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">void</span>  *aio_buf;        <span class="hljs-comment">/* Location of buffer */</span><br>    <span class="hljs-keyword">size_t</span>          aio_nbytes;     <span class="hljs-comment">/* Length of transfer */</span><br>    <span class="hljs-keyword">int</span>             aio_reqprio;    <span class="hljs-comment">/* Request priority */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigevent</span> <span class="hljs-title">aio_sigevent</span>;</span>   <span class="hljs-comment">/* Notification method */</span><br>    <span class="hljs-keyword">int</span>             aio_lio_opcode; <span class="hljs-comment">/* Operation to be performed;</span><br><span class="hljs-comment">                                       lio_listio() only */</span><br><br>    <span class="hljs-comment">/* Various implementation-internal fields not shown */</span><br>&#125;;<br><span class="hljs-comment">/* Operation codes for &#x27;aio_lio_opcode&#x27;: */</span><br>     <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span> LIO_READ, LIO_WRITE, LIO_NOP &#125;;<br></code></pre></td></tr></table></figure><ul><li>aio_filedes  要执行io操作的文件描述符</li><li>aio_offset  要执行io操作的文件的偏移量</li><li>aio_buf 读写传输数据的缓冲区空间</li><li>aio_nbytes 指定的aio_buf缓冲区的大小</li><li>aio_reqprio   该字段指定从调用线程的实时优先级中减去的值，以确定执行此I / O请求的优先级（请参阅pthread_setschedparam（3））。 指定的值必须在0到sysconf（_SC_AIO_PRIO_DELTA_MAX）返回的值之间。 对于文件同步操作，将忽略此字段。</li><li>aio_sigevent 指定异步io操作完成时的通知方式， aio_sigevent.sigev_notify 的值可能是SIGEV_NONE, SIGEV_SIGNAL和 SIGEV_THREAD，相信信息可参考 sigevent(7)</li><li>aio_lio_opcode 要执行的操作类型； 仅用于lio_listio</li></ul><h4 id="3-3-3-API详细介绍及实例："><a href="#3-3-3-API详细介绍及实例：" class="headerlink" title="3.3.3 API详细介绍及实例："></a>3.3.3 API详细介绍及实例：</h4><h5 id="1-aio-read"><a href="#1-aio-read" class="headerlink" title="1. aio_read()"></a>1. aio_read()</h5><p><code>aio_read</code> 函数请求对一个有效的文件描述符进行异步读操作。这个文件描述符可以表示一个文件、套接字甚至管道。<code>aio_read</code> 函数的原型如下:</p><p><code>int aio_read(struct aiocb *aiocbp);</code></p><p> <code>aio_read</code> 函数在请求进行排队之后会立即返回。如果执行成功，返回值就为 0；如果出现错误，返回值就为 -1，并设置 errno 的值。</p><h5 id="2-aio-error"><a href="#2-aio-error" class="headerlink" title="2. aio_error()"></a>2. aio_error()</h5><p><code>aio_error</code> 函数被用来确定请求的状态。</p><p><code>int aio_error( struct aiocb *aiocbp );</code></p><p>返回值：<br>EINPROGRESS，说明请求尚未完成</p><p>ECANCELLED，说明请求被应用程序取消了<br>-1，说明发生了错误，具体错误原因可以查阅 errno<br>0 ,说明完成当前请求</p><h5 id="3-aio-return"><a href="#3-aio-return" class="headerlink" title="3. aio_return()"></a>3. aio_return()</h5><p>异步 I/O 和标准块 I/O 之间的另外一个区别是我们不能立即访问这个函数的返回状态，因为我们并没有阻塞在 <code>read</code> 调用上。在标准的 <code>read</code> 调用中，返回状态是在该函数返回时提供的。但是在异步 I/O 中，我们要使用     <code>aio_return</code> 函数。这个函数的原型如下：</p><p><code>ssize_t aio_return( struct aiocb *aiocbp );</code></p><p>对以上三个API的源码实例：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;aio.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFFER_SIZE 1024</span><br><span class="hljs-keyword">int</span> MAX_LIST = <span class="hljs-number">2</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span> **argv)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">aiocb</span> <span class="hljs-title">rd</span>;</span> <span class="hljs-comment">//aio操作所需结构体</span><br>    <span class="hljs-keyword">int</span> fd,ret,couter;<br><br>    fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,O_RDONLY, <span class="hljs-number">0644</span>);<br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;test.txt&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//将rd结构体清空</span><br>    <span class="hljs-built_in">bzero</span>(&amp;rd,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(rd));<br><br>    rd.aio_buf = <span class="hljs-built_in">malloc</span>(BUFFER_SIZE + <span class="hljs-number">1</span>); <span class="hljs-comment">//为rd.aio_buf分配空间</span><br>    <span class="hljs-comment">//填充rd结构体</span><br>    rd.aio_fildes = fd;<br>    rd.aio_nbytes = BUFFER_SIZE;<br>    rd.aio_offset = <span class="hljs-number">0</span>;<br><br>    ret = <span class="hljs-built_in">aio_read</span>(&amp;rd); <span class="hljs-comment">//进行异步读操作</span><br>    <span class="hljs-keyword">if</span>(ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;aio_read&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">//do other things</span><br><br>    couter = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//  循环等待异步读操作结束</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">aio_error</span>(&amp;rd) == EINPROGRESS) &#123; <span class="hljs-comment">//一直不停的查询(消耗cpu)</span><br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第%d次\n&quot;</span>,++couter);<br>    &#125;<br><br>    <span class="hljs-comment">//获取异步读返回值</span><br>    ret = <span class="hljs-built_in">aio_return</span>(&amp;rd);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n返回值为:%d\n&quot;</span>,ret);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,rd.aio_buf);<br>    <span class="hljs-built_in">free</span>((<span class="hljs-keyword">char</span>*)rd.aio_buf);<br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-aio-write"><a href="#4-aio-write" class="headerlink" title="4. aio_write()"></a>4. aio_write()</h5><p><code>aio_write</code> 函数用来请求一个异步写操作。其函数原型如下：</p><p><code>intaio_write( struct aiocb *aiocbp );</code></p><p> <code>aio_write</code> 函数会立即返回，说明请求已经进行排队（成功时返回值为 0，失败时返回值为 -1，并相应地设置 errno）。</p><p> 这与 read 系统调用类似，但是有一点不一样的行为需要注意。回想一下对于 read 调用来说，要使用的偏移量是非常重要的。然而，对于 write 来说，这个偏移量只有在没有设置 O_APPEND 选项的文件上下文中才会非常重要。如果设置了 O_APPEND，那么这个偏移量就会被忽略，数据都会被附加到文件的末尾。否则，aio_offset 域就确定了数据在要写入的文件中的偏移量.</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;aio.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFFER_SIZE 1024</span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span> **argv)</span> </span>&#123;<br>    <span class="hljs-comment">//定义aio控制块结构体</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">aiocb</span> <span class="hljs-title">wr</span>;</span> <br>    <span class="hljs-keyword">int</span> ret,fd; <br>    <span class="hljs-keyword">char</span> str[<span class="hljs-number">20</span>] = &#123;<span class="hljs-string">&quot;hello,world&quot;</span>&#125;;    <br>    <span class="hljs-built_in">bzero</span>(&amp;wr,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(wr));<span class="hljs-comment">//置零wr结构体</span><br> <br>    fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,O_WRONLY | O_APPEND, <span class="hljs-number">0644</span>);<br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;test.txt&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">//为aio.buf申请空间</span><br>    wr.aio_buf = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(BUFFER_SIZE);<br>    <span class="hljs-keyword">if</span>(wr.aio_buf == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;buf&quot;</span>);<br>    &#125;<br> <br>    wr.aio_buf = str;<br> <br>    <span class="hljs-comment">//填充aiocb结构</span><br>    wr.aio_fildes = fd;<br>    wr.aio_nbytes = <span class="hljs-number">1024</span>;<br> <br>    ret = <span class="hljs-built_in">aio_write</span>(&amp;wr); <span class="hljs-comment">//异步写操作</span><br>    <span class="hljs-keyword">if</span>(ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;aio_write&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">//等待异步写完成</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">aio_error</span>(&amp;wr) == EINPROGRESS)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello,world\n&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">//获得异步写的返回值</span><br>    ret = <span class="hljs-built_in">aio_return</span>(&amp;wr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n返回值为:%d\n&quot;</span>,ret);<br>    <span class="hljs-built_in">free</span>((<span class="hljs-keyword">char</span>*)wr.aio_buf);<br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-aio-suspend"><a href="#5-aio-suspend" class="headerlink" title="5. aio_suspend()"></a>5. aio_suspend()</h5><ul><li>aio_suspend函数可以时当前进程挂起，直到有向其注册的异步事件完成为止 </li><li>阻塞</li><li>当有AIO请求返程后，该函数返回</li></ul><p><code>int aio_suspend(const struct aiocb *const cblist[],int n,const struct timespec *timeout);</code></p><p> 第一个参数是个保存了<code>aiocb</code>块地址的数组，我们可以向其内添加想要等待阻塞的异步事件，第二个参数为向<code>cblist</code>注册的<code>aiocb</code>个数,第三个参数为等待阻塞的超时时间，NULL为无限等待.</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;aio.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFFER_SIZE 1024</span><br> <br><span class="hljs-keyword">int</span> MAX_LIST = <span class="hljs-number">2</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span> **argv)</span> </span>&#123;<br>    <span class="hljs-comment">//aio操作所需结构体</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">aiocb</span> <span class="hljs-title">rd</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">aiocb</span> <span class="hljs-title">wd</span>;</span><br>    <span class="hljs-keyword">int</span> fd,ret,couter;<br> <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">aiocb</span> *<span class="hljs-title">aiocb_list</span>[2];</span><span class="hljs-comment">//cblist链表</span><br> <br>    fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,O_RDONLY, <span class="hljs-number">0644</span>);<br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;test.txt&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-built_in">bzero</span>(&amp;rd,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(rd));<span class="hljs-comment">//将rd结构体清空</span><br> <br>    rd.aio_buf = <span class="hljs-built_in">malloc</span>(BUFFER_SIZE + <span class="hljs-number">1</span>);<span class="hljs-comment">//为rd.aio_buf分配空间</span><br> <br>    <span class="hljs-comment">//填充rd结构体</span><br>    rd.aio_fildes = fd;<br>    rd.aio_nbytes =  BUFFER_SIZE;<br>    rd.aio_offset = <span class="hljs-number">0</span>;<br> <br>    <span class="hljs-comment">//将读fd的事件注册</span><br>    aiocb_list[<span class="hljs-number">0</span>] = &amp;rd;<br> <br>    <span class="hljs-comment">//进行异步读操作</span><br>    ret = <span class="hljs-built_in">aio_read</span>(&amp;rd);<br>    <span class="hljs-keyword">if</span>(ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;aio_read&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;我要开始等待异步读事件完成\n&quot;</span>);<br>    ret = <span class="hljs-built_in">aio_suspend</span>(aiocb_list,MAX_LIST,<span class="hljs-literal">NULL</span>); <span class="hljs-comment">//阻塞等待异步读事件完成</span><br>    ret = <span class="hljs-built_in">aio_return</span>(&amp;rd);<span class="hljs-comment">//获取异步读返回值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n返回值为:%d\n&quot;</span>,ret);<br><span class="hljs-built_in">free</span>((<span class="hljs-keyword">char</span>*)rd.aio_buf);<br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-lio-listio"><a href="#6-lio-listio" class="headerlink" title="6.lio_listio()"></a>6.lio_listio()</h5><p>aio同时还为我们提供了一个可以发起多个或多种I/O请求的接口lio_listio </p><p>这个函数效率很高，因为我们只需一次系统调用(一次内核上下位切换)就可以完成大量的I/O操作</p><p><code>int lio_listio(int mode,struct aiocb *list[],int nent,struct sigevent *sig);</code></p><p> 第一个参数<code>mode</code>可以有两个实参，<code>LIO_WAIT</code>和<code>LIO_NOWAIT</code>，前一个会阻塞该调用直到所有I/O都完成为止，后一个则会挂入队列就返回</p><ul><li>LIO_WAIT 阻塞发起</li><li>LIO_NOWAIT  非阻塞发起<blockquote><p>批量发起AIO的两种方法</p></blockquote></li><li>阻塞等到所有发起的AIO全部完成后，才会返回</li><li>发起后立即返回，通过绑定的信号来通知</li></ul><p>LIO_WAIT  demo::</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;aio.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFFER_SIZE 1025</span><br><span class="hljs-keyword">int</span> MAX_LIST = <span class="hljs-number">2</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span> **argv)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">aiocb</span> *<span class="hljs-title">listio</span>[2];</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">aiocb</span> <span class="hljs-title">rd</span>,<span class="hljs-title">wr</span>;</span><br>    <span class="hljs-keyword">int</span> fd,ret;<br> <br>    <span class="hljs-comment">//异步读事件</span><br>    fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test1.txt&quot;</span>,O_RDONLY, <span class="hljs-number">0644</span>);<br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;test1.txt&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-built_in">bzero</span>(&amp;rd,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(rd));<br> <br>    rd.aio_buf = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(BUFFER_SIZE);<br>    <span class="hljs-keyword">if</span>(rd.aio_buf == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;aio_buf&quot;</span>);<br>    &#125;<br> <br>    rd.aio_fildes = fd;<br>    rd.aio_nbytes = <span class="hljs-number">1024</span>;<br>    rd.aio_offset = <span class="hljs-number">0</span>;<br>    rd.aio_lio_opcode = LIO_READ;   <span class="hljs-comment">///lio操作类型为异步读</span><br> <br>    listio[<span class="hljs-number">0</span>] = &amp;rd;<span class="hljs-comment">//将异步读事件添加到list中</span><br> <br>    fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test2.txt&quot;</span>,O_WRONLY | O_APPEND, <span class="hljs-number">0644</span>); <span class="hljs-comment">//异步些事件</span><br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;test2.txt&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-built_in">bzero</span>(&amp;wr,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(wr));<br> <br>    wr.aio_buf = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(BUFFER_SIZE);<br>    <span class="hljs-keyword">if</span>(wr.aio_buf == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;aio_buf&quot;</span>);<br>    &#125;<br> <br>    wr.aio_fildes = fd;<br>    wr.aio_nbytes = <span class="hljs-number">1024</span>;<br>    wr.aio_lio_opcode = LIO_WRITE;   <span class="hljs-comment">///lio操作类型为异步写</span><br> <br>    <span class="hljs-comment">//将异步写事件添加到list中</span><br>    listio[<span class="hljs-number">1</span>] = &amp;wr;<br> <br>    ret = <span class="hljs-built_in">lio_listio</span>(LIO_WAIT,listio,MAX_LIST,<span class="hljs-literal">NULL</span>);  <span class="hljs-comment">//使用lio_listio发起一系列请求</span><br>    ret = <span class="hljs-built_in">aio_return</span>(&amp;rd);  <span class="hljs-comment">//当异步读写都完成时获取他们的返回值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n读返回值:%d&quot;</span>,ret);<br> <br>    ret = <span class="hljs-built_in">aio_return</span>(&amp;wr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n写返回值:%d&quot;</span>,ret);<br><span class="hljs-built_in">free</span>((<span class="hljs-keyword">char</span>*)wr.aio_buf);<br><span class="hljs-built_in">free</span>((<span class="hljs-keyword">char</span>*)rd.aio_buf);<br>    <span class="hljs-built_in">close</span>(rd.aio_fildes);<br><span class="hljs-built_in">close</span>(wr.aio_fildes);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>LIO_NOWAIT demo::</p><p>当我们的异步IO操作完成之时，我们可以通过信号通知我们的进程也可用回调函数来进行异步通知，接下来我会为大家主要介绍以下回调函数来进行异步通知</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigevent</span> &#123;</span><br><span class="hljs-keyword">int</span>           sigev_notify;            <span class="hljs-comment">//Notification type. </span><br><span class="hljs-keyword">int</span>           sigev_signo;            <span class="hljs-comment">//Signal number. </span><br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">sigval</span>  <span class="hljs-title">sigev_value</span>;</span>             <span class="hljs-comment">//Signal value. </span><br><span class="hljs-built_in"><span class="hljs-keyword">void</span></span>         (*sigev_notify_function)(<span class="hljs-keyword">union</span> sigval); <span class="hljs-comment">//Notification function. </span><br><span class="hljs-keyword">pthread_attr_t</span> *sigev_notify_attributes;  <span class="hljs-comment">//Notification attributes. </span><br>&#125;; <br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;aio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFFER_SIZE 1025</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">aio_completion_handler</span><span class="hljs-params">(<span class="hljs-keyword">sigval_t</span> sigval)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//用来获取读aiocb结构的指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">aiocb</span> *<span class="hljs-title">prd</span>;</span><br>    <span class="hljs-keyword">int</span> ret;<br><br>    prd = (struct aiocb *)sigval.sival_ptr;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello\n&quot;</span>);<br>    <span class="hljs-comment">//获取返回值</span><br>    ret = <span class="hljs-built_in">aio_return</span>(prd);<br><span class="hljs-built_in">free</span>(prd-&gt;aio_buf);<br><span class="hljs-built_in">close</span>(prd-&gt;aio_fildes);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span> **argv)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> fd,ret;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">aiocb</span> <span class="hljs-title">rd</span>;</span><br> <br>    fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;test.txt&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">bzero</span>(&amp;rd,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(rd));<span class="hljs-comment">//填充aiocb的基本内容</span><br> <br>    rd.aio_fildes = fd;<br>    rd.aio_buf = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(BUFFER_SIZE + <span class="hljs-number">1</span>));<br>    rd.aio_nbytes = BUFFER_SIZE;<br>    rd.aio_offset = <span class="hljs-number">0</span>;<br> <br>    <span class="hljs-comment">//填充aiocb中有关回调通知的结构体sigevent</span><br>    rd.aio_sigevent.sigev_notify = SIGEV_THREAD;<span class="hljs-comment">//使用线程回调通知</span><br>    rd.aio_sigevent.sigev_notify_function = aio_completion_handler;<span class="hljs-comment">//设置回调函数</span><br>    rd.aio_sigevent.sigev_notify_attributes = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//使用默认属性</span><br>    rd.aio_sigevent.sigev_value.sival_ptr = &amp;rd;<span class="hljs-comment">//在aiocb控制块中加入自己的引用</span><br> <br>    <span class="hljs-comment">//异步读取文件</span><br>    ret = <span class="hljs-built_in">aio_read</span>(&amp;rd);<br>    <span class="hljs-keyword">if</span>(ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;aio_read&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;异步读以开始\n&quot;</span>);<br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;异步读结束\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四-参考"><a href="#四-参考" class="headerlink" title="四. 参考"></a>四. 参考</h2><p><a href="https://www.ibm.com/developerworks/cn/linux/l-async/index.html">https://www.ibm.com/developerworks/cn/linux/l-async/index.html</a><br><a href="https://blog.csdn.net/abraham_1/article/details/79824350">https://blog.csdn.net/abraham_1/article/details/79824350</a><br><a href="https://man7.org/linux/man-pages/man7/aio.7.html">https://man7.org/linux/man-pages/man7/aio.7.html</a><br><a href="http://guleilab.com/2019/01/30/linux-aio/">http://guleilab.com/2019/01/30/linux-aio/</a><br><a href="https://www.cnblogs.com/chenny7/p/4362910.html">https://www.cnblogs.com/chenny7/p/4362910.html</a><br><a href="https://pagure.io/libaio/blob/master/f/src">https://pagure.io/libaio/blob/master/f/src</a></p>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rust - 为什么不能将u32转换为char</title>
    <link href="/2020/07/25/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/02Rust/rust-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E5%B0%86u32%E8%BD%AC%E6%8D%A2%E4%B8%BAchar%EF%BC%9F/"/>
    <url>/2020/07/25/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/02Rust/rust-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E5%B0%86u32%E8%BD%AC%E6%8D%A2%E4%B8%BAchar%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>来源 <a href="https://www.coder.work/article/2553893">https://www.coder.work/article/2553893</a></p><p>我正在努力学习Rust，我开始思考chars是如何4字节宽的。我可以将char通过as转换 为u32并且它可以工作（它们都是4字节宽的），但是，当我将u32通过as转换为achar时，Rust抱怨道：</p><figure class="highlight rust"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;<br>    <span class="hljs-keyword">let</span> pizza_hex: <span class="hljs-built_in">u32</span> = <span class="hljs-number">0x1f355</span>;<br>    <span class="hljs-keyword">let</span> pizza: <span class="hljs-built_in">char</span> = &#x27;🍕&#x27;; <span class="hljs-comment">// (pizza char: http://www.fileformat.info/info/unicode/char/1f355/index.htm)</span><br><br>    <span class="hljs-comment">// pizza as hex = 1f355</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;pizza as hex = &#123;:x&#125;&quot;</span>, pizza <span class="hljs-keyword">as</span> <span class="hljs-built_in">u32</span>);<br><br>    <span class="hljs-comment">// size of pizza = 4</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;size of pizza = &#123;&#125;&quot;</span>, std::mem::size_of_val(&amp;pizza));<br><br>    <span class="hljs-comment">// This doesn&#x27;t work super well</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; == &#123;&#125;&quot;</span>, pizza_hex <span class="hljs-keyword">as</span> <span class="hljs-built_in">char</span>, pizza);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust">error[E0604]: only `<span class="hljs-built_in">u8</span>` can be cast <span class="hljs-keyword">as</span> `<span class="hljs-built_in">char</span>`, not `<span class="hljs-built_in">u32</span>`<br>  --&gt; src/main.rs:<span class="hljs-number">12</span>:<span class="hljs-number">26</span><br>   |<br><span class="hljs-number">12</span> |     <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; == &#123;&#125;&quot;</span>, pizza_hex <span class="hljs-keyword">as</span> <span class="hljs-built_in">char</span>, pizza);<br>   |                          ^^^^^^^^^^^^^^^^^<br></code></pre></td></tr></table></figure><p>你知道为什么吗？<br>最佳答案</p><p>每个char都是有效的u32值，但不是每个u32值都是有效的char。<br>包含有效Unicode码位的chars的属性：<br>未定义的行为<br>基元类型中的值无效，即使在私有字段和局部变量中也是如此：<br>Achar中的值，它是代理项或大于char::MAX的值。<br>要在运行时将au32转换为achar，请尝试以下操作：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">if</span> let <span class="hljs-title">Some</span><span class="hljs-params">(pizza_from_hex)</span> </span>= std::<span class="hljs-keyword">char</span>::<span class="hljs-built_in">from_u32</span>(pizza_hex) &#123;<br>    println!(<span class="hljs-string">&quot;&#123;&#125; == &#123;&#125;&quot;</span>, pizza_from_hex, pizza);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果您不想在字符文本中使用令人毛骨悚然的Unicode标志符号，可以使用Unicode转义序列：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">let</span> pizza_from_hex = &#x27;\u&#123;<span class="hljs-number">01</span>f<span class="hljs-number">355</span>&#125;&#x27;;<br><br><span class="hljs-attribute">println</span>!(<span class="hljs-string">&quot;&#123;&#125; == &#123;&#125;&quot;</span>, pizza_from_hex, pizza);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见架构模式</title>
    <link href="/2020/07/25/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/00%E5%B8%B8%E8%A7%81%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/07/25/01%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/00%E5%B8%B8%E8%A7%81%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="1-分层模式"><a href="#1-分层模式" class="headerlink" title="1. 分层模式"></a>1. 分层模式</h1><h1 id="2-客户端-服务器模式"><a href="#2-客户端-服务器模式" class="headerlink" title="2. 客户端-服务器模式"></a>2. 客户端-服务器模式</h1><h1 id="3-主从设备模式"><a href="#3-主从设备模式" class="headerlink" title="3. 主从设备模式"></a>3. 主从设备模式</h1><h1 id="4-管道-过滤器模式"><a href="#4-管道-过滤器模式" class="headerlink" title="4. 管道-过滤器模式"></a>4. 管道-过滤器模式</h1><h1 id="5-代理模式"><a href="#5-代理模式" class="headerlink" title="5. 代理模式"></a>5. 代理模式</h1><h1 id="6-点对点模式"><a href="#6-点对点模式" class="headerlink" title="6. 点对点模式"></a>6. 点对点模式</h1><h1 id="7-事件总线模式"><a href="#7-事件总线模式" class="headerlink" title="7. 事件总线模式"></a>7. 事件总线模式</h1><h1 id="8-MVC模式"><a href="#8-MVC模式" class="headerlink" title="8. MVC模式"></a>8. MVC模式</h1><h1 id="9-黑板模式"><a href="#9-黑板模式" class="headerlink" title="9. 黑板模式"></a>9. 黑板模式</h1><h1 id="10-解释器模式"><a href="#10-解释器模式" class="headerlink" title="10. 解释器模式"></a>10. 解释器模式</h1>]]></content>
    
    
    <categories>
      
      <category>架构设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>架构设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>监控指定进程的句柄信息</title>
    <link href="/2018/11/30/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/08%E7%9B%91%E6%8E%A7%E6%8C%87%E5%AE%9A%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%8F%A5%E6%9F%84%E4%BF%A1%E6%81%AF/"/>
    <url>/2018/11/30/03%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/03linux/08%E7%9B%91%E6%8E%A7%E6%8C%87%E5%AE%9A%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%8F%A5%E6%9F%84%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<p>脚本内容如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">################################################################################</span><br><span class="hljs-comment">#  Copyright (C) 2015-2018 whb All rights reserved.</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment">#  Author     : 王海斌</span><br><span class="hljs-comment">#  E-mail     : fly542@gmail.com</span><br><span class="hljs-comment">#  Version    :</span><br><span class="hljs-comment">#  Date       : Fri 30 Nov 2018 11:06:41 AM CST</span><br><span class="hljs-comment">#  Destription: 监控指定过滤程序的句柄数，每2秒输出一次相关内容</span><br><span class="hljs-comment">#  usage      : 使用方法 ./watch_fd.sh /a/b/c/d</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">################################################################################</span><br><span class="hljs-built_in">cd</span> `dirname <span class="hljs-variable">$0</span>`<br><br>keyInfo=<span class="hljs-variable">$1</span><br>proc_num=<span class="hljs-string">&quot;&quot;</span>   <span class="hljs-comment"># 获取到的最新进程id</span><br>sleep_idle=2   <span class="hljs-comment"># 监控间隔</span><br>outSeq=1       <span class="hljs-comment"># 输出行数</span><br>procInfoInt=20 <span class="hljs-comment"># 进程启动信息输出记录行数，</span><br><br>startTime=0<br><br><span class="hljs-comment"># 获取进程的启动时间</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">GetProcStartTime</span></span>() <br>&#123; <br>    <span class="hljs-built_in">local</span> PID=<span class="hljs-variable">$1</span><br>    <span class="hljs-keyword">if</span> [ -z <span class="hljs-variable">$&#123;PID&#125;</span> ]<br>    <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;usage <span class="hljs-variable">$&#123;0&#125;</span> pid&quot;</span><br>        <span class="hljs-built_in">return</span> 0    <br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">local</span> STARTTIME=$(awk <span class="hljs-string">&#x27;&#123;print int($22 /100)&#125;&#x27;</span> /proc/<span class="hljs-variable">$PID</span>/<span class="hljs-built_in">stat</span>)<br>    <span class="hljs-built_in">local</span> UT=$(awk <span class="hljs-string">&#x27;&#123;print int($1)&#125;&#x27;</span> /proc/uptime)<br>    <span class="hljs-built_in">local</span> NOW=$(date +%s)<br>    startTime=$((NOW - (UT - STARTTIME)))<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;proc <span class="hljs-variable">$PID</span> start at : `date -d @<span class="hljs-variable">$startTime</span>`&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 获取最新进程的进程id</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">GetLatestPid</span></span>()<br>&#123; <br>    proc_num_all=(`ps -ef |grep <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;keyInfo&#125;</span>&quot;</span> |grep -v grep |awk <span class="hljs-string">&#x27;&#123;print $2,$8&#125;&#x27;</span> |grep <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;keyInfo&#125;</span>&quot;</span> |awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`)<br>    proc_num=<span class="hljs-variable">$&#123;proc_num_all[@]&#125;</span><br>    <span class="hljs-keyword">for</span> tmpPid <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;proc_num_all[@]&#125;</span>&quot;</span><br>    <span class="hljs-keyword">do</span><br>        oldTime=<span class="hljs-variable">$&#123;startTime&#125;</span><br>        GetProcStartTime <span class="hljs-variable">$&#123;tmpPid&#125;</span><br>        <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;oldTime&#125;</span> -lt <span class="hljs-variable">$&#123;startTime&#125;</span> ]<br>        <span class="hljs-keyword">then</span><br>            proc_num=<span class="hljs-variable">$&#123;tmpPid&#125;</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">done</span><br>&#125;<br><br><span class="hljs-comment"># 检测key的合法性</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">CheckKeyInfo</span></span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;-&quot;</span> == <span class="hljs-string">&quot;-<span class="hljs-variable">$&#123;keyInfo&#125;</span>&quot;</span> ]<br>    <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;must input param&quot;</span><br>        <span class="hljs-built_in">exit</span> 0<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;keyInfo&#125;</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br>CheckKeyInfo<br>GetLatestPid<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br>    sleep <span class="hljs-variable">$&#123;sleep_idle&#125;</span><br>    <span class="hljs-keyword">if</span> [ ! -d /proc/<span class="hljs-variable">$&#123;proc_num&#125;</span> ]<br>    <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;proc <span class="hljs-variable">$&#123;proc_num&#125;</span> is dead&quot;</span><br>    <span class="hljs-keyword">else</span> <br>        proInfo=`ls /proc/<span class="hljs-variable">$&#123;proc_num&#125;</span>/fd -l 2&gt;&amp;1 |awk <span class="hljs-string">&#x27;</span><br><span class="hljs-string">        BEGIN &#123;sum=0; sock=0; efd=0; ep=0; fd=0;&#125; </span><br><span class="hljs-string">        &#123; </span><br><span class="hljs-string">            sum += 1; </span><br><span class="hljs-string">            if($0~&quot;socket&quot;) &#123; sock+=1; &#125; </span><br><span class="hljs-string">            else if($0~&quot;eventfd&quot;) &#123; efd+=1; &#125; </span><br><span class="hljs-string">            else if($0~&quot;eventpoll&quot;) &#123; ep+=1; &#125; </span><br><span class="hljs-string">            else &#123; fd+=1; &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        END &#123;print &quot;total_fd=&quot;sum, &quot;sock_num=&quot;sock, &quot;eventfd_num=&quot;efd, &quot;eventpool_num=&quot;ep, &quot;file_fd=&quot;fd &#125;&#x27;</span><br>        `<br>        vmInfo=`cat /proc/<span class="hljs-variable">$&#123;proc_num&#125;</span>/status |awk <span class="hljs-string">&#x27;BEGIN&#123;vm=&quot;&quot;; rss=&quot;&quot;;&#125; &#123; if($0~&quot;VmSize&quot;) vm=$2$3 fi; if($0~&quot;VmRSS&quot;) rss=$2$3 fi;&#125; END &#123;print &quot;VmSize=&quot;vm, &quot;VmRSS=&quot;rss&#125;&#x27;</span>`<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;`date &quot;</span>+%Y-%m-%d %T<span class="hljs-string">&quot;` pid=<span class="hljs-variable">$&#123;proc_num&#125;</span> <span class="hljs-variable">$&#123;proInfo&#125;</span> <span class="hljs-variable">$&#123;vmInfo&#125;</span>&quot;</span><br>        outSeq=$((<span class="hljs-variable">$&#123;outSeq&#125;</span>+<span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> [ $(( <span class="hljs-variable">$outSeq</span> % <span class="hljs-variable">$&#123;procInfoInt&#125;</span> )) -eq 0 ]<br>        <span class="hljs-keyword">then</span><br>            GetProcStartTime <span class="hljs-variable">$&#123;proc_num&#125;</span><br>        <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">exit</span> 0<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地文件映射为磁盘</title>
    <link href="/2018/05/03/04DevOps/07%20%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84%E4%B8%BA%E7%A3%81%E7%9B%98/"/>
    <url>/2018/05/03/04DevOps/07%20%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84%E4%B8%BA%E7%A3%81%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># pur @ 创建文件映射挂载点</span><br><span class="hljs-comment"># date @ 2018.05.03</span><br><br><span class="hljs-comment">#映射文件</span><br>diskFile=<span class="hljs-variable">$1</span><br><span class="hljs-comment">#挂载路径</span><br>mountDir=<span class="hljs-variable">$2</span><br><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;diskFile&#125;</span>&quot;</span> -o -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mountDir&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;useage: <span class="hljs-variable">$0</span> mapfile mountdir&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;eg: <span class="hljs-variable">$0</span> /root/data.img /dir1&quot;</span><br>    <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><br><br><span class="hljs-comment"># 1、 安装mkfs.ext4或xfs系统格式化工具</span><br>yum install -y e4fsprogs<br><span class="hljs-comment">#yum -y install xfsprogs</span><br><span class="hljs-comment"># 2、查询当前可用设备</span><br>curDevice=`losetup -f`<br><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-variable">$&#123;mountDir&#125;</span> ] ; <span class="hljs-keyword">then</span><br>    mkdir -p <span class="hljs-variable">$&#123;mountDir&#125;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ ! -b <span class="hljs-variable">$&#123;curDevice&#125;</span> ] ; <span class="hljs-keyword">then</span><br>    seq=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;curDevice&#125;</span> |awk -F<span class="hljs-string">&#x27;loop&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> `<br>    mknod -m 0660 <span class="hljs-variable">$&#123;curDevice&#125;</span> b 7 <span class="hljs-variable">$&#123;seq&#125;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;not exist <span class="hljs-variable">$&#123;curDevice&#125;</span>, seq=<span class="hljs-variable">$&#123;seq&#125;</span>&quot;</span><br><span class="hljs-keyword">else</span> <br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;exist <span class="hljs-variable">$&#123;curDevice&#125;</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment"># 3、创建镜像文件</span><br>dd <span class="hljs-keyword">if</span>=/dev/zero of=<span class="hljs-variable">$&#123;diskFile&#125;</span> bs=1M count=1024<br><span class="hljs-comment"># 4、使用 losetup将磁盘镜像文件虚拟成块设备</span><br>losetup <span class="hljs-variable">$&#123;curDevice&#125;</span> <span class="hljs-variable">$&#123;diskFile&#125;</span><br><span class="hljs-comment"># 5、在块设备上创建文件系统</span><br>mkfs.ext4 <span class="hljs-variable">$&#123;curDevice&#125;</span><br><span class="hljs-comment"># 6、mount挂载文件系统, 加上sync，确保文件可以及时地写入到映像中</span><br>mount <span class="hljs-variable">$&#123;diskFile&#125;</span> <span class="hljs-variable">$&#123;mountDir&#125;</span> -o sync<br><span class="hljs-comment"># 7、卸载回环设置</span><br>losetup -d <span class="hljs-variable">$&#123;curDevice&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>scons实用说明</title>
    <link href="/2014/08/01/04DevOps/05%20scons%E5%AE%9E%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <url>/2014/08/01/04DevOps/05%20scons%E5%AE%9E%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p>还在为写一个makefile发愁吗？还在为难记的make参数而苦恼吗？有了scons一切都边的简单了。最近研究了下scons，发现和makefile相比，soncs编译c和c++程序真的太方便了。搞程序什么做好，当然是简单实用最好下面大家就一起感受下简单的scons吧。</p><h2 id="1-使用scons编译程序"><a href="#1-使用scons编译程序" class="headerlink" title="1. 使用scons编译程序"></a>1. 使用scons编译程序</h2><p>在程序目录下执行命令如下：（前提是你已经安装scons了哟）</p><p><code>scons</code>     </p><p>噢，噢，这个好像没啥简单的哈，和make差不多嘛。是吗？那就继续瞧好吧您.</p><h2 id="2-清空编译程序"><a href="#2-清空编译程序" class="headerlink" title="2. 清空编译程序"></a>2. 清空编译程序</h2><p>在程序目录下执行命令如下</p><p><code>scons -c</code></p><p>这个嘛，，没什么吧，和make clean也没简单多少呀，不就少了几个字母吗，是吗？那咱还继续吧</p><h2 id="3-将cpp或c文件编译为执行文件"><a href="#3-将cpp或c文件编译为执行文件" class="headerlink" title="3. 将cpp或c文件编译为执行文件"></a>3. 将cpp或c文件编译为执行文件</h2><p> 在源文件目录中创建一个SConstruct的文件，并在其中添加如下内容</p><p><code>Program(&#39;testPro1&#39;, Glob(&#39;*.cpp&#39;))</code></p><p> 保存后执行1中的scons命令</p><p> 这就完事了？？是的！这就完事了，只要你程序的语法没错，应该会生成一个名字叫testPro1的程序，如果在window下会生成一个testPro1.exe的程序哟，有没有很酷？</p><p>  将cpp或c文件编译为执行文件有如下2中方式</p><p><strong>方式1：</strong></p><p>   <code>Program(&#39;程序名&#39;, Split(&#39;程序文件序列* *空格分隔&#39;))</code></p><p><strong>方式2：</strong></p><p>  <code>Program(&#39;程序名&#39;, Glob(&#39;*.cpp&#39;))</code></p><h2 id="4-编译的时候想添加上-g-O2-Wall参数"><a href="#4-编译的时候想添加上-g-O2-Wall参数" class="headerlink" title="4. 编译的时候想添加上-g -O2 -Wall参数"></a>4. 编译的时候想添加上-g -O2 -Wall参数</h2><p>使用环境变量</p><p> <code>env=Environment(CCFLAGS = [&#39;-g&#39;,&#39;-O3&#39;,&#39;-Wall&#39;])</code> </p><p>生成程序的时候使用env.Program(。。。。)即可<br>例如：</p>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">env</span>=Environment(CCFLAGS = [<span class="hljs-string">&#x27;-g&#x27;</span>,<span class="hljs-string">&#x27;-O3&#x27;</span>,<span class="hljs-string">&#x27;-Wall&#x27;</span>])<br><span class="hljs-keyword">env</span>.Program(<span class="hljs-string">&#x27;程序名&#x27;</span>, Glob(<span class="hljs-string">&#x27;*.cpp&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="5-编译生成静态库"><a href="#5-编译生成静态库" class="headerlink" title="5. 编译生成静态库"></a>5. 编译生成静态库</h2><p>  <strong>方法1：使用Library关键字</strong></p><p>  <code>Library(&#39;库名&#39;, Split(&#39;程序文件序列,空格分隔&#39;)</code></p><p>  或</p><p>  <code>Library(&#39;库名&#39;, Glob(&#39;\*.cpp&#39;))</code></p><p>  <strong>方法2：使用显示关键字StaticLibrary</strong></p><p>  <code>StaticLibrary(&#39;库名&#39;, Split(&#39;程序文件序列,空格分隔&#39;))</code></p><p>  或</p><p>  <code>StaticLibrary(&#39;库名&#39;, Glob(&#39;\*.cpp&#39;))</code></p><p>  说明：库名不要前面的lib和后缀，如库libtestdota.a生成时的库名为testdota</p><h2 id="6-编译生成动态库"><a href="#6-编译生成动态库" class="headerlink" title="6. 编译生成动态库"></a>6. 编译生成动态库</h2><p>  使用关键字<code>SharedLibrary</code></p><p>  <code>SharedLibrary(&#39;库名&#39;, Split(&#39;程序文件序列,空格分隔&#39;))</code></p><p>  或</p><p>  <code>SharedLibrary(&#39;库名&#39;, Glob(&#39;\*.cpp&#39;))</code></p><p>  说明：库名不要前面的lib和后缀，如库libtestso.so生成时的库名为testso</p><h2 id="7-程序或库中引用已有的库"><a href="#7-程序或库中引用已有的库" class="headerlink" title="7. 程序或库中引用已有的库"></a>7. 程序或库中引用已有的库</h2><p>  使用关键字LIBS和LIBPATH</p><p>  LIBS后跟程序需要引用的库名</p><p>  LIBPATH后跟程序引用库的时候所需的库文件路径</p><p>  如：</p><p> <code>Program(&#39;testPro&#39;,&#39;prog.c&#39;, LIBS = [&#39;m&#39;,&#39;m2&#39;], LIBPATH = [&#39;/usr/lib&#39;, &#39;/usr/local/lib&#39;])</code></p><p>  生成的testPro程序要引用库libm.so和libm2.so，库文件路径在/usr/lib和/usr/local/lib下</p><h2 id="8-指定程序编译过程中需要查找的头文件路径"><a href="#8-指定程序编译过程中需要查找的头文件路径" class="headerlink" title="8. 指定程序编译过程中需要查找的头文件路径"></a>8. 指定程序编译过程中需要查找的头文件路径</h2><p> 使用关键字CPPPATH</p><p> 例如：</p><p> <code>Program(&#39;hello&#39;,&#39;hello.c&#39;, CPPPATH = [&#39;include&#39;, &#39;/home/project/inc&#39;])</code></p><p> 生成hello程序的时候hello.c可能引用了其他的头文件，在编译hello.c的时候会查找./include和/home/project/inc下是否有需要的头文件</p><p> 到此一些常用的makefile的功能基本都有了，有没有觉得很简单那，后面会继续写一些实用的相对复杂一些的功能，希望大家能够喜欢！</p>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scons</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(转载) 一致性hash算法（consistent hashing）</title>
    <link href="/2014/08/01/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01(%E8%BD%AC%E8%BD%BD)%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95(consistent%20hashing)/"/>
    <url>/2014/08/01/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01(%E8%BD%AC%E8%BD%BD)%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95(consistent%20hashing)/</url>
    
    <content type="html"><![CDATA[<p>一致性hash算法 consistent hashing算法早在1997年就在论文**<a href="http://portal.acm.org/citation.cfm?id=258660">Consistent hashing and random trees</a>**中被提出，目前在cache系统中应用越来越广泛；</p><h2 id="1-基本场景"><a href="#1-基本场景" class="headerlink" title="1 基本场景"></a>1 基本场景</h2><p>比如你有N个cache服务器（后面简称cache），那么如何将一个对象object映射到N个cache上呢，你很可能会采用类似下面的通用方法计算object的hash值，然后均匀的映射到到N个cache；</p><p>hash(object)%N </p><p>一切都运行正常，再考虑如下的两种情况；</p><p>1 一个cache服务器m down掉了（在实际应用中必须要考虑这种情况），这样所有映射到cache m的对象都会失效，怎么办，需要把cache m从cache中移除，这时候cache是N-1台，映射公式变成了hash(object)%(N-1)；</p><p>2 由于访问加重，需要添加cache，这时候cache是N+1台，映射公式变成了hash(object)%(N+1)；</p><p>1和2意味着什么？这意味着突然之间几乎所有的cache都失效了。对于服务器而言，这是一场灾难，洪水般的访问都会直接冲向后台服务器；</p><p>再来考虑第三个问题，由于硬件能力越来越强，你可能想让后面添加的节点多做点活，显然上面的hash算法也做不到。</p><p>有什么方法可以改变这个状况呢，这就是consistent hashing…</p><h2 id="2-hash算法和单调性"><a href="#2-hash算法和单调性" class="headerlink" title="2 hash算法和单调性"></a>2 hash算法和单调性</h2><p>　　Hash算法的一个衡量指标是单调性（Monotonicity），定义如下：</p><p>　　单调性是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲加入到系统中。哈希的结果应能够保证原有已分配的内容可以被映射到新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区。</p><p>容易看到，上面的简单hash算法hash(object)%N难以满足单调性要求。</p><h2 id="3-consistent-hashing算法的原理"><a href="#3-consistent-hashing算法的原理" class="headerlink" title="3 consistent hashing算法的原理"></a>3 consistent hashing算法的原理</h2><p>consistent hashing是一种hash算法，简单的说，在移除/添加一个cache时，它能够尽可能小的改变已存在key映射关系，尽可能的满足单调性的要求。</p><p>下面就来按照5个步骤简单讲讲consistent hashing算法的基本原理。</p><h3 id="3-1环形hash空间"><a href="#3-1环形hash空间" class="headerlink" title="3.1环形hash空间"></a>3.1环形hash空间</h3><p>考虑通常的hash算法都是将value映射到一个32为的key值，也即是0~2^32-1次方的数值空间；我们可以将这个空间想象成一个首（0）尾（2^32-1）相接的圆环，如下面图1所示的那样。</p><img src="/2014/08/01/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01(%E8%BD%AC%E8%BD%BD)%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95(consistent%20hashing)/circle.jpg" class="" title="图1. 环形hash空间"><h3 id="3-2-把对象映射到hash空间"><a href="#3-2-把对象映射到hash空间" class="headerlink" title="3.2 把对象映射到hash空间"></a>3.2 把对象映射到hash空间</h3><p>接下来考虑4个对象object1~object4，通过hash函数计算出的hash值key在环上的分布如图2所示。</p><p>hash(object1) = key1;</p><p>… …</p><p>hash(object4) = key4;</p><img src="/2014/08/01/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01(%E8%BD%AC%E8%BD%BD)%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95(consistent%20hashing)/object.jpg" class="" title="图2. 4个对象的key值分布"><h3 id="3-3-把cache映射到hash空间"><a href="#3-3-把cache映射到hash空间" class="headerlink" title="3.3 把cache映射到hash空间"></a>3.3 把cache映射到hash空间</h3><p>Consistent hashing的基本思想就是将对象和cache都映射到同一个hash数值空间中，并且使用相同的hash算法。</p><p>假设当前有A,B和C共3台cache，那么其映射结果将如图3所示，他们在hash空间中，以对应的hash值排列。</p><p>hash(cache A) = key A;</p><p>… …</p><p>hash(cache C) = key C;</p><img src="/2014/08/01/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01(%E8%BD%AC%E8%BD%BD)%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95(consistent%20hashing)/cache.jpg" class="" title="图3 cache和对象的key值分布"><p>说到这里，顺便提一下cache的hash计算，一般的方法可以使用cache机器的IP地址或者机器名作为hash输入。</p><h3 id="3-4-把对象映射到cache"><a href="#3-4-把对象映射到cache" class="headerlink" title="3.4 把对象映射到cache"></a>3.4 把对象映射到cache</h3><p>现在cache和对象都已经通过同一个hash算法映射到hash数值空间中了，接下来要考虑的就是如何将对象映射到cache上面了。</p><p>在这个环形空间中，如果沿着顺时针方向从对象的key值出发，直到遇见一个cache，那么就将该对象存储在这个cache上，因为对象和cache的hash值是固定的，因此这个cache必然是唯一和确定的。这样不就找到了对象和cache的映射方法了吗？！</p><p>依然继续上面的例子（参见图3），那么根据上面的方法，对象object1将被存储到cache A上；object2和object3对应到cache C；object4对应到cache B；</p><h3 id="3-5-考察cache的变动"><a href="#3-5-考察cache的变动" class="headerlink" title="3.5 考察cache的变动"></a>3.5 考察cache的变动</h3><p>前面讲过，通过 hash然后求余的方法带来的最大问题就在于不能满足单调性，当cache有所变动时，cache会失效，进而对后台服务器造成巨大的冲击，现在就来分析分析consistent hashing算法。</p><h4 id="3-5-1-移除cache"><a href="#3-5-1-移除cache" class="headerlink" title="3.5.1 移除cache"></a>3.5.1 移除cache</h4><p>考虑假设cache B挂掉了，根据上面讲到的映射方法，这时受影响的将仅是那些沿cache B逆时针遍历直到下一个cache（cache C）之间的对象，也即是本来映射到cache B上的那些对象。</p><p>因此这里仅需要变动对象object4，将其重新映射到cache C上即可；参见图4。</p><img src="/2014/08/01/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01(%E8%BD%AC%E8%BD%BD)%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95(consistent%20hashing)/remove.jpg" class="" title="图4 CacheB被移除后的cache映射"><h4 id="3-5-2-添加cache"><a href="#3-5-2-添加cache" class="headerlink" title="3.5.2 添加cache"></a>3.5.2 添加cache</h4><p>再考虑添加一台新的cache D的情况，假设在这个环形hash空间中，cache D被映射在对象object2和object3之间。这时受影响的将仅是那些沿cache D逆时针遍历直到下一个cache（cache B）之间的对象（它们是也本来映射到cache C上对象的一部分），将这些对象重新映射到cache D上即可。</p><p>因此这里仅需要变动对象object2，将其重新映射到cache D上；参见图5。</p><img src="/2014/08/01/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01(%E8%BD%AC%E8%BD%BD)%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95(consistent%20hashing)/add.jpg" class="" title="图5. 添加cacheD后的映射关系"><h2 id="4-虚拟节点"><a href="#4-虚拟节点" class="headerlink" title="4 虚拟节点"></a>4 虚拟节点</h2><p>考量Hash算法的另一个指标是平衡性(Balance)，定义如下：</p><p>平衡性</p><p>　　平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲空间都得到利用。</p><p>hash算法并不是保证绝对的平衡，如果cache较少的话，对象并不能被均匀的映射到cache上，比如在上面的例子中，仅部署cache A和cache C的情况下，在4个对象中，cache A仅存储了object1，而cache C则存储了object2、object3和object4；分布是很不均衡的。</p><p>为了解决这种情况，consistent hashing引入了“虚拟节点”的概念，它可以如下定义：</p><p>“虚拟节点”（virtual node）是实际节点在hash空间的复制品（replica），一实际个节点对应了若干个“虚拟节点”，这个对应个数也成为“复制个数”，“虚拟节点”在hash空间中以hash值排列。</p><p>仍以仅部署cache A和cache C的情况为例，在图4中我们已经看到，cache分布并不均匀。现在我们引入虚拟节点，并设置“复制个数”为2，这就意味着一共会存在4个“虚拟节点”， cache A1, cache A2代表了cache A；cache C1, cache C2代表了cache C；假设一种比较理想的情况，参见图6。</p><img src="/2014/08/01/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01(%E8%BD%AC%E8%BD%BD)%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95(consistent%20hashing)/virtual.jpg" class="" title="图6. 引入“虚拟节点”后的映射关系"><p>此时，对象到“虚拟节点”的映射关系为：</p><p>objec1-&gt;cache A2；objec2-&gt;cache A1；objec3-&gt;cache C1；objec4-&gt;cache C2；</p><p>因此对象object1和object2都被映射到了cache A上，而object3和object4映射到了cache C上；平衡性有了很大提高。</p><p>引入“虚拟节点”后，映射关系就从{对象-&gt;节点}转换到了{对象-&gt;虚拟节点}。查询物体所在cache时的映射关系如图7所示。</p><img src="/2014/08/01/00%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/01(%E8%BD%AC%E8%BD%BD)%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95(consistent%20hashing)/map.jpg" class="" title="图7. 查询对象所在cache"><p>“虚拟节点”的hash计算可以采用对应节点的IP地址加数字后缀的方式。例如假设cache A的IP地址为202.168.14.241。</p><p>引入“虚拟节点”前，计算cache A的hash值：</p><p>Hash(“202.168.14.241”);</p><p>引入“虚拟节点”后，计算“虚拟节”点cache A1和cache A2的hash值：</p><p>Hash(“202.168.14.241#1”); // cache A1</p><p>Hash(“202.168.14.241#2”); // cache A2</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5 小结"></a>5 小结</h2><p>Consistent hashing的基本原理就是这些，具体的分布性等理论分析应该是很复杂的，不过一般也用不到。</p><p><a href="http://weblogs.java.net/blog/2007/11/27/consistent-hashing%E4%B8%8A%E9%9D%A2%E6%9C%89%E4%B8%80%E4%B8%AAjava%E7%89%88%E6%9C%AC%E7%9A%84%E4%BE%8B%E5%AD%90%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%82%E8%80%83%E3%80%82">http://weblogs.java.net/blog/2007/11/27/consistent-hashing上面有一个java版本的例子，可以参考。</a></p><p><a href="http://blog.csdn.net/mayongzhan/archive/2009/06/25/4298834.aspx%E8%BD%AC%E8%BD%BD%E4%BA%86%E4%B8%80%E4%B8%AAPHP%E7%89%88%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E3%80%82">http://blog.csdn.net/mayongzhan/archive/2009/06/25/4298834.aspx转载了一个PHP版的实现代码。</a></p><p><a href="http://www.codeproject.com/KB/recipes/lib-conhash.aspx">http://www.codeproject.com/KB/recipes/lib-conhash.aspx</a> C语言版本</p><p>一些参考资料地址：</p><p><a href="http://portal.acm.org/citation.cfm?id=258660">http://portal.acm.org/citation.cfm?id=258660</a></p><p><a href="http://en.wikipedia.org/wiki/Consistent_hashing">http://en.wikipedia.org/wiki/Consistent_hashing</a></p><p><a href="http://www.spiteful.com/2008/03/17/programmers-toolbox-part-3-consistent-hashing/">http://www.spiteful.com/2008/03/17/programmers-toolbox-part-3-consistent-hashing/</a></p><p><a href="http://weblogs.java.net/blog/2007/11/27/consistent-hashing">http://weblogs.java.net/blog/2007/11/27/consistent-hashing</a></p><p><a href="http://tech.idv2.com/2008/07/24/memcached-004/">http://tech.idv2.com/2008/07/24/memcached-004/</a></p><p><a href="http://blog.csdn.net/mayongzhan/archive/2009/06/25/4298834.aspx">http://blog.csdn.net/mayongzhan/archive/2009/06/25/4298834.aspx</a></p>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hash, 算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh跳转无密码登录或执行命令</title>
    <link href="/2012/03/20/04DevOps/06%20ssh%E8%B7%B3%E8%BD%AC%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E6%88%96%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/"/>
    <url>/2012/03/20/04DevOps/06%20ssh%E8%B7%B3%E8%BD%AC%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E6%88%96%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>我们在使用linux开发过程中，经常需要在不同服务器间进行跳转，通过ssh，每次都需要输入密码，比较繁琐，今天从网上找了相关的方法，但是实验过程中发现还是有些问题，特将一些细节整理如下：</p><p>比如我有机器192.168.1.100 和192.168.1.200两台服务器，我想从100登录到200中利用ssh不输入密码，所以我需要进行如下的步骤</p><ol><li><p>首先在ip为<strong>100</strong>的机器上执行ssh-keygen 命令，一路回车，这样，就在当前用户目录下的.ssh文件夹下生成了两个文件id_rsa和id_rsa.pub文件</p></li><li><p>将id_rsa.pub利用scp命令传送到200机器上，，如scp id_rsa.pub <a href="mailto:root@192.168.1.200:/root/.ssh/100.put">root@192.168.1.200:/root/.ssh/100.put</a></p></li></ol><p>如果在200的/root/.ssh/目录下有 authorized_keys 这个文件的话，则直接利用cat命令将100.put文件内容添加到 authorized_keys后， 命令如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> <span class="hljs-number">100</span>.pub &gt;&gt; authorized_keys<br></code></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>注意，不能利用手工的拷贝，否则会导致失败，只能用cat &gt;&gt; （这点让我尝试了很多次）</p></blockquote></blockquote></blockquote><ol start="3"><li>修改authorized_keys 的权限为600，如下：chmod 600 authorized_keys</li></ol><p>然后删除100.pub就可以了，大功告成，赶紧到100的机器上试试 ssh <a href="mailto:root@192.168.1.200">root@192.168.1.200</a> ，看看直接进去了吧，不用再输入密码了！</p>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
